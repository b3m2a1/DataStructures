Notebook[{

Cell[CellGroupData[{
Cell["Tree", \
"CodeSection",ExpressionUUID->"8463c7ec-b791-493d-9495-f8400294d35d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Tree", "::", "usage"}], "=", "\"\<A Tree data structure\>\""}], 
  ";"}]], "CodeInput",ExpressionUUID->"13cee42b-2c2a-43b5-aa12-25881772c413"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TreeNode", "::", "usage"}], "=", 
   "\"\<A TreeNode object which exists as a symbolic wrapper on node \
data\>\""}], 
  ";"}]], "CodeInput",ExpressionUUID->"e7c3f4e9-afe7-4d23-a0ed-712af141fd21"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TreeData", "::", "usage"}], "=", 
   "\"\<Extracts data from a node\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeChildren", "::", "usage"}], "=", 
   "\"\<Pulls children out of a node\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeChildCount", "::", "usage"}], "=", 
   "\"\<Counts the number of leaves in the tree\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"fe7923d5-edb0-4728-b9ab-2b7449c5a76f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TreeInsert", "::", "usage"}], "=", 
   "\"\<Inserts a node into a tree\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreePop", "::", "usage"}], "=", 
   "\"\<Pops a node (and children) from a tree\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeReplace", "::", "usage"}], "=", 
   "\"\<Replaces a node in a tree\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"8d885e51-2719-44ac-945b-90bfabbc3e39"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TreeInsertData", "::", "usage"}], "=", 
   "\"\<Inserts into the data field of each node\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreePopData", "::", "usage"}], "=", 
   "\"\<Deletes from the data field of each node\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeReplaceData", "::", "usage"}], "=", 
   "\"\<Replaces data in a tree\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"046105bf-4424-4476-9869-7a88b4f40ddf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"TreeWalk", "::", "usage"}], "=", "\"\<Walks a tree\>\""}], 
  ";"}]], "CodeInput",ExpressionUUID->"22d1e2c9-0a8a-4204-ab36-72fafd3edd77"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"4ea5a183-88c8-4d68-b5d7-\
98c276817700"],

Cell["\<\
\[LeftCeiling]
\tWe\[CloseCurlyQuote]ll use a linked-list implementation to get efficient \
sub-tree-ing
\tThis will feel rather like our Stack implementation, honestly... but rather \
than introducing pushes and pops we\[CloseCurlyQuote]ll introduce tree \
insertion, deletion, rearrangement, and walking
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"332b6e38-76b3-4d84-a436-e5be5a8e2148"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Tree\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"24213544-7efd-4443-8ded-61e9da389b9a"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Constructor\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"df217790-fcef-4649-9332-f21cf02c31ef"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Tree\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"bb80f5cf-23a9-42f6-b81a-ce233025d694"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Tree", "//", "ClearAll"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Tree", "[", "]"}], ":=", 
   RowBox[{"Tree", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", " ", 
      RowBox[{"{", "}"}]}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"unconstructedQ", "=", "\n", "  ", 
   RowBox[{"Function", "[", 
    RowBox[{"Null", ",", " ", 
     RowBox[{"System`Private`EntryQ", "[", 
      RowBox[{"Unevaluated", "[", "#", "]"}], "]"}], ",", " ", "HoldFirst"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"q", ":", 
   RowBox[{
    RowBox[{"Tree", "[", "l_List", "]"}], "?", "unconstructedQ"}]}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"System`Private`SetNoEntry", "[", 
   RowBox[{"Unevaluated", "@", "q"}], 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"c6e5c231-264f-4ebf-bed3-1c882f09c778"],

Cell[BoxData[
 RowBox[{
  RowBox[{"newTree", "[", "list_", "]"}], ":=", "\n", "  ", 
  RowBox[{"System`Private`SetNoEntry", "@", "\n", "    ", 
   RowBox[{"Unevaluated", "[", 
    RowBox[{"Tree", "[", "list", "]"}], 
    "]"}]}]}]], \
"CodeInput",ExpressionUUID->"c7e14aef-fc6a-48f3-bf5b-d98d576c4907"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreeNode\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"91e53371-a2c7-43bf-9d30-9ff099850e8c"],

Cell[BoxData[{
 RowBox[{"TreeNode", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeNode", "[", "]"}], ":=", 
   RowBox[{"TreeNode", "[", 
    RowBox[{
     RowBox[{"{", "}"}], 
     RowBox[{"(*", " ", 
      RowBox[{"data", " ", "field"}], " ", "*)"}], ",", " ", 
     RowBox[{"{", "}"}]}], 
    RowBox[{"(*", 
     RowBox[{"children", " ", "field"}], " ", "*)"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"n", ":", 
   RowBox[{
    RowBox[{"TreeNode", "[", 
     RowBox[{"data_List", ",", " ", "children_List"}], "]"}], "?", 
    "unconstructedQ"}]}], ":=", "\[IndentingNewLine]", 
  RowBox[{"System`Private`SetNoEntry", "[", 
   RowBox[{"Unevaluated", "@", "n"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"newNode", "[", 
   RowBox[{"data_", ",", " ", "children_"}], "]"}], ":=", "\n", "  ", 
  RowBox[{"System`Private`SetNoEntry", "@", "\n", "    ", 
   RowBox[{"Unevaluated", "[", 
    RowBox[{"TreeNode", "[", 
     RowBox[{"data", ",", " ", "children"}], "]"}], 
    "]"}]}]}]}], \
"CodeInput",ExpressionUUID->"016a7336-67a4-4357-a09e-9da5e23a51ca"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Destructor Operations\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"f2f97d84-2671-43e9-a149-834bae636410"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"basic", " ", "destructors"}], " ", "*)"}], "\[IndentingNewLine]", 
  
  RowBox[{
   RowBox[{"TreeQ", "//", "Clear"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"TreeQ", "[", "q_Tree", "]"}], ":=", 
     RowBox[{"System`Private`NoEntryQ", "[", "q", "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{
     RowBox[{"TreeQ", "[", "_", "]"}], ":=", "False"}], 
    ";"}]}]}]], \
"CodeInput",ExpressionUUID->"17e19fad-bec4-460b-ac92-c591e75a05e5"],

Cell[BoxData[{
 RowBox[{"TreeNodeQ", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeNodeQ", "[", "q_TreeNode", "]"}], ":=", 
   RowBox[{"System`Private`NoEntryQ", "[", "q", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"TreeNodeQ", "[", "_", "]"}], ":=", 
  "False"}]}], \
"CodeInput",ExpressionUUID->"0e46958e-bab5-4d4f-a93a-f33e72c8cb77"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]treePosSpec\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"491c1c4e-2058-4585-89ba-184ae852a1c6"],

Cell[BoxData[{
 RowBox[{"treePosSpec", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"treePosSpec", "[", 
    RowBox[{
     RowBox[{"{", "}"}], "|", "None"}], "]"}], ":=", "\n", "  ", 
   RowBox[{"{", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"treePosSpec", "[", 
    RowBox[{"pos", ":", 
     RowBox[{"{", "__Integer", "}"}]}], "]"}], ":=", "\n", "  ", 
   RowBox[{"Prepend", "[", 
    RowBox[{
     RowBox[{"Riffle", "[", 
      RowBox[{"pos", ",", " ", "2"}], "]"}], ",", " ", "2"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"treePosSpec", "[", "i_Integer", "]"}], ":=", "\n", "  ", 
   RowBox[{"treePosSpec", "[", 
    RowBox[{"{", "i", "}"}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"c2fd7f3e-b00e-436d-b872-61c1b088dea5"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]treeHasDepth\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"7040625d-c70a-47b6-b3fc-06bae1c87b7b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"treeHasDepth", "[", 
    RowBox[{"t_", ",", " ", "posSpec_"}], "]"}], ":=", "\n", "  ", 
   RowBox[{"Quiet", "[", 
    RowBox[{
     RowBox[{"Check", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"t", "[", 
         RowBox[{"[", 
          RowBox[{"Sequence", "@@", "posSpec"}], "]"}], "]"}], ";", "True"}], 
       ",", " ", "False", ",", " ", 
       RowBox[{"Part", "::", "partw"}]}], "]"}], ",", " ", 
     RowBox[{"Part", "::", "partw"}]}], "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"467cd43c-8548-4637-8ef8-6f0246723b08"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Children\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"8b089674-843f-476e-a48f-1c3168ff4fa2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Tree", "::", "nochild"}], "=", 
   "\"\<Tree doesn't have children at node `` and position ``\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeNode", "::", "nohild"}], "=", 
   "\"\<TreeNode doesn't have children at node `` and position ``\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"3ce9b6fd-d489-49be-88de-4352ab51b9aa"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]treeChildren\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"1ce0dff8-1f12-4c3e-a954-2653c640e228"],

Cell[BoxData[{
 RowBox[{"treeChildren", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"treeChildren", "[", "\n", "  ", 
    RowBox[{
    "head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", "list_", ",", " ", 
     "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}]}], 
     ",", "\n", "  ", "children_"}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"Module", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"{", "\n", "      ", 
      RowBox[{
       RowBox[{"ps", "=", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"treePosSpec", "[", "pos", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"2", ",", " ", "children"}], "}"}]}], "]"}]}], ",", "\n", 
       "      ", "$failed", ",", "\n", "      ", "c"}], "\n", "      ", "}"}],
      ",", "\n", "    ", 
     RowBox[{
      RowBox[{"c", "=", "\n", "      ", 
       RowBox[{"Quiet", "[", "\n", "        ", 
        RowBox[{
         RowBox[{"Check", "[", "\n", "          ", 
          RowBox[{
           RowBox[{"list", "[", 
            RowBox[{"[", 
             RowBox[{"Sequence", "@@", "ps"}], "]"}], "]"}], ",", "\n", 
           "          ", "$failed", ",", "\n", "          ", 
           RowBox[{"Part", "::", "partw"}]}], "]"}], ",", " ", "\n", "  ", 
         "      ", 
         RowBox[{"Part", "::", "partw"}]}], "\n", "        ", "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"c", "=!=", "$failed"}], ",", "\n", "      ", "c", ",", "\n", 
        "      ", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"head", "::", "nochild"}], ",", " ", "pos", ",", " ", 
           "children"}], "]"}], ";", "\n", "      ", 
         RowBox[{"Failure", "[", 
          RowBox[{"\"\<NoChild\>\"", ",", " ", 
           RowBox[{"<|", "\n", "        ", 
            RowBox[{
             RowBox[{"\"\<MessageTemplate\>\"", ":>", 
              RowBox[{"head", "::", "nochild"}]}], ",", "\n", "        ", 
             RowBox[{"\"\<MessageParameters\>\"", "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"pos", ",", " ", "children", ",", " ", "obj"}], 
               "}"}]}]}], "\n", "        ", "|>"}]}], "\n", "        ", 
          "]"}]}]}], "\n", "      ", "]"}]}]}], "\n", "    ", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"d7fdcbc9-82d6-4932-84ec-4a9dc7179fe7"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreeChildren\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"4074b452-bb24-4e49-8a17-77488fbd3a7d"],

Cell[BoxData[{
 RowBox[{"TreeChildren", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeChildren", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"Tree", "[", "t_", "]"}]}], ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer"}], ":", "1"}], ",", 
     "\n", "  ", 
     RowBox[{"children", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "_Span", "|", 
       "All"}], ":", "All"}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeChildren", "[", 
        RowBox[{
        "Tree", ",", " ", "n", ",", " ", "t", ",", " ", "pos", ",", " ", 
         "children"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"Which", "[", "\n", "      ", 
      RowBox[{
       RowBox[{"Not", "@", 
        RowBox[{"ListQ", "@", "l"}]}], ",", " ", "\n", "        ", "l", ",", 
       "\n", "      ", 
       RowBox[{"IntegerQ", "@", "children"}], ",", "\n", "        ", 
       RowBox[{"newNode", "@@", "l"}], ",", "\n", "      ", "True", ",", "\n",
        "        ", 
       RowBox[{"newNode", "@@@", "l"}]}], "\n", "      ", "]"}]}], "\n", 
    "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeChildren", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"TreeNode", "[", 
       RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer"}], ":", "1"}], ",", 
     "\n", "  ", 
     RowBox[{"children", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "_Span", "|", 
       "All"}], ":", "All"}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeChildren", "[", 
        RowBox[{
        "TreeNode", ",", " ", "n", ",", " ", "t", ",", " ", "pos", ",", " ", 
         "children"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"Which", "[", "\n", "      ", 
      RowBox[{
       RowBox[{"Not", "@", 
        RowBox[{"ListQ", "@", "l"}]}], ",", " ", "\n", "        ", "l", ",", 
       "\n", "      ", 
       RowBox[{"IntegerQ", "@", "children"}], ",", "\n", "        ", 
       RowBox[{"newNode", "@@", "l"}], ",", "\n", "      ", "True", ",", "\n",
        "        ", 
       RowBox[{"newNode", "@@@", "l"}]}], "\n", "      ", "]"}]}], "\n", 
    "    ", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"00326d06-ac63-4cf4-a28f-200819ffa237"]\

}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]ChildCount\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"e9c82f0e-9ae5-49cd-a54e-59cc9dcc22e8"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreeChildCount\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"7940a0ec-a0d2-4c8f-9295-a9104ad7eb49"],

Cell[BoxData[{
 RowBox[{"TreeChildCount", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeChildCount", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"Tree", "[", "t_", "]"}]}], ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeChildren", "[", 
        RowBox[{
        "Tree", ",", " ", "n", ",", " ", "t", ",", " ", "pos", ",", " ", 
         "All"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"Length", "@", "l"}], ",", " ", "l"}], "]"}]}], "\n", "    ", 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeChildCount", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"TreeNode", "[", 
       RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}], ",", "\n", "  ", 
     RowBox[{"children", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "_Span", "|", 
       "All"}], ":", "All"}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeChildren", "[", 
        RowBox[{"TreeNode", ",", " ", "n", ",", " ", 
         RowBox[{"{", 
          RowBox[{"d", ",", " ", "t"}], "}"}], ",", " ", "pos", ",", " ", 
         "All"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"Length", "@", "l"}], ",", " ", "l"}], "]"}]}], "\n", "    ", 
    "]"}]}], ";"}]}], \
"CodeInput",ExpressionUUID->"d3d4da37-2fc8-41da-ba28-0d3695202190"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Insert\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"a9077792-6e0d-4453-8528-23d16efd1c32"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Tree", "::", "nonode"}], "=", 
   "\"\<Tree doesn't have a node at ``\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeNode", "::", "nohild"}], "=", 
   "\"\<TreeNode doesn't have a node at ``\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"4de526b7-e257-47cf-880e-14797fa9bc9c"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]treeInsert\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"10b4a8df-27e0-4e74-bcff-bc65e5656228"],

Cell[BoxData[{
 RowBox[{"treeInsert", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"treeInsert", "[", "\n", "  ", 
    RowBox[{
    "head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", "list_", ",", " ", 
     "\n", "  ", 
     RowBox[{"node", ":", 
      RowBox[{"{", 
       RowBox[{"data_List", ",", " ", "children_List"}], "}"}]}], ",", " ", 
     "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}]}], 
     ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer"}]}], "\n", "  ", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"Module", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"{", "\n", "      ", 
      RowBox[{
      "c", ",", " ", "\n", "      ", "$failed", ",", " ", "\n", "      ", 
       RowBox[{"ps", "=", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"treePosSpec", "[", "pos", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"2", ",", " ", "where"}], "}"}]}], "]"}]}]}], "\n", 
      "      ", "}"}], ",", "\n", "    ", 
     RowBox[{
      RowBox[{"c", "=", "\n", "      ", 
       RowBox[{"Quiet", "[", "\n", "        ", 
        RowBox[{
         RowBox[{"Check", "[", "\n", "  ", "        ", 
          RowBox[{
           RowBox[{"Insert", "[", 
            RowBox[{"list", ",", " ", "node", ",", " ", "ps"}], "]"}], ",", 
           "\n", "  ", "        ", "$failed", ",", "\n", "  ", "        ", 
           RowBox[{"Insert", "::", "ins"}]}], "\n", "  ", "        ", "]"}], 
         ",", "\n", "  ", "      ", 
         RowBox[{"Insert", "::", "ins"}]}], "\n", "        ", "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"c", "===", "$failed"}], ",", "\n", "      ", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"head", "::", "nonode"}], ",", " ", "pos"}], "]"}], ";", 
         "\n", "      ", 
         RowBox[{"Failure", "[", 
          RowBox[{"\"\<NoNode\>\"", ",", " ", 
           RowBox[{"<|", "\n", "        ", 
            RowBox[{
             RowBox[{"\"\<MessageTemplate\>\"", ":>", 
              RowBox[{"head", "::", "nonode"}]}], ",", "\n", "        ", 
             RowBox[{"\"\<MessageParameters\>\"", "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"pos", ",", " ", "obj"}], "}"}]}]}], "\n", "        ", 
            "|>"}]}], "\n", "        ", "]"}]}], ",", "\n", "      ", "c"}], 
       "\n", "      ", "]"}]}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"treeInsert", "[", "\n", "  ", 
    RowBox[{
    "head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", "list_", ",", " ", 
     "\n", "  ", 
     RowBox[{"TreeNode", "[", 
      RowBox[{"data_List", ",", " ", "children_List"}], "]"}], ",", " ", "\n",
      "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}]}], 
     ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer"}]}], "\n", "  ", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"treeInsert", "[", 
    RowBox[{"head", ",", " ", "obj", ",", " ", "list", ",", " ", 
     RowBox[{"{", 
      RowBox[{"data", ",", " ", "children"}], "}"}], ",", " ", "pos", ",", 
     " ", "where"}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"d8fca020-337f-48b3-a84e-fbabe8caece7"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreeInsert\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"d5b23248-fc71-4e33-91fd-0d321b52dcdd"],

Cell[BoxData[{
 RowBox[{"TreeInsert", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeInsert", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"Tree", "[", "t_", "]"}]}], ",", " ", "\n", "  ", 
     RowBox[{"node", ":", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"data_List", ",", " ", "children_List"}], "}"}], "|", 
       RowBox[{"_TreeNode", "?", "TreeNodeQ"}]}]}], ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}], ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer", ":", 
      RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeInsert", "[", 
        RowBox[{
        "Tree", ",", " ", "n", ",", " ", "t", ",", " ", "node", ",", " ", 
         "pos", ",", " ", "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"newTree", "[", "l", "]"}], ",", " ", "l"}], "]"}]}], "\n", 
    "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeInsert", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"TreeNode", "[", 
       RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", "  ", 
     RowBox[{"node", ":", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"data_List", ",", " ", "children_List"}], "}"}], "|", 
       RowBox[{"_TreeNode", "?", "TreeNodeQ"}]}]}], ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}], ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer", ":", 
      RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeInsert", "[", 
        RowBox[{"TreeNode", ",", " ", "n", ",", " ", 
         RowBox[{"{", 
          RowBox[{"d", ",", " ", "t"}], "}"}], ",", " ", "node", ",", " ", 
         "pos", ",", " ", "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"newNode", "[", 
        RowBox[{"d", ",", " ", "l"}], "]"}], ",", " ", "l"}], "]"}]}], "\n", 
    "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"TreeInsert", "[", "\n", "  ", 
   RowBox[{
    RowBox[{"n", ":", 
     RowBox[{"_Tree", "|", "_TreeNode"}]}], ",", " ", "\n", "  ", "data_", 
    ",", " ", "\n", "  ", 
    RowBox[{"pos", ":", 
     RowBox[{
      RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
     "None"}], ",", "\n", "  ", 
    RowBox[{"where", ":", "_Integer", ":", 
     RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
  RowBox[{"TreeInsert", "[", 
   RowBox[{"n", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "data", "}"}], ",", " ", 
      RowBox[{"{", "}"}]}], "}"}], ",", " ", "pos", ",", " ", "where"}], 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"c2414599-d763-4086-8dbe-b6eb78811dfb"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Replace\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"292911d6-4b35-450f-b184-08d268cdd393"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]treeReplace\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"c93bb4ff-6d35-447a-9738-e1346647c84c"],

Cell[BoxData[{
 RowBox[{"treeReplace", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"treeReplace", "[", "\n", "  ", 
    RowBox[{
    "head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", "list_", ",", " ", 
     "\n", "  ", 
     RowBox[{"node", ":", 
      RowBox[{"{", 
       RowBox[{"data_List", ",", " ", "children_List"}], "}"}]}], ",", " ", 
     "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}]}], 
     ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer"}]}], "\n", "  ", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"Module", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"{", "\n", "      ", 
      RowBox[{
      "c", ",", " ", "\n", "      ", "$failed", ",", " ", "\n", "      ", 
       RowBox[{"ps", "=", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"treePosSpec", "[", "pos", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"2", ",", " ", "where"}], "}"}]}], "]"}]}]}], "\n", 
      "      ", "}"}], ",", "\n", "    ", 
     RowBox[{
      RowBox[{"c", "=", "\n", "      ", 
       RowBox[{"Quiet", "[", "\n", "        ", 
        RowBox[{
         RowBox[{"Check", "[", "\n", "          ", 
          RowBox[{
           RowBox[{"ReplacePart", "[", 
            RowBox[{"list", ",", " ", 
             RowBox[{"ps", "->", "node"}]}], "]"}], ",", "\n", "          ", 
           "$failed", ",", "\n", "  ", "        ", 
           RowBox[{"Insert", "::", "ins"}]}], "\n", "  ", "        ", "]"}], 
         ",", "\n", "  ", "      ", 
         RowBox[{"Insert", "::", "ins"}]}], "\n", "        ", "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"c", "===", "$failed"}], ",", "\n", "      ", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"head", "::", "nonode"}], ",", " ", "pos"}], "]"}], ";", 
         "\n", "      ", 
         RowBox[{"Failure", "[", 
          RowBox[{"\"\<NoNode\>\"", ",", " ", 
           RowBox[{"<|", "\n", "        ", 
            RowBox[{
             RowBox[{"\"\<MessageTemplate\>\"", ":>", 
              RowBox[{"head", "::", "nonode"}]}], ",", "\n", "        ", 
             RowBox[{"\"\<MessageParameters\>\"", "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"pos", ",", " ", "obj"}], "}"}]}]}], "\n", "        ", 
            "|>"}]}], "\n", "        ", "]"}]}], ",", "\n", "      ", "c"}], 
       "\n", "      ", "]"}]}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"treeReplace", "[", "\n", "  ", 
    RowBox[{
    "head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", "list_", ",", " ", 
     "\n", "  ", 
     RowBox[{"TreeNode", "[", 
      RowBox[{"data_List", ",", " ", "children_List"}], "]"}], ",", " ", "\n",
      "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}]}], 
     ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer"}]}], "\n", "  ", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"treeInsert", "[", 
    RowBox[{"head", ",", " ", "obj", ",", " ", "list", ",", " ", 
     RowBox[{"{", 
      RowBox[{"data", ",", " ", "children"}], "}"}], ",", " ", "pos", ",", 
     " ", "where"}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"5fd52f21-5cf3-4f74-89be-69b167ce34e7"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreeReplace\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"e105e8ae-d728-4303-9e97-d19d0fe17b6c"],

Cell[BoxData[{
 RowBox[{"TreeReplace", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeReplace", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"Tree", "[", "t_", "]"}]}], ",", "  ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}], ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer", ":", 
      RowBox[{"-", "1"}]}], ",", "\n", "  ", 
     RowBox[{"node", ":", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"data_List", ",", " ", "children_List"}], "}"}], "|", 
       RowBox[{"_TreeNode", "?", "TreeNodeQ"}]}]}]}], "\n", "  ", "]"}], ":=",
    "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeReplace", "[", 
        RowBox[{
        "Tree", ",", " ", "n", ",", " ", "t", ",", " ", "node", ",", " ", 
         "pos", ",", " ", "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"newTree", "[", "l", "]"}], ",", " ", "l"}], "]"}]}], "\n", 
    "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeReplace", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"TreeNode", "[", 
       RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}], ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer", ":", 
      RowBox[{"-", "1"}]}], ",", "\n", "  ", 
     RowBox[{"node", ":", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"data_List", ",", " ", "children_List"}], "}"}], "|", 
       RowBox[{"_TreeNode", "?", "TreeNodeQ"}]}]}]}], "\n", "  ", "]"}], ":=",
    "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeReplace", "[", 
        RowBox[{"TreeNode", ",", " ", "n", ",", " ", 
         RowBox[{"{", 
          RowBox[{"d", ",", " ", "t"}], "}"}], ",", " ", "node", ",", " ", 
         "pos", ",", " ", "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"newNode", "[", 
        RowBox[{"d", ",", " ", "l"}], "]"}], ",", " ", "l"}], "]"}]}], "\n", 
    "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"TreeReplace", "[", "\n", "  ", 
   RowBox[{
    RowBox[{"n", ":", 
     RowBox[{"_Tree", "|", "_TreeNode"}]}], ",", " ", "\n", "  ", 
    RowBox[{"pos", ":", 
     RowBox[{
      RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
     "None"}], ",", "\n", "  ", 
    RowBox[{"where", ":", "_Integer", ":", 
     RowBox[{"-", "1"}]}], ",", "\n", "  ", "data_"}], "\n", "  ", "]"}], ":=",
   "\n", "  ", 
  RowBox[{"TreeReplace", "[", 
   RowBox[{"n", ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "data", "}"}], ",", " ", 
      RowBox[{"{", "}"}]}], "}"}], ",", " ", "pos", ",", " ", "where"}], 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"c46d873a-226c-4548-8eb9-d60e78f4f21f"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]InsertData\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"4cb58b9b-318c-4815-8c9c-6c5ef0528ad9"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]treeInsertData\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"e3c8fe99-74c7-4a7a-85ac-1e883a273b2a"],

Cell[BoxData[{
 RowBox[{"treeInsertData", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"treeInsertData", "[", "\n", "  ", 
    RowBox[{
    "head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", "list_", ",", " ", 
     "\n", "  ", "data_", ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}]}], 
     ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer"}]}], "\n", "  ", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c", ",", " ", "$failed", ",", " ", "\n", "    ", 
       RowBox[{"ps", "=", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"treePosSpec", "[", "pos", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "where"}], "}"}]}], "]"}]}]}], "\n", "    ",
       "}"}], ",", "\n", "    ", 
     RowBox[{
      RowBox[{"c", "=", "\n", "      ", 
       RowBox[{"Quiet", "[", "\n", "        ", 
        RowBox[{
         RowBox[{"Check", "[", "\n", "  ", "        ", 
          RowBox[{
           RowBox[{"Insert", "[", 
            RowBox[{"list", ",", " ", "data", ",", " ", "ps"}], "]"}], ",", 
           "\n", "  ", "        ", "$failed", ",", "\n", "  ", "        ", 
           RowBox[{"Insert", "::", "ins"}]}], "\n", "  ", "        ", "]"}], 
         ",", "\n", "  ", "      ", 
         RowBox[{"Insert", "::", "ins"}]}], "\n", "        ", "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"c", "===", "$failed"}], ",", "\n", "      ", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"head", "::", "nonode"}], ",", " ", "pos"}], "]"}], ";", 
         "\n", "      ", 
         RowBox[{"Failure", "[", 
          RowBox[{"\"\<NoNode\>\"", ",", " ", 
           RowBox[{"<|", "\n", "        ", 
            RowBox[{
             RowBox[{"\"\<MessageTemplate\>\"", ":>", 
              RowBox[{"head", "::", "nonode"}]}], ",", "\n", "        ", 
             RowBox[{"\"\<MessageParameters\>\"", "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"pos", ",", " ", "obj"}], "}"}]}]}], "\n", "        ", 
            "|>"}]}], "\n", "        ", "]"}]}], ",", "\n", "      ", "c"}], 
       "\n", "      ", "]"}]}]}], "\n", "    ", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"524b96dd-79d1-457f-8d5f-c5ec740bad2d"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreeInsertData\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"d60b5f86-fd36-49d3-b170-7b8cd1c4067d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"TreeInsertData", "//", "Clear"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeInsertData", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"Tree", "[", "t_", "]"}]}], ",", " ", "\n", "  ", "data_", ",", 
     " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}], ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer", ":", 
      RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeInsertData", "[", 
        RowBox[{
        "Tree", ",", " ", "n", ",", " ", "t", ",", " ", "data", ",", " ", 
         "pos", ",", " ", "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"newTree", "[", "l", "]"}], ",", " ", "l"}], "]"}]}], "\n", 
    "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeInsertData", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"TreeNode", "[", 
       RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", "  ", "data_",
      ",", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}], ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer", ":", 
      RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeInsertData", "[", 
        RowBox[{"TreeNode", ",", " ", "n", ",", " ", 
         RowBox[{"{", 
          RowBox[{"d", ",", " ", "t"}], "}"}], ",", " ", "data", ",", " ", 
         "pos", ",", " ", "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"newNode", "[", 
        RowBox[{"d", ",", " ", "l"}], "]"}], ",", " ", "l"}], "]"}]}], "\n", 
    "    ", "]"}]}], 
  ";"}]}], \
"CodeInput",ExpressionUUID->"2178c7c9-b1c5-4ed5-a399-9cb509014645"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]ReplaceData\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"59a2d334-0036-405d-bb3b-764ff1426bec"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]treeReplaceData\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"3b77319b-0f88-484c-8982-fad53ba9f453"],

Cell[BoxData[{
 RowBox[{"treeReplaceData", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"treeReplaceData", "[", "\n", "  ", 
    RowBox[{
    "head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", "list_", ",", " ", 
     "\n", "  ", "data_", ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}]}], 
     ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer"}]}], "\n", "  ", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"c", ",", " ", "$failed", ",", " ", "\n", "    ", 
       RowBox[{"ps", "=", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"treePosSpec", "[", "pos", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "where"}], "}"}]}], "]"}]}]}], "\n", "    ",
       "}"}], ",", "\n", "    ", 
     RowBox[{
      RowBox[{"c", "=", "\n", "      ", 
       RowBox[{"Quiet", "[", "\n", "        ", 
        RowBox[{
         RowBox[{"Check", "[", "\n", "          ", 
          RowBox[{
           RowBox[{"ReplacePart", "[", 
            RowBox[{"list", ",", " ", 
             RowBox[{"ps", "->", "data"}]}], "]"}], ",", "\n", "          ", 
           "$failed", ",", "\n", "  ", "        ", 
           RowBox[{"Insert", "::", "ins"}]}], "\n", "  ", "        ", "]"}], 
         ",", "\n", "  ", "      ", 
         RowBox[{"Insert", "::", "ins"}]}], "\n", "        ", "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"c", "===", "$failed"}], ",", "\n", "      ", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"head", "::", "nonode"}], ",", " ", "pos"}], "]"}], ";", 
         "\n", "      ", 
         RowBox[{"Failure", "[", 
          RowBox[{"\"\<NoNode\>\"", ",", " ", 
           RowBox[{"<|", "\n", "        ", 
            RowBox[{
             RowBox[{"\"\<MessageTemplate\>\"", ":>", 
              RowBox[{"head", "::", "nonode"}]}], ",", "\n", "        ", 
             RowBox[{"\"\<MessageParameters\>\"", "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"pos", ",", " ", "obj"}], "}"}]}]}], "\n", "        ", 
            "|>"}]}], "\n", "        ", "]"}]}], ",", "\n", "      ", "c"}], 
       "\n", "      ", "]"}]}]}], "\n", "    ", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"d00bcdd0-1a8b-4c4e-87e5-6af3da2fa484"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreeReplaceData\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"556841ea-b32f-4c0a-8e9a-41e4d48b2414"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"TreeReplaceData", "//", "Clear"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeReplaceData", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"Tree", "[", "t_", "]"}]}], ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}], ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer", ":", 
      RowBox[{"-", "1"}]}], ",", "\n", "  ", "data_", ","}], " ", "\n", "  ", 
    "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeReplaceData", "[", 
        RowBox[{
        "Tree", ",", " ", "n", ",", " ", "t", ",", " ", "data", ",", " ", 
         "pos", ",", " ", "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"newTree", "[", "l", "]"}], ",", " ", "l"}], "]"}]}], "\n", 
    "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeReplaceData", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"TreeNode", "[", 
       RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}], ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer", ":", 
      RowBox[{"-", "1"}]}], ",", "\n", "  ", "data_"}], "\n", "  ", "]"}], ":=",
    "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treeReplaceData", "[", 
        RowBox[{"TreeNode", ",", " ", "n", ",", " ", 
         RowBox[{"{", 
          RowBox[{"d", ",", " ", "t"}], "}"}], ",", " ", "data", ",", " ", 
         "pos", ",", " ", "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"newNode", "[", 
        RowBox[{"d", ",", " ", "l"}], "]"}], ",", " ", "l"}], "]"}]}], "\n", 
    "    ", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"9cd13984-5dab-4d5a-9461-1fef903610c1"]\

}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Pop\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"1f8f5c38-20c1-4116-906a-c110aa3aa290"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]treePop\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"62e1e558-37c8-4694-83c9-7bbe11308be4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"treePop", "[", "\n", "  ", 
    RowBox[{
    "head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", "list_", ",", " ", 
     "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}]}], 
     ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer"}]}], "\n", "  ", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"Module", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"{", "\n", "      ", 
      RowBox[{
       RowBox[{"ps", "=", "\n", "        ", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"treePosSpec", "[", "pos", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"2", ",", " ", "where"}], "}"}]}], "]"}]}], ",", "\n", 
       "      ", "$failed", ",", "\n", "      ", "c"}], "\n", "      ", "}"}],
      ",", "\n", "    ", 
     RowBox[{
      RowBox[{"c", "=", "\n", "      ", 
       RowBox[{"Quiet", "[", "\n", "        ", 
        RowBox[{
         RowBox[{"Check", "[", 
          RowBox[{
           RowBox[{"list", "[", 
            RowBox[{"[", 
             RowBox[{"Sequence", "@@", "ps"}], "]"}], "]"}], ",", " ", "\n", 
           "  ", "        ", "$failed", ",", "\n", "  ", "        ", 
           RowBox[{"Part", "::", "partw"}]}], "]"}], ",", " ", "\n", "  ", 
         "      ", 
         RowBox[{"Part", "::", "partw"}]}], "\n", "        ", "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"c", "=!=", "$failed"}], ",", "\n", "      ", 
        RowBox[{"{", 
         RowBox[{"c", ",", " ", 
          RowBox[{"Delete", "[", 
           RowBox[{"list", ",", " ", "ps"}], "]"}]}], "}"}], ",", "\n", 
        "      ", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"head", "::", "nochild"}], ",", " ", "pos", ",", " ", 
           "where"}], "]"}], ";", "\n", "      ", 
         RowBox[{"Failure", "[", 
          RowBox[{"\"\<BadPart\>\"", ",", " ", 
           RowBox[{"<|", "\n", "        ", 
            RowBox[{
             RowBox[{"\"\<MessageTemplate\>\"", ":>", 
              RowBox[{"head", "::", "partw"}]}], ",", "\n", "        ", 
             RowBox[{"\"\<MessageParameters\>\"", "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"pos", ",", " ", "where", ",", " ", "obj"}], "}"}]}]}],
             "\n", "        ", "|>"}]}], "\n", "        ", "]"}]}]}], "\n", 
       "      ", "]"}]}]}], "\n", "    ", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"5052595c-fd44-4bd1-85aa-0d46342e79b3"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreePop\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"000c2a40-bd59-4d2f-b4cc-8f442468a3f0"],

Cell[BoxData[{
 RowBox[{"TreePop", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreePop", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"Tree", "[", "t_", "]"}]}], ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}], ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer", ":", 
      RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treePop", "[", 
        RowBox[{
        "Tree", ",", " ", "n", ",", " ", "t", ",", " ", "pos", ",", " ", 
         "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"newNode", "@@", 
          RowBox[{"l", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
         RowBox[{"newTree", "[", 
          RowBox[{"l", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}], ",", " ", "l"}], 
      "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"TreePop", "[", "\n", "  ", 
   RowBox[{
    RowBox[{"n", ":", 
     RowBox[{"TreeNode", "[", 
      RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", "  ", 
    RowBox[{"pos", ":", 
     RowBox[{
      RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
     "None"}], ",", "\n", "  ", 
    RowBox[{"where", ":", "_Integer", ":", 
     RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"l", "=", 
      RowBox[{"treePop", "[", 
       RowBox[{"TreeNode", ",", " ", "n", ",", " ", 
        RowBox[{"{", 
         RowBox[{"d", ",", " ", "t"}], "}"}], ",", " ", "pos", ",", " ", 
        "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"ListQ", "@", "l"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"newNode", "@@", 
         RowBox[{"l", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
        RowBox[{"newNode", "@@", 
         RowBox[{"l", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", " ", "l"}], "]"}]}],
    "\n", "    ", 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"a44d8f13-56ca-4e65-ba43-fac48770c425"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]PopData\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"c49c8eb0-3766-417f-94a2-84199c8fd188"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Tree", "::", "nodata"}], "=", 
   "\"\<Tree doesn't have data at node `` and position ``\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeNode", "::", "nodata"}], "=", 
   "\"\<TreeNode doesn't have data at node `` and position ``\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"4ec53187-1dbf-4b6e-aac9-3ac463ff2b06"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]treePopData\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"e4844d03-1664-43c6-820e-ede785159564"],

Cell[BoxData[{
 RowBox[{"treePopData", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"treePopData", "[", "\n", "  ", 
    RowBox[{
    "head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", "list_", ",", " ", 
     "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}]}], 
     ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer"}]}], "\n", "  ", "]"}], ":=", "\n", 
   "  ", 
   RowBox[{"Module", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"{", "\n", "      ", 
      RowBox[{
       RowBox[{"ps", "=", 
        RowBox[{"Join", "[", 
         RowBox[{
          RowBox[{"treePosSpec", "[", "pos", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "where"}], "}"}]}], "]"}]}], ",", "\n", 
       "      ", "$failed", ",", "\n", "      ", "c"}], "\n", "      ", "}"}],
      ",", "\n", "    ", 
     RowBox[{
      RowBox[{"c", "=", "\n", "      ", 
       RowBox[{"Quiet", "[", "\n", "        ", 
        RowBox[{
         RowBox[{"Check", "[", 
          RowBox[{
           RowBox[{"list", "[", 
            RowBox[{"[", 
             RowBox[{"Sequence", "@@", "ps"}], "]"}], "]"}], ",", " ", "\n", 
           "  ", "        ", "$failed", ",", "\n", "  ", "        ", 
           RowBox[{"Part", "::", "partw"}]}], "]"}], ",", " ", "\n", "  ", 
         "      ", 
         RowBox[{"Part", "::", "partw"}]}], "\n", "        ", "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"c", "=!=", "$failed"}], ",", "\n", "      ", 
        RowBox[{"{", 
         RowBox[{"c", ",", " ", 
          RowBox[{"Delete", "[", 
           RowBox[{"list", ",", " ", "ps"}], "]"}]}], "}"}], ",", "\n", 
        "      ", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{
           RowBox[{"head", "::", "nodata"}], ",", " ", "pos", ",", " ", 
           "where"}], "]"}], ";", "\n", "      ", 
         RowBox[{"Failure", "[", 
          RowBox[{"\"\<NoData\>\"", ",", " ", 
           RowBox[{"<|", "\n", "        ", 
            RowBox[{
             RowBox[{"\"\<MessageTemplate\>\"", ":>", 
              RowBox[{"head", "::", "nodata"}]}], ",", "\n", "        ", 
             RowBox[{"\"\<MessageParameters\>\"", "\[RuleDelayed]", 
              RowBox[{"{", 
               RowBox[{"pos", ",", " ", "where", ",", " ", "obj"}], "}"}]}]}],
             "\n", "        ", "|>"}]}], "\n", "        ", "]"}]}]}], "\n", 
       "      ", "]"}]}]}], "\n", "    ", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"bd83186a-444b-4449-a18e-039e9105a7ee"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreePopData\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"5edb99b0-1137-4d5a-82b1-ad81709a17de"],

Cell[BoxData[{
 RowBox[{"TreePopData", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreePopData", "[", "\n", "  ", 
    RowBox[{
     RowBox[{"n", ":", 
      RowBox[{"Tree", "[", "t_", "]"}]}], ",", " ", "\n", "  ", 
     RowBox[{"pos", ":", 
      RowBox[{
       RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
      "None"}], ",", "\n", "  ", 
     RowBox[{"where", ":", "_Integer", ":", 
      RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", "=", 
       RowBox[{"treePopData", "[", 
        RowBox[{
        "Tree", ",", " ", "n", ",", " ", "t", ",", " ", "pos", ",", " ", 
         "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "l"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"l", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
         RowBox[{"newTree", "[", 
          RowBox[{"l", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}], ",", " ", "l"}], 
      "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"TreePopData", "[", "\n", "  ", 
   RowBox[{
    RowBox[{"n", ":", 
     RowBox[{"TreeNode", "[", 
      RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", "  ", 
    RowBox[{"pos", ":", 
     RowBox[{
      RowBox[{"{", "___Integer", "}"}], "|", "_Integer", "|", "None"}], ":", 
     "None"}], ",", "\n", "  ", 
    RowBox[{"where", ":", "_Integer", ":", 
     RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"l", "=", 
      RowBox[{"treePopData", "[", 
       RowBox[{"TreeNode", ",", " ", "n", ",", " ", 
        RowBox[{"{", 
         RowBox[{"d", ",", " ", "t"}], "}"}], ",", " ", "pos", ",", " ", 
        "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"ListQ", "@", "l"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"l", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
        RowBox[{"newNode", "@@", 
         RowBox[{"l", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", " ", "l"}], "]"}]}],
    "\n", "    ", 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"89beefdd-5bed-496a-ba09-cf56e48686a9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreeWalk\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"609b6e27-b3e0-4451-8980-00ee9d800010"],

Cell["\<\
\[LeftCeiling]

We\[CloseCurlyQuote]ll provide like three events?
\t- \[OpenCurlyDoubleQuote]EnterNode\[CloseCurlyDoubleQuote]
\t- \[OpenCurlyDoubleQuote]ProcessNode\[CloseCurlyDoubleQuote]
\t- \[OpenCurlyDoubleQuote]ExitNode\[CloseCurlyDoubleQuote]
\t
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"f7082611-2558-47ec-aac9-c2e81fdd8fee"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]walkTreeDF\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"b3e8be17-9488-48fb-9186-929e77df1205"],

Cell["\<\
\[LeftCeiling]
\tSimple depth-first traversal of a node
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"210e7014-8bf3-4c4e-ab44-2d34efc1db94"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"walkTreeDF", "[", 
    RowBox[{"node_", ",", " ", 
     RowBox[{"handlers", ":", 
      RowBox[{"{", 
       RowBox[{"body_", ",", " ", "enter_", ",", " ", "exit_"}], "}"}]}]}], 
    "]"}], ":=", "  ", "\n", "  ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"children", " ", "=", " ", 
        RowBox[{"node", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", "res"}], "}"}], ",", 
     "\n", "    ", 
     RowBox[{
      RowBox[{"node", " ", "=", " ", 
       RowBox[{"enter", "[", "node", "]"}]}], ";", "\n", "    ", 
      RowBox[{"res", "=", "\n", "      ", 
       RowBox[{"body", "[", "\n", "        ", 
        RowBox[{
         RowBox[{"{", "\n", "          ", 
          RowBox[{
           RowBox[{"node", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "\n", "  ", "        ", 
           RowBox[{
            RowBox[{
             RowBox[{"walkASTNodeDF", "[", 
              RowBox[{"#", ",", " ", "handlers"}], "]"}], "&"}], "/@", 
            "children"}]}], "\n", "          ", "}"}], ",", "\n", "        ", 
         "node"}], "\n", "        ", "]"}]}], ";", "\n", "    ", 
      RowBox[{"exit", "[", 
       RowBox[{"res", ",", " ", "node"}], "]"}]}]}], "\n", "    ", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"5b71c66a-4cdb-4c8b-9cf7-3afd42afaa75"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]walkTreeBF\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"c7947c06-be9d-40b1-a168-8e3b22d6af6c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"walkTreeBF", "[", 
    RowBox[{"root_", ",", " ", 
     RowBox[{"handlers", ":", 
      RowBox[{"{", 
       RowBox[{"body_", ",", " ", "enter_", ",", " ", "exit_"}], "}"}]}]}], 
    "]"}], ":=", "  ", "\n", "    ", 
   RowBox[{"Module", "[", "\n", "      ", 
    RowBox[{
     RowBox[{"{", "\n", "        ", 
      RowBox[{
       RowBox[{"node", " ", "=", " ", "root"}], ",", "\n", "        ", 
       "children", ",", " ", "\n", "        ", "res", ",", "\n", "        ", 
       RowBox[{"q", " ", "=", " ", 
        RowBox[{"Queue", "[", "]"}]}]}], "\n", "        ", "}"}], ",", "\n", 
     "      ", 
     RowBox[{
      RowBox[{"Reap", "[", "\n", "        ", 
       RowBox[{
        RowBox[{"q", " ", "=", " ", 
         RowBox[{"QueuePush", "[", 
          RowBox[{"q", ",", " ", "node"}], "]"}]}], ";", "\n", "        ", 
        RowBox[{"While", "[", 
         RowBox[{
          RowBox[{"!", 
           RowBox[{"QueueEmptyQ", "[", "q", "]"}]}], ",", "\n", "          ", 
          
          RowBox[{
           RowBox[{"node", " ", "=", " ", 
            RowBox[{"QueuePop", "[", "q", "]"}]}], ";", "\n", "          ", 
           RowBox[{"node", " ", "=", " ", 
            RowBox[{"enter", "[", "node", "]"}]}], ";", "\n", "  ", "  ", 
           "      ", 
           RowBox[{"children", " ", "=", " ", 
            RowBox[{"root", "[", "\"\<Children\>\"", "]"}]}], ";", "\n", 
           "          ", 
           RowBox[{"q", " ", "=", " ", 
            RowBox[{"QueueExtend", "[", 
             RowBox[{"q", ",", " ", "children"}], "]"}]}], ";", "\n", 
           "          ", 
           RowBox[{"res", " ", "=", " ", 
            RowBox[{"body", "[", 
             RowBox[{"node", ",", " ", "node"}], "]"}]}], ";", "\n", 
           "          ", 
           RowBox[{"exit", "[", 
            RowBox[{"res", ",", " ", "node"}], "]"}], ";"}]}], "\n", 
         "          ", "]"}], ";", "\n", "        ", "\"\<WalkTree\>\""}], 
       "\n", "        ", "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], "\n", "    ", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"13380059-7400-49d7-affc-548c51ddf96c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreeWalk\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"9b8bf5db-204f-47e1-8291-87a033e0ee6f"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]$TreeTraversalFunctions\[RightFloor]", \
"CodeSubsubsubsubsection",
 Evaluatable->True,ExpressionUUID->"b397feb5-0f01-44e3-9d0f-e5b97d986383"],

Cell[BoxData[
 RowBox[{
  RowBox[{"$TreeTraversalFunctions", "=", "\n", "  ", 
   RowBox[{"<|", "\n", "    ", 
    RowBox[{
     RowBox[{"\"\<DepthFirst\>\"", "\[Rule]", 
      RowBox[{"<|", "\n", "      ", 
       RowBox[{
        RowBox[{
         RowBox[{"\"\<EnterNode\>\"", "->", "#"}], "&"}], ",", "\n", "      ", 
        RowBox[{
         RowBox[{"\"\<ExitNode\>\"", "->", "#"}], "&"}], ",", "\n", "      ", 
        
        RowBox[{
         RowBox[{"\"\<ProcessNode\>\"", "->", "#"}], "&"}]}], "\n", "      ", 
       "|>"}]}], ",", "\n", "    ", 
     RowBox[{"\"\<BreadthFirst\>\"", "\[Rule]", 
      RowBox[{"<|", "\n", "      ", 
       RowBox[{
        RowBox[{
         RowBox[{"\"\<EnterNode\>\"", "->", "#"}], "&"}], ",", "\n", "      ", 
        RowBox[{"\"\<ExitNode\>\"", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Sow", "[", 
            RowBox[{"#", ",", " ", "\"\<WalkTree\>\""}], "]"}], "&"}], 
          ")"}]}], ",", "\n", "      ", 
        RowBox[{
         RowBox[{"\"\<ProcessNode\>\"", "->", "#"}], "&"}]}], "\n", "      ", 
       "|>"}]}]}], "\n", "    ", "|>"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"e92efcbb-0d42-4e0f-9d20-c1c267bf9d40"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]iTreeWalk\[RightFloor]", "CodeSubsubsubsubsection",
 Evaluatable->True,ExpressionUUID->"f617a62d-b83a-4aec-97a7-1facdc00e288"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "iTreeWalk", "]"}], "=", "\n", "  ", 
   RowBox[{"{", "\n", "    ", 
    RowBox[{"\"\<TraversalFunction\>\"", "\[Rule]", "\"\<DepthFirst\>\""}], 
    "\n", "    ", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"iTreeWalk", "[", 
    RowBox[{"node_", ",", " ", "visitFunctions_", ",", "\n", "  ", 
     RowBox[{"ops", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "  ", "]"}], ":=", "\n",
    "  ", 
   RowBox[{"Module", "[", "\n", "    ", 
    RowBox[{
     RowBox[{"{", "\n", "      ", 
      RowBox[{
      "mode", ",", " ", "enter", ",", " ", "exit", ",", " ", "body", ",", 
       "\n", "      ", "funcs"}], "\n", "      ", "}"}], ",", "\n", "    ", 
     RowBox[{
      RowBox[{"mode", "=", "\n", "      ", 
       RowBox[{"Replace", "[", "\n", "        ", 
        RowBox[{
         RowBox[{"OptionValue", "[", 
          RowBox[{"iTreeWalk", ",", " ", "\n", "          ", 
           RowBox[{"FilterRules", "[", 
            RowBox[{
             RowBox[{"{", "ops", "}"}], ",", " ", 
             "\"\<TraversalFunction\>\""}], "]"}], ",", " ", "\n", "  ", 
           "        ", "\"\<TraversalFunction\>\""}], "\n", "  ", "        ", 
          "]"}], ",", "\n", "  ", "      ", 
         RowBox[{"{", "\n", "  ", "        ", 
          RowBox[{
           RowBox[{"\"\<BreadthFirst\>\"", "->", "walkTreeBF"}], ",", "\n", 
           "          ", 
           RowBox[{"\"\<DepthFirst\>\"", "->", "walkTreeDF"}]}], "\n", 
          "          ", "}"}]}], "\n", "        ", "]"}]}], ";", "\n", "    ", 
      RowBox[{"funcs", " ", "=", " ", "\n", "      ", 
       RowBox[{"Lookup", "[", 
        RowBox[{"$TreeTraversalFunctions", ",", " ", "mode", ",", " ", 
         RowBox[{
         "$TreeTraversalFunctions", "[", "\"\<DepthFirst\>\"", "]"}]}], 
        "]"}]}], ";", "\n", "    ", 
      RowBox[{"enter", "=", 
       RowBox[{"Lookup", "[", 
        RowBox[{"visitFunctions", ",", " ", "\"\<EnterNode\>\"", ",", "   ", 
         RowBox[{"funcs", "[", "\"\<EnterNode\>\"", "]"}]}], "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"exit", " ", "=", 
       RowBox[{"Lookup", "[", 
        RowBox[{"visitFunctions", ",", " ", "\"\<ExitNode\>\"", ",", "    ", 
         RowBox[{"funcs", "[", "\"\<ExitNode\>\"", "]"}]}], "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"body", " ", "=", 
       RowBox[{"Lookup", "[", 
        RowBox[{"visitFunctions", ",", " ", "\"\<ProcessNode\>\"", ",", " ", 
         RowBox[{"funcs", "[", "\"\<ProcessNode\>\"", "]"}]}], "]"}]}], ";", 
      "\n", "    ", 
      RowBox[{"mode", "[", 
       RowBox[{"node", ",", " ", 
        RowBox[{"{", 
         RowBox[{"body", ",", " ", "enter", ",", " ", "exit"}], "}"}]}], 
       "]"}]}]}], "\n", "    ", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"548a6e78-0900-410f-bd06-7dc88a415a03"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]TreeWalk\[RightFloor]", "CodeSubsubsubsubsection",
 Evaluatable->True,ExpressionUUID->"3a7c9a9a-cd14-490b-bde7-ea34587fc9ad"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "TreeWalk", "]"}], "=", "\n", "  ", 
   RowBox[{"Options", "[", "iTreeWalk", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeWalk", "[", 
    RowBox[{
     RowBox[{"Tree", "[", "t_", "]"}], ",", " ", "visitFunctions_", ",", " ", 
     
     RowBox[{"ops", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", "\n", "  ", 
   RowBox[{"iTreeWalk", "[", 
    RowBox[{"t", ",", " ", "visitFunctions", ",", " ", "ops"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"TreeWalk", "[", 
    RowBox[{
     RowBox[{"TreeNode", "[", 
      RowBox[{"d_", ",", " ", "t_"}], "]"}], ",", " ", "visitFunctions_", ",",
      " ", 
     RowBox[{"ops", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", "\n", "  ", 
   RowBox[{"iTreeWalk", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", ",", " ", "t"}], "}"}], ",", " ", "visitFunctions", ",", 
     " ", "ops"}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"d88c3755-4d93-404f-8740-2f0bcfd3a7ac"]\

}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Formatting\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"9dcb02e8-40a7-44f3-b3d8-1dd05eba5d42"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Tree\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"0dad717a-f4d6-4c13-98b1-1691acdb0f03"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Format", "[", 
    RowBox[{
     RowBox[{"q_Tree", "?", "TreeQ"}], ",", " ", "StandardForm"}], "]"}], ":=",
    "\n", "  ", 
   RowBox[{"RawBoxes", "@", "\n", "    ", 
    RowBox[{"BoxForm`ArrangeSummaryBox", "[", "\n", "      ", 
     RowBox[{
     "Tree", ",", "\n", "      ", "q", ",", "\n", "      ", "None", ",", "\n",
       "      ", 
      RowBox[{"{", "\n", "        ", 
       RowBox[{
        RowBox[{"BoxForm`MakeSummaryItem", "[", "\n", "          ", 
         RowBox[{
          RowBox[{"{", "\n", "            ", 
           RowBox[{"\"\<Root:\>\"", ",", " ", "\n", "              ", 
            RowBox[{"Quiet", "@", 
             RowBox[{"Check", "[", 
              RowBox[{
               RowBox[{"Replace", "[", 
                RowBox[{
                 RowBox[{"TreePopData", "[", "q", "]"}], ",", " ", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"a_", ",", " ", "_"}], "}"}], "\[RuleDelayed]", 
                  "a"}]}], "]"}], ",", " ", "None", ",", " ", 
               RowBox[{"Tree", "::", "nodata"}]}], "]"}]}]}], "\n", 
           "            ", "}"}], ",", " ", "\n", "          ", 
          "StandardForm"}], "\n", "          ", "]"}], ",", "\n", "        ", 
        
        RowBox[{"BoxForm`MakeSummaryItem", "[", "\n", "          ", 
         RowBox[{
          RowBox[{"{", "\n", "            ", 
           RowBox[{"\"\<Children:\>\"", ",", " ", "\n", "              ", 
            RowBox[{"Quiet", "@", 
             RowBox[{"Check", "[", 
              RowBox[{
               RowBox[{"TreeChildCount", "[", "q", "]"}], ",", " ", "0", ",", 
               " ", 
               RowBox[{"Tree", "::", "nochild"}]}], "]"}]}]}], "\n", 
           "            ", "}"}], ",", " ", "\n", "          ", 
          "StandardForm"}], "\n", "          ", "]"}]}], "\n", "        ", 
       "}"}], ",", "\n", "      ", 
      RowBox[{"{", "}"}], ",", "\n", "      ", "StandardForm"}], "\n", 
     "      ", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Format", "[", 
   RowBox[{
    RowBox[{"q_Tree", "?", "Tree"}], ",", " ", "TextForm"}], "]"}], ":=", 
  "\n", "  ", 
  "\"\<Tree[<>]\>\""}]}], \
"CodeInput",ExpressionUUID->"83b508ce-7989-41d1-805e-d614d2c44c0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Node\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"b17feb1c-2655-4e68-a0ca-1e550e374be5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Format", "[", 
    RowBox[{
     RowBox[{"q_TreeNode", "?", "TreeNodeQ"}], ",", " ", "StandardForm"}], 
    "]"}], ":=", "\n", "  ", 
   RowBox[{"RawBoxes", "@", "\n", "    ", 
    RowBox[{"BoxForm`ArrangeSummaryBox", "[", "\n", "      ", 
     RowBox[{
     "TreeNode", ",", "\n", "      ", "q", ",", "\n", "      ", "None", ",", 
      "\n", "      ", 
      RowBox[{"{", "\n", "        ", 
       RowBox[{
        RowBox[{"BoxForm`MakeSummaryItem", "[", "\n", "          ", 
         RowBox[{
          RowBox[{"{", "\n", "            ", 
           RowBox[{"\"\<Root:\>\"", ",", " ", "\n", "              ", 
            RowBox[{"Quiet", "@", 
             RowBox[{"Check", "[", 
              RowBox[{
               RowBox[{"Replace", "[", 
                RowBox[{
                 RowBox[{"TreePopData", "[", "q", "]"}], ",", " ", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"a_", ",", " ", "_"}], "}"}], "\[RuleDelayed]", 
                  "a"}]}], "]"}], ",", " ", "None", ",", " ", 
               RowBox[{"TreeNode", "::", "nodata"}]}], "]"}]}]}], "\n", 
           "            ", "}"}], ",", " ", "\n", "          ", 
          "StandardForm"}], "\n", "          ", "]"}], ",", "\n", "        ", 
        
        RowBox[{"BoxForm`MakeSummaryItem", "[", "\n", "          ", 
         RowBox[{
          RowBox[{"{", "\n", "            ", 
           RowBox[{"\"\<Children:\>\"", ",", " ", "\n", "              ", 
            RowBox[{"Quiet", "@", 
             RowBox[{"Check", "[", 
              RowBox[{
               RowBox[{"TreeChildCount", "[", "q", "]"}], ",", " ", "0", ",", 
               " ", 
               RowBox[{"TreeNode", "::", "nochild"}]}], "]"}]}]}], "\n", 
           "            ", "}"}], ",", " ", "\n", "          ", 
          "StandardForm"}], "\n", "          ", "]"}]}], "\n", "        ", 
       "}"}], ",", "\n", "      ", 
      RowBox[{"{", "}"}], ",", "\n", "      ", "StandardForm"}], "\n", 
     "      ", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Format", "[", 
   RowBox[{
    RowBox[{"q_TreeNode", "?", "TreeNodeQ"}], ",", " ", "TextForm"}], "]"}], ":=",
   "\n", "  ", 
  "\"\<TreeNode[<>]\>\""}]}], \
"CodeInput",ExpressionUUID->"9d6af319-602d-4ea8-bd57-2bc1dfda0424"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"End", "[", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"b8f41c60-c336-483a-a310-\
48a50b065741"]
}, Open  ]],

Cell["", "SectionSeparator",ExpressionUUID->"a4319844-7981-47f3-9ed7-\
5662524f3296"]
},
NotebookEventActions->{{"MenuCommand", "Save"} :> 
  EasyIDE`Notebooks`Manipulation`IDESave[
    EvaluationNotebook[]], 
  "MouseDown" :> (Needs["EasyIDE`"]; 
   EasyIDE`Notebooks`Manipulation`EnsureNotebookUpdated[
     EvaluationNotebook[]]), PassEventsDown -> True, EvaluationOrder -> After},
WindowSize->{808, 755},
WindowMargins->{{110, Automatic}, {Automatic, 0}},
WindowTitle->"EasyIDE: Applications",
TaggingRules->{
 "IndentCharacter" -> "  ", 
  "EasyIDE" -> {
   "Tabs" -> {
     "Queue" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/DataStructures/Packages/Queue.nb", "Modified" -> 
        False}, "Stack" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/DataStructures/Packages/Stack.nb", "Modified" -> 
        False}, "Tree" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/DataStructures/Packages/Tree.nb", "Modified" -> 
        False}, ".gitignore" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/DataStructures/.gitignore", "Modified" -> False}, 
      "scratch" -> {
       "File" -> 
        "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/DataStructures/.scratch/scratch.nb", "Modified" -> 
        False}}, "FileViewer" -> {"Visible" -> False}, 
    "Toolbars" -> {"Column" -> GridBox[{{
          GridBox[{{
             PaneBox["", ImageSize -> {0, 15}], 
             ButtonBox[
             "", BaseStyle -> "ToolbarShowButton", ButtonData -> 
              "CodePackage"]}}, BaseStyle -> "ToolbarCell"]}}, BaseStyle -> 
        "Toolbars"], "Tags" -> {}, 
      "Cells" -> {"Markdown" -> None, "CodePackage" -> None}}, 
    "Project" -> {
     "Directory" -> 
      "/Users/Mark/Documents/Wolfram \
Mathematica/Applications/DataStructures/"}, "ActiveTab" -> "Tree", 
    "MainStyleName" -> "DarkGUI", "StyleSheet" -> 
    FrontEnd`FileName[{"EasyIDE", "Extensions", "DarkGUI"}, "CodePackage.nb"],
     "FileToolbar" -> "CodePackage", 
    "Options" -> {
     WindowSize -> {808, 755}, 
      WindowMargins -> {{316, Automatic}, {Automatic, 50}}, 
      TaggingRules -> {
       "UUIDButtons" -> {
         "Active" -> {
           "Button-89ffd2c3-ec41-4179-a9b1-8e28670bca2c" -> False, 
            "Button-ca46e5e0-4fd1-47e8-8cf6-72998922b757" -> False, 
            "Button-a6d68254-3684-4d32-83fc-e5ef6f443930" -> False}}}, 
      FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
      StyleDefinitions -> 
      FrontEnd`FileName[{"BTools"}, "CodePackage.nb", CharacterEncoding -> 
        "UTF-8"]}, "AutoGeneratePackage" -> True, "SavingAction" -> None}},
DynamicUpdating->Automatic,
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"EasyIDE", "Extensions", "DarkGUI"}, 
       "CodePackage.nb"]]]}, Visible -> False, 
  TaggingRules -> {"EasyIDE" -> {"FileViewer" -> {"Visible" -> False}}}, 
  FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
