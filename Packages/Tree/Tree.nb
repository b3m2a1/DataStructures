Notebook[{Cell[CellGroupData[{Cell["Tree", "CodeSection"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Tree", "::", "usage"}], "=", 
            "\"A Tree data structure\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreeQ", "::", "usage"}], "=", 
            "\"Tests whether is actual Tree\""}], ";"}]}], "CodeInput"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"TreeNode", "::", "usage"}], "=", 
            "\"A TreeNode object which exists as a symbolic wrapper on node \
data\""}], ";"}], "\n", RowBox[{RowBox[{RowBox[{"TreeNodeQ", "::", "usage"}], 
            "=", "\"Tests whether is actual TreeNode\""}], ";"}]}], 
      "CodeInput"], Cell[BoxData[RowBox[
        {RowBox[{RowBox[{"TreeCore", "::", "usage"}], "=", 
           "\"Extracts the core Tree backend\""}], ";"}]], "CodeInput"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"TreeData", "::", "usage"}], "=", 
            "\"Extracts data from a node\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreeChildren", "::", "usage"}], "=", 
            "\"Pulls children out of a node\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreeChildCount", "::", "usage"}], "=", 
            "\"Counts the number of leaves in the tree\""}], ";"}]}], 
      "CodeInput"], Cell[BoxData[
       {RowBox[{RowBox[{RowBox[{"TreeInsert", "::", "usage"}], "=", 
            "\"Inserts a node into a tree\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreePop", "::", "usage"}], "=", 
            "\"Pops a node (and children) from a tree\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreeReplace", "::", "usage"}], "=", 
            "\"Replaces a node in a tree\""}], ";"}]}], "CodeInput"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"TreeInsertData", "::", "usage"}], 
            "=", "\"Inserts into the data field of each node\""}], ";"}], 
        "\n", RowBox[{RowBox[{RowBox[{"TreePopData", "::", "usage"}], "=", 
            "\"Deletes from the data field of each node\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreeReplaceData", "::", "usage"}], "=", 
            "\"Replaces data in a tree\""}], ";"}]}], "CodeInput"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"TreeInsertSequence", "::", 
              "usage"}], "=", 
            "\"Inserts a sequence of nodes into a Tree\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreeReplaceSequence", "::", "usage"}], "=", 
            "\"Replaces a sequence of nodes in a Tree\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreePopSequence", "::", "usage"}], "=", 
            "\"Pops a sequence of nodes in a Tree\""}], ";"}]}], 
      "CodeInput"], Cell[BoxData[RowBox[
        {RowBox[{RowBox[{"TreeWalk", "::", "usage"}], "=", 
           "\"Walks a tree\""}], ";"}]], "CodeInput"], 
     Cell[CellGroupData[
       {Cell[BoxData[RowBox[{RowBox[{"Begin", "[", "\"`Private`\"", "]"}], 
            ";"}]], "InputSection"], Cell["\[LeftCeiling]\n\tWe\
\[CloseCurlyQuote]ll use a linked-list implementation to get efficient \
sub-tree-ing\n\tThis will feel rather like our Stack implementation, \
honestly... but rather than introducing pushes and pops \
we\[CloseCurlyQuote]ll introduce tree insertion, deletion, rearrangement, and \
walking\n\t\n\tIt might be the case that this would be better done via a \
basic linked-Association type format where each node gets a nested list index \
as its key. Insertions at the bottom of the tree would then be fast, but \
rearrangement of nodes would be very slow...\n\t\n\tProbably we need many \
types of trees for \n\[RightFloor]", "Text", Evaluatable -> True]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Tree\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Constructor\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\tI should probably move all my TreeNode stuff to holding just a single \
list... just haven\[CloseCurlyQuote]t gotten around it it yet. Does it make \
sense to even have a TreeNode structure? Or should everything just be a Tree \
because it really all is just a Tree?\n\[RightFloor]", "Text", 
            Evaluatable -> True], Cell[CellGroupData[
             {Cell["\[LeftCeiling]prepTreeData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"prepTreeData", "[", RowBox[
                        {"{", RowBox[{"body_", ",", " ", "kids_"}], "}"}], 
                       "]"}], ":=", "\n", "  ", RowBox[{"Catch", "[", "\n", 
                       "    ", RowBox[{RowBox[{"{", "\n", "      ", RowBox[
                          {RowBox[{"Flatten", "[", RowBox[{RowBox[{"{", 
                          "body", "}"}], ",", " ", "1"}], "]"}], ",", "\n", 
                          "  ", "    ", RowBox[{"Replace", "[", RowBox[
                          {RowBox[{"Flatten", "[", RowBox[{RowBox[{"{", 
                          "kids", "}"}], ",", " ", "1"}], "]"}], ",", "\n", 
                          "  ", "      ", RowBox[{"{", "\n", "  ", 
                          "        ", RowBox[{RowBox[{RowBox[{RowBox[{"Tree", 
                          "[", "t_", "]"}], "?", "TreeQ"}], "\[RuleDelayed]", 
                          "t"}], ",", "\n", "  ", "        ", RowBox[{RowBox[
                          {RowBox[{"TreeNode", "[", RowBox[{"d_", ",", " ", 
                          "c_"}], "]"}], "?", "TreeNodeQ"}], 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{"d", ",", 
                          " ", "c"}], "}"}]}], ",", "\n", "  ", "        ", 
                          RowBox[{RowBox[{"{", RowBox[{"a_", ",", " ", 
                          "b_"}], "}"}], "\[RuleDelayed]", RowBox[{"{", 
                          RowBox[{"a", ",", " ", RowBox[{"prepTreeData", 
                          "/@", "b"}]}], "}"}]}]}], "\n", "          ", 
                          "}"}], ",", "\n", "        ", "1"}], "\n", 
                          "        ", "]"}]}], "\n", "      ", "}"}], ",", 
                         "\n", "    ", "\"BadData\"", ",", "\n", "    ", 
                         RowBox[{"$Failed", "&"}]}], "\n", "    ", "]"}]}], 
                   ";"}], "\n", RowBox[{RowBox[{"prepTreeData", "[", "e_", 
                     "]"}], ":=", "$Failed"}]}], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]Tree\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{"Tree", "//", "ClearAll"}], ";"}], 
                 "\[IndentingNewLine]", RowBox[{RowBox[{RowBox[{"Tree", "[", 
                       "]"}], ":=", RowBox[{"Tree", "[", RowBox[{"{", 
                         RowBox[{RowBox[{"{", "}"}], ",", " ", RowBox[{"{", 
                          "}"}]}], "}"}], "]"}]}], ";"}]}], "CodeInput"], 
              Cell[BoxData[RowBox[{RowBox[{"validateTreeData", "[", "l_List", 
                    "]"}], ":=", "\n", "  ", RowBox[{RowBox[{RowBox[
                       {"Length", "[", "l", "]"}], "\[Equal]", "2"}], "&&", 
                    "\n", "    ", RowBox[{"AllTrue", "[", RowBox[
                       {"validateTreeData", ",", " ", RowBox[{"l", "[", 
                          RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}]}]], 
               "CodeInput"], Cell[BoxData[{RowBox[{RowBox[{"unconstructedQ", 
                     "=", "\n", "  ", RowBox[{"Function", "[", RowBox[
                        {"Null", ",", " ", RowBox[{"System`Private`EntryQ", 
                          "[", RowBox[{"Unevaluated", "[", "#", "]"}], "]"}], 
                         ",", " ", "HoldFirst"}], "]"}]}], ";"}], 
                 "\[IndentingNewLine]", RowBox[{RowBox[{RowBox[{"q", ":", 
                       RowBox[{RowBox[{"Tree", "[", "l_List", "]"}], "?", 
                         "unconstructedQ"}]}], ":=", "\[IndentingNewLine]", 
                     RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"d", 
                          "=", RowBox[{"prepTreeData", "[", "l", "]"}]}], 
                          "}"}], ",", "\n", "  ", RowBox[{RowBox[
                          {"System`Private`SetNoEntry", "[", RowBox[
                          {"Unevaluated", "@", RowBox[{"Tree", "[", "d", 
                          "]"}]}], "]"}], "/;", RowBox[{"ListQ", "[", "d", 
                          "]"}]}]}], "\n", "  ", "]"}]}], ";"}]}], 
               "CodeInput"], Cell[BoxData[RowBox[{RowBox[{"newTree", "[", 
                    "list_", "]"}], ":=", "\n", "  ", RowBox[
                   {"System`Private`SetNoEntry", "@", "\n", "    ", 
                    RowBox[{"Unevaluated", "[", RowBox[{"Tree", "[", "list", 
                        "]"}], "]"}]}]}]], "CodeInput"], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"Tree", "[", RowBox[{"t_Tree", "?", 
                         "TreeQ"}], "]"}], ":=", "t"}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"Tree", "[", RowBox[{RowBox[
                          {"TreeNode", "[", "d__", "]"}], "?", "TreeNodeQ"}], 
                       "]"}], ":=", RowBox[{"newTree", "[", RowBox[{"{", "d", 
                         "}"}], "]"}]}], ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TreeNode\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreeNode", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"TreeNode", "[", "]"}], ":=", RowBox[
                      {"TreeNode", "[", RowBox[{RowBox[{"{", "}"}], RowBox[
                          {"(*", " ", RowBox[{"data", " ", "field"}], " ", 
                          "*)"}], ",", " ", RowBox[{"{", "}"}]}], RowBox[
                        {"(*", RowBox[{"children", " ", "field"}], " ", 
                         "*)"}], "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"n", ":", RowBox[{RowBox[{"TreeNode", "[", 
                          RowBox[{"data_List", ",", " ", "children_List"}], 
                          "]"}], "?", "unconstructedQ"}]}], ":=", "\n", "  ", 
                     RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"d", 
                          "=", RowBox[{"prepTreeData", "[", RowBox[{"{", 
                          RowBox[{"data", ",", " ", "children"}], "}"}], 
                          "]"}]}], "}"}], ",", "\n", "    ", RowBox[
                          {RowBox[{"Replace", "[", RowBox[{"d", ",", "\n", 
                          "      ", RowBox[{"{", "\n", "        ", RowBox[
                          {RowBox[{"{", RowBox[{"dd_", ",", " ", "cc_"}], 
                          "}"}], ":>", "\n", "  ", "        ", RowBox[
                          {"System`Private`SetNoEntry", "[", RowBox[
                          {"Unevaluated", "@", RowBox[{"TreeNode", "[", 
                          RowBox[{"dd", ",", " ", "cc"}], "]"}]}], "]"}]}], 
                          "\n", "        ", "}"}]}], "\n", "      ", "]"}], 
                          "/;", RowBox[{"ListQ", "[", "d", "]"}]}]}], "\n", 
                       "   ", "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"newNode", "[", RowBox[{"data_", ",", " ", 
                         "children_"}], "]"}], ":=", "\n", "  ", RowBox[
                      {"System`Private`SetNoEntry", "@", "\n", "    ", 
                       RowBox[{"Unevaluated", "[", RowBox[{"TreeNode", "[", 
                          RowBox[{"data", ",", " ", "children"}], "]"}], 
                         "]"}]}]}], ";"}], "\n", RowBox[{RowBox[{"newNode", 
                     "[", RowBox[{"{", RowBox[{"data_", ",", " ", 
                         "children_"}], "}"}], "]"}], ":=", "\n", "  ", 
                   RowBox[{"newNode", "[", RowBox[{"data", ",", " ", 
                       "children"}], "]"}]}]}], "CodeInput"], 
              Cell[BoxData[{RowBox[{RowBox[{RowBox[{"TreeNode", "[", 
                       RowBox[{RowBox[{"Tree", "[", RowBox[{"{", "d__", 
                          "}"}], "]"}], "?", "TreeQ"}], "]"}], ":=", 
                     RowBox[{"TreeNode", "[", "d", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TreeNode", "[", RowBox[
                        {"t_TreeNode", "?", "TreeNodeQ"}], "]"}], ":=", 
                     "t"}], ";"}]}], "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]Destructor Operations\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"(*", " ", RowBox[{"basic", " ", 
                   "destructors"}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{RowBox[{"TreeQ", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"TreeQ", "[", "q_Tree", "]"}], ":=", 
                     RowBox[{"System`Private`NoEntryQ", "[", "q", "]"}]}], 
                   ";"}], "\n", RowBox[{RowBox[{RowBox[{"TreeQ", "[", "_", 
                       "]"}], ":=", "False"}], ";"}]}]}]], "CodeInput"], 
           Cell[BoxData[{RowBox[{"TreeNodeQ", "//", "Clear"}], "\n", 
              RowBox[{RowBox[{RowBox[{"TreeNodeQ", "[", "q_TreeNode", "]"}], 
                  ":=", RowBox[{"System`Private`NoEntryQ", "[", "q", "]"}]}], 
                ";"}], "\n", RowBox[{RowBox[{"TreeNodeQ", "[", "_", "]"}], 
                ":=", "False"}]}], "CodeInput"], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"TreeCore", "[", RowBox[
                     {"Tree", "[", "t_", "]"}], "]"}], ":=", "t"}], ";"}], 
              "\n", RowBox[{RowBox[{RowBox[{"TreeCore", "[", RowBox[
                     {"TreeNode", "[", RowBox[{"a_", ",", " ", "b_"}], "]"}], 
                    "]"}], ":=", RowBox[{"{", RowBox[{"a", ",", " ", "b"}], 
                    "}"}]}], ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]treePosSpec\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{"treePosSpec", "//", "Clear"}], "\n", 
              RowBox[{RowBox[{RowBox[{"treePosSpec", "[", RowBox[
                     {RowBox[{"{", "}"}], "|", "None"}], "]"}], ":=", "\n", 
                  "  ", RowBox[{"{", "}"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"treePosSpec", "[", RowBox[{"pos", ":", 
                      RowBox[{"{", "__Integer", "}"}]}], "]"}], ":=", "\n", 
                  "  ", RowBox[{"Prepend", "[", RowBox[{RowBox[{"Riffle", 
                        "[", RowBox[{"pos", ",", " ", "2"}], "]"}], ",", " ", 
                      "2"}], "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"treePosSpec", "[", "i_Integer", "]"}], ":=", "\n", 
                  "  ", RowBox[{"treePosSpec", "[", RowBox[{"{", "i", "}"}], 
                    "]"}]}], ";"}]}], "CodeInput"]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]treeHasDepth\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"treeHasDepth", "[", 
                   RowBox[{"t_", ",", " ", "posSpec_"}], "]"}], ":=", "\n", 
                 "  ", RowBox[{"Quiet", "[", RowBox[{RowBox[{"Check", "[", 
                       RowBox[{RowBox[{RowBox[{"t", "[", RowBox[{"[", RowBox[
                          {"Sequence", "@@", "posSpec"}], "]"}], "]"}], ";", 
                          "True"}], ",", " ", "False", ",", " ", RowBox[
                          {"Part", "::", "partw"}]}], "]"}], ",", " ", 
                     RowBox[{"Part", "::", "partw"}]}], "]"}]}], ";"}]], 
            "CodeInput"]}, Closed]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]Children\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True], Cell[BoxData[
             {RowBox[{RowBox[{RowBox[{"Tree", "::", "nochild"}], "=", 
                  "\"Tree doesn't have children at node `` and position ``\""}\
], ";"}], "\n", RowBox[{RowBox[{RowBox[{"TreeNode", "::", "nochild"}], "=", 
                  "\"TreeNode doesn't have children at node `` and position \
``\""}], ";"}]}], "CodeInput"], Cell[CellGroupData[
             {Cell["\[LeftCeiling]treeChildren\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treeChildren", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"treeChildren", "[", "\n", "  ", 
                       RowBox[{"head_", ",", "\n", "  ", "obj_", ",", "\n", 
                         "  ", "list_", ",", " ", "\n", "  ", "pos_"}], "\n", 
                       "  ", "]"}], ":=", "\n", "  ", RowBox[{"With", "[", 
                       RowBox[{RowBox[{"{", RowBox[{"p", "=", RowBox[
                          {"Flatten", "[", RowBox[{RowBox[{"{", "pos", "}"}], 
                          ",", " ", "1"}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"Module", "[", "\n", "      ", RowBox[
                          {RowBox[{"{", "\n", "        ", RowBox[{RowBox[
                          {"ps", "=", RowBox[{"Join", "[", RowBox[{RowBox[
                          {"treePosSpec", "[", RowBox[{"Most", "@", "p"}], 
                          "]"}], ",", " ", RowBox[{"{", RowBox[{"2", ",", 
                          " ", RowBox[{"Last", "@", "p"}]}], "}"}]}], 
                          "]"}]}], ",", "\n", "  ", "      ", "$failed", ",", 
                          "\n", "  ", "      ", "c"}], "\n", "  ", "      ", 
                          "}"}], ",", "\n", "  ", "    ", RowBox[{RowBox[
                          {"c", "=", "\n", "  ", "      ", RowBox[{"Quiet", 
                          "[", "\n", "  ", "        ", RowBox[{RowBox[
                          {"Check", "[", "\n", "  ", "          ", RowBox[
                          {RowBox[{"list", "[", RowBox[{"[", RowBox[
                          {"Sequence", "@@", "ps"}], "]"}], "]"}], ",", "\n", 
                          "  ", "          ", "$failed", ",", "\n", "  ", 
                          "          ", RowBox[{"Part", "::", "partw"}]}], 
                          "]"}], ",", " ", "\n", "  ", "  ", "      ", RowBox[
                          {"Part", "::", "partw"}]}], "\n", "  ", "        ", 
                          "]"}]}], ";", "\n", "  ", "    ", RowBox[{"If", 
                          "[", RowBox[{RowBox[{"c", "=!=", "$failed"}], ",", 
                          "\n", "  ", "      ", "c", ",", "\n", "  ", 
                          "      ", RowBox[{RowBox[{"Message", "[", RowBox[
                          {RowBox[{"head", "::", "nochild"}], ",", " ", 
                          RowBox[{"Most", "@", "p"}], ",", " ", RowBox[
                          {"Last", "@", "p"}]}], "]"}], ";", "\n", "  ", 
                          "      ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoChild\"", ",", " ", RowBox[{"<|", "\n", "  ", 
                          "        ", RowBox[{RowBox[{"\"MessageTemplate\"", 
                          ":>", RowBox[{"head", "::", "nochild"}]}], ",", 
                          "\n", "  ", "        ", RowBox[{
                          "\"MessageParameters\"", "\[RuleDelayed]", RowBox[
                          {"{", RowBox[{RowBox[{"Most", "@", "p"}], ",", " ", 
                          RowBox[{"Last", "@", "p"}], ",", " ", "obj"}], 
                          "}"}]}]}], "\n", "  ", "        ", "|>"}]}], "\n", 
                          "  ", "        ", "]"}]}]}], "\n", "        ", 
                          "]"}]}]}], "\n", "      ", "]"}]}], "\n", "    ", 
                       "]"}]}], ";"}]}], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreeChildren\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"TreeChildren", "//", "Clear"}]], "CodeInput"], 
              Cell["\[LeftCeiling]\n\tOptimized puller for most common \
ops\n\[RightFloor]", "Text", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"TreeChildren", "[", RowBox[
                        {RowBox[{"n", ":", RowBox[{"Tree", "[", RowBox[
                          {"{", RowBox[{"_", ",", " ", "c_"}], "}"}], 
                          "]"}]}], ",", " ", RowBox[{"Optional", "[", RowBox[
                          {"All", ",", " ", "All"}], "]"}]}], "]"}], ":=", 
                     "\n", "  ", RowBox[{"newNode", "@@@", "c"}]}], ";"}], 
                 "\n", RowBox[{RowBox[{RowBox[{"TreeChildren", "[", RowBox[
                        {RowBox[{"n", ":", RowBox[{"TreeNode", "[", RowBox[
                          {"_", ",", " ", "c_"}], "]"}]}], ",", " ", RowBox[
                          {"Optional", "[", RowBox[{"All", ",", " ", "All"}], 
                          "]"}]}], "]"}], ":=", "\n", "  ", RowBox[
                      {"newNode", "@@@", "c"}]}], ";"}]}], "CodeInput"], 
              Cell["\[LeftCeiling]\n\tFlexible fallback for the \
rest\n\[RightFloor]", "Text", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"TreeChildren", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", RowBox[{"___Integer", ",", 
                          " ", RowBox[{"_Integer", "|", "_Span", "|", 
                          "All"}]}], "}"}], "|", "_Integer", "|", 
                          "_Span"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                     RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"l", 
                          "=", RowBox[{"treeChildren", "[", RowBox[{"Tree", 
                          ",", " ", "n", ",", " ", "t", ",", " ", "pos"}], 
                          "]"}]}], "}"}], ",", "\n", "    ", RowBox[{"Which", 
                          "[", "\n", "      ", RowBox[{RowBox[{"Not", "@", 
                          RowBox[{"ListQ", "@", "l"}]}], ",", " ", "\n", 
                          "        ", "l", ",", "\n", "      ", RowBox[
                          {RowBox[{"IntegerQ", "@", "pos"}], "||", RowBox[
                          {"(", RowBox[{RowBox[{"ListQ", "[", "pos", "]"}], 
                          "&&", RowBox[{"IntegerQ", "@", RowBox[{"Last", "@", 
                          "pos"}]}]}], ")"}]}], ",", "\n", "        ", 
                          RowBox[{"newNode", "@@", "l"}], ",", "\n", 
                          "      ", "True", ",", "\n", "        ", RowBox[
                          {"newNode", "@@@", "l"}]}], "\n", "      ", 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TreeChildren", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"TreeNode", "[", 
                          RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", 
                         "\n", "  ", RowBox[{"pos", ":", RowBox[{RowBox[
                          {"{", RowBox[{"___Integer", ",", " ", RowBox[
                          {"_Integer", "|", "_Span", "|", "All"}]}], "}"}], 
                          "|", "_Integer", "|", "_Span", "|", "All"}], ":", 
                          "All"}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                     RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"l", 
                          "=", RowBox[{"treeChildren", "[", RowBox[
                          {"TreeNode", ",", " ", "n", ",", " ", "t", ",", 
                          " ", "pos"}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"Which", "[", "\n", "      ", RowBox[
                          {RowBox[{"Not", "@", RowBox[{"ListQ", "@", "l"}]}], 
                          ",", " ", "\n", "        ", "l", ",", "\n", 
                          "      ", RowBox[{RowBox[{"IntegerQ", "@", "pos"}], 
                          "||", RowBox[{"(", RowBox[{RowBox[{"ListQ", "[", 
                          "pos", "]"}], "&&", RowBox[{"IntegerQ", "@", RowBox[
                          {"Last", "@", "pos"}]}]}], ")"}]}], ",", "\n", 
                          "        ", RowBox[{"newNode", "@@", "l"}], ",", 
                          "\n", "      ", "True", ",", "\n", "        ", 
                          RowBox[{"newNode", "@@@", "l"}]}], "\n", "      ", 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}]}], 
               "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Data\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Tree", "::", "nodata"}], 
                  "=", 
                  "\"Tree doesn't have data at node `` and position ``\""}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[{"TreeNode", "::", 
                    "nodata"}], "=", "\"TreeNode doesn't have data at node `` \
and position ``\""}], ";"}]}], "CodeInput"], Cell[CellGroupData[
             {Cell["\[LeftCeiling]treeData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treeData", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"treeData", "[", "\n", "  ", RowBox[
                        {"head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", 
                         "list_", ",", " ", "\n", "  ", "pos_"}], "\n", "  ", 
                       "]"}], ":=", "\n", "  ", RowBox[{"With", "[", 
                       RowBox[{RowBox[{"{", RowBox[{"p", "=", RowBox[
                          {"Flatten", "[", RowBox[{RowBox[{"{", "pos", "}"}], 
                          ",", " ", "1"}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"Module", "[", "\n", "      ", RowBox[
                          {RowBox[{"{", "\n", "        ", RowBox[{RowBox[
                          {"ps", "=", RowBox[{"Join", "[", RowBox[{RowBox[
                          {"treePosSpec", "[", RowBox[{"Most", "@", "p"}], 
                          "]"}], ",", " ", RowBox[{"{", RowBox[{"1", ",", 
                          " ", RowBox[{"Last", "@", "p"}]}], "}"}]}], 
                          "]"}]}], ",", "\n", "  ", "      ", "$failed", ",", 
                          "\n", "  ", "      ", "c"}], "\n", "  ", "      ", 
                          "}"}], ",", "\n", "  ", "    ", RowBox[{RowBox[
                          {"c", "=", "\n", "  ", "      ", RowBox[{"Quiet", 
                          "[", "\n", "  ", "        ", RowBox[{RowBox[
                          {"Check", "[", "\n", "  ", "          ", RowBox[
                          {RowBox[{"list", "[", RowBox[{"[", RowBox[
                          {"Sequence", "@@", "ps"}], "]"}], "]"}], ",", "\n", 
                          "  ", "          ", "$failed", ",", "\n", "  ", 
                          "          ", RowBox[{"Part", "::", "partw"}]}], 
                          "]"}], ",", " ", "\n", "  ", "  ", "      ", RowBox[
                          {"Part", "::", "partw"}]}], "\n", "  ", "        ", 
                          "]"}]}], ";", "\n", "  ", "    ", RowBox[{"If", 
                          "[", RowBox[{RowBox[{"c", "=!=", "$failed"}], ",", 
                          "\n", "  ", "      ", "c", ",", "\n", "  ", 
                          "      ", RowBox[{RowBox[{"Message", "[", RowBox[
                          {RowBox[{"head", "::", "nodata"}], ",", " ", RowBox[
                          {"Most", "@", "p"}], ",", " ", RowBox[{"Last", "@", 
                          "p"}]}], "]"}], ";", "\n", "  ", "      ", RowBox[
                          {"Failure", "[", RowBox[{"\"NoChild\"", ",", " ", 
                          RowBox[{"<|", "\n", "  ", "        ", RowBox[
                          {RowBox[{"\"MessageTemplate\"", ":>", RowBox[
                          {"head", "::", "nodata"}]}], ",", "\n", 
                          "          ", RowBox[{"\"MessageParameters\"", 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{RowBox[
                          {"Most", "@", "p"}], ",", " ", RowBox[{"Last", "@", 
                          "p"}], ",", " ", "obj"}], "}"}]}]}], "\n", "  ", 
                          "        ", "|>"}]}], "\n", "  ", "        ", 
                          "]"}]}]}], "\n", "        ", "]"}]}]}], "\n", 
                          "      ", "]"}]}], "\n", "    ", "]"}]}], ";"}]}], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreeData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"TreeData", "//", "Clear"}]], "CodeInput"], 
              Cell["\[LeftCeiling]\n\tOptimized for most common \
case\n\[RightFloor]", "Text", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"TreeData", "[", RowBox[
                        {RowBox[{"Tree", "[", RowBox[{"{", RowBox[{RowBox[
                          {"{", RowBox[{"d_", ",", " ", "___"}], "}"}], ",", 
                          " ", "_"}], "}"}], "]"}], ",", " ", RowBox[
                          {"Optional", "[", RowBox[{"1", ",", " ", "1"}], 
                          "]"}]}], "]"}], ":=", "\n", "  ", "d"}], ";"}], 
                 "\n", RowBox[{RowBox[{RowBox[{"TreeData", "[", RowBox[
                        {RowBox[{"TreeNode", "[", RowBox[{RowBox[{"{", RowBox[
                          {"d_", ",", " ", "___"}], "}"}], ",", " ", "t_"}], 
                          "]"}], ",", " ", RowBox[{"Optional", "[", RowBox[
                          {"1", ",", " ", "1"}], "]"}]}], "]"}], ":=", "\n", 
                     "  ", "d"}], ";"}], "\n", RowBox[{RowBox[
                    {RowBox[{"TreeData", "[", RowBox[{RowBox[{"t", ":", 
                          RowBox[{"Tree", "[", RowBox[{"{", RowBox[{RowBox[
                          {"{", "}"}], ",", " ", "_"}], "}"}], "]"}]}], ",", 
                         " ", RowBox[{"Optional", "[", RowBox[{"1", ",", " ", 
                          "1"}], "]"}]}], "]"}], ":=", "\n", "  ", RowBox[
                      {"(", "\n", "    ", RowBox[{RowBox[{"Message", "[", 
                          RowBox[{RowBox[{"Tree", "::", "nodata"}], ",", " ", 
                          RowBox[{"{", "}"}], ",", " ", "1"}], "]"}], ";", 
                         "\n", "    ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoChild\"", ",", " ", RowBox[{"<|", "\n", 
                          "      ", RowBox[{RowBox[{"\"MessageTemplate\"", 
                          ":>", RowBox[{"Tree", "::", "nodata"}]}], ",", 
                          "\n", "      ", RowBox[{"\"MessageParameters\"", 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{RowBox[{"{", 
                          "}"}], ",", " ", "1", ",", " ", "t"}], "}"}]}]}], 
                          "\n", "      ", "|>"}]}], "\n", "      ", "]"}]}], 
                       "\n", "    ", ")"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"TreeData", "[", RowBox[{RowBox[{"t", ":", 
                          RowBox[{"TreeNode", "[", RowBox[{RowBox[{"{", 
                          "}"}], ",", " ", "_"}], "]"}]}], ",", " ", RowBox[
                          {"Optional", "[", RowBox[{"1", ",", " ", "1"}], 
                          "]"}]}], "]"}], ":=", "\n", "  ", RowBox[{"(", 
                       "\n", "    ", RowBox[{RowBox[{"Message", "[", RowBox[
                          {RowBox[{"TreeNode", "::", "nodata"}], ",", " ", 
                          RowBox[{"{", "}"}], ",", " ", "1"}], "]"}], ";", 
                         "\n", "    ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoChild\"", ",", " ", RowBox[{"<|", "\n", 
                          "      ", RowBox[{RowBox[{"\"MessageTemplate\"", 
                          ":>", RowBox[{"TreeNode", "::", "nodata"}]}], ",", 
                          "\n", "      ", RowBox[{"\"MessageParameters\"", 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{RowBox[{"{", 
                          "}"}], ",", " ", "1", ",", " ", "t"}], "}"}]}]}], 
                          "\n", "      ", "|>"}]}], "\n", "      ", "]"}]}], 
                       "\n", "    ", ")"}]}], ";"}]}], "CodeInput"], 
              Cell["\[LeftCeiling]\n\tFlexible puller for all other \
positions\n\[RightFloor]", "Text", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"TreeData", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", RowBox[{"___Integer", ",", 
                          " ", RowBox[{"_Integer", "|", "_Span", "|", 
                          "All"}]}], "}"}], "|", "_Integer", "|", "_Span", 
                          "|", "All"}]}]}], "\n", "  ", "]"}], ":=", "\n", 
                     "  ", RowBox[{"treeData", "[", RowBox[{"Tree", ",", " ", 
                         "n", ",", " ", "t", ",", " ", "pos"}], "]"}]}], 
                   ";"}], "\n", RowBox[{RowBox[{RowBox[{"TreeData", "[", 
                       "\n", "  ", RowBox[{RowBox[{"n", ":", RowBox[
                          {"TreeNode", "[", RowBox[{"d_", ",", " ", "t_"}], 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", RowBox[{"___Integer", ",", 
                          " ", RowBox[{"_Integer", "|", "_Span", "|", 
                          "All"}]}], "}"}], "|", "_Integer", "|", "_Span", 
                          "|", "All"}]}]}], "\n", "  ", "]"}], ":=", "\n", 
                     "  ", RowBox[{"treeData", "[", RowBox[{"TreeNode", ",", 
                         " ", "n", ",", " ", RowBox[{"{", RowBox[{"d", ",", 
                          " ", "t"}], "}"}], ",", " ", "pos"}], "]"}]}], 
                   ";"}]}], "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]ChildCount\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreeChildCount\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreeChildCount", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TreeChildCount", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "___Integer", "}"}], "|", 
                          "_Integer"}], ":", RowBox[{"{", "}"}]}]}], "\n", 
                       "  ", "]"}], ":=", "\n", "  ", RowBox[{"With", "[", 
                       RowBox[{RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeChildren", "[", RowBox[{"Tree", ",", " ", 
                          "n", ",", " ", "t", ",", " ", RowBox[{"Flatten", 
                          "[", RowBox[{RowBox[{"{", RowBox[{"pos", ",", " ", 
                          "All"}], "}"}], ",", " ", "1"}], "]"}]}], "]"}]}], 
                          "}"}], ",", "\n", "    ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"ListQ", "@", "l"}], ",", " ", 
                          RowBox[{"Length", "@", "l"}], ",", " ", "l"}], 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TreeChildCount", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"TreeNode", "[", 
                          RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", 
                         "\n", "  ", RowBox[{"pos", ":", RowBox[{RowBox[
                          {"{", "___Integer", "}"}], "|", "_Integer"}], ":", 
                          RowBox[{"{", "}"}]}]}], "\n", "  ", "]"}], ":=", 
                     "\n", "  ", RowBox[{"With", "[", RowBox[{RowBox[{"{", 
                          RowBox[{"l", "=", RowBox[{"treeChildren", "[", 
                          RowBox[{"TreeNode", ",", " ", "n", ",", " ", RowBox[
                          {"{", RowBox[{"d", ",", " ", "t"}], "}"}], ",", 
                          " ", RowBox[{"Flatten", "[", RowBox[{RowBox[{"{", 
                          RowBox[{"pos", ",", " ", "All"}], "}"}], ",", " ", 
                          "1"}], "]"}]}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "l"}], ",", " ", RowBox[{"Length", "@", "l"}], ",", 
                          " ", "l"}], "]"}]}], "\n", "    ", "]"}]}], 
                   ";"}]}], "CodeInput"]}, Closed]]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Insert\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Tree", "::", "noins"}], 
                  "=", "\"Tree can't insert at position `` in node ``\""}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[{"TreeNode", "::", 
                    "noins"}], "=", 
                  "\"TreeNode can't insert at position `` in node ``\""}], 
                ";"}]}], "CodeInput"], Cell[CellGroupData[
             {Cell["\[LeftCeiling]treeInsert\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treeInsert", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"treeInsert", "[", "\n", "  ", RowBox[
                        {"head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", 
                         "list_", ",", " ", "\n", "  ", RowBox[{"node", ":", 
                          RowBox[{"{", RowBox[{"data_List", ",", " ", 
                          "children_List"}], "}"}]}], ",", " ", "\n", "  ", 
                         RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "__Integer", "}"}], "|", "_Integer"}]}]}], "\n", 
                       "  ", "]"}], ":=", "\n", "  ", RowBox[{"Module", "[", 
                       "\n", "    ", RowBox[{RowBox[{"{", "\n", "      ", 
                          RowBox[{"c", ",", " ", "\n", "      ", "$failed", 
                          ",", " ", "\n", "      ", RowBox[{"ps", "=", RowBox[
                          {"treePosSpec", "[", "pos", "]"}]}]}], "\n", 
                          "      ", "}"}], ",", "\n", "    ", RowBox[
                          {RowBox[{"c", "=", "\n", "      ", RowBox[{"Quiet", 
                          "[", "\n", "        ", RowBox[{RowBox[{"Check", 
                          "[", "\n", "  ", "        ", RowBox[{RowBox[
                          {"Insert", "[", RowBox[{"list", ",", " ", "node", 
                          ",", " ", "ps"}], "]"}], ",", "\n", "  ", 
                          "        ", "$failed", ",", "\n", "  ", "        ", 
                          RowBox[{"Insert", "::", "ins"}]}], "\n", "  ", 
                          "        ", "]"}], ",", "\n", "  ", "      ", 
                          RowBox[{"Insert", "::", "ins"}]}], "\n", 
                          "        ", "]"}]}], ";", "\n", "    ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"c", "===", 
                          "$failed"}], ",", "\n", "      ", RowBox[{"With", 
                          "[", RowBox[{RowBox[{"{", RowBox[{RowBox[{"p1", 
                          "=", RowBox[{"Most", "@", RowBox[{"Flatten", "@", 
                          RowBox[{"{", "pos", "}"}]}]}]}], ",", " ", RowBox[
                          {"p2", "=", RowBox[{"Last", "@", RowBox[{"Flatten", 
                          "@", RowBox[{"{", "pos", "}"}]}]}]}]}], "}"}], ",", 
                          "\n", "  ", "      ", RowBox[{RowBox[{"Message", 
                          "[", RowBox[{RowBox[{"head", "::", "noins"}], ",", 
                          " ", "p2", ",", " ", "p1"}], "]"}], ";", "\n", 
                          "  ", "      ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoInsert\"", ",", " ", RowBox[{"<|", "\n", 
                          "  ", "        ", RowBox[{RowBox[{
                          "\"MessageTemplate\"", ":>", RowBox[{"head", "::", 
                          "noins"}]}], ",", "\n", "          ", RowBox[
                          {"\"MessageParameters\"", "\[RuleDelayed]", RowBox[
                          {"{", RowBox[{"p2", ",", " ", "p1", ",", " ", 
                          "obj"}], "}"}]}]}], "\n", "  ", "        ", 
                          "|>"}]}], "\n", "  ", "        ", "]"}]}]}], "\n", 
                          "        ", "]"}], ",", "\n", "      ", "c"}], 
                          "\n", "      ", "]"}]}]}], "\n", "    ", "]"}]}], 
                   ";"}], "\n", RowBox[{RowBox[{RowBox[{"treeInsert", "[", 
                       "\n", "  ", RowBox[{"head_", ",", "\n", "  ", "obj_", 
                         ",", "\n", "  ", "list_", ",", " ", "\n", "  ", 
                         RowBox[{"TreeNode", "[", RowBox[{"data_List", ",", 
                          " ", "children_List"}], "]"}], ",", " ", "\n", 
                         "  ", RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "__Integer", "}"}], "|", "_Integer"}]}]}], "\n", 
                       "  ", "]"}], ":=", "\n", "  ", RowBox[{"treeInsert", 
                       "[", RowBox[{"head", ",", " ", "obj", ",", " ", 
                         "list", ",", " ", RowBox[{"{", RowBox[{"data", ",", 
                          " ", "children"}], "}"}], ",", " ", "pos"}], 
                       "]"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                      {"treeInsert", "[", "\n", "  ", RowBox[{"head_", ",", 
                         "\n", "  ", "obj_", ",", "\n", "  ", "list_", ",", 
                         " ", "\n", "  ", RowBox[{"Tree", "[", "t_", "]"}], 
                         ",", " ", "\n", "  ", RowBox[{"pos", ":", RowBox[
                          {RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}]}]}], "\n", "  ", "]"}], ":=", "\n", 
                     "  ", RowBox[{"treeInsert", "[", RowBox[{"head", ",", 
                         " ", "obj", ",", " ", "list", ",", " ", "t", ",", 
                         " ", "pos"}], "]"}]}], ";"}]}], "CodeInput"]}, 
             Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreeInsert\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"TreeInsert", "//", "Clear"}]], "CodeInput"], 
              Cell[CellGroupData[{Cell["\[LeftCeiling]Opt\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell["\[LeftCeiling]\n\tOptimized for most common \
insert\n\[RightFloor]", "Text", Evaluatable -> True], Cell[BoxData[
                   {RowBox[{RowBox[{RowBox[{"prepNode", "[", RowBox[{"Tree", 
                          "[", "t_", "]"}], "]"}], ":=", "t"}], ";"}], "\n", 
                    RowBox[{RowBox[{RowBox[{"prepNode", "[", RowBox[
                          {"TreeNode", "[", RowBox[{"{", RowBox[{"a_", ",", 
                          " ", "b_"}], "}"}], "]"}], "]"}], ":=", RowBox[
                         {"{", RowBox[{"a", ",", " ", "b"}], "}"}]}], 
                      ";"}]}], "CodeInput"], Cell[BoxData[{RowBox[
                     {RowBox[{"TreeInsert", "[", "\n", "  ", RowBox[
                         {RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"node", ":", 
                          RowBox[{RowBox[{"{", RowBox[{"data_List", ",", " ", 
                          "children_List"}], "}"}], "|", RowBox[{"_Tree", 
                          "?", "TreeQ"}], "|", RowBox[{"_TreeNode", "?", 
                          "TreeNodeQ"}]}]}], ",", " ", "\n", "  ", RowBox[
                          {"Optional", "[", RowBox[{RowBox[{"-", "1"}], ",", 
                          " ", RowBox[{"-", "1"}]}], "]"}]}], "\n", "  ", 
                        "]"}], ":=", "\n", "  ", RowBox[{"newTree", "[", 
                        RowBox[{"Insert", "[", RowBox[{"t", ",", " ", RowBox[
                          {"prepNode", "@", "node"}], ",", " ", RowBox[
                          {"{", RowBox[{"2", ",", " ", RowBox[{"-", "1"}]}], 
                          "}"}]}], "]"}], "]"}]}], "\n", RowBox[
                     {RowBox[{"TreeInsert", "[", "\n", "  ", RowBox[
                         {RowBox[{"n", ":", RowBox[{"TreeNode", "[", RowBox[
                          {"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", 
                          "  ", RowBox[{"node", ":", RowBox[{RowBox[{"{", 
                          RowBox[{"data_List", ",", " ", "children_List"}], 
                          "}"}], "|", RowBox[{"_Tree", "?", "TreeQ"}], "|", 
                          RowBox[{"_TreeNode", "?", "TreeNodeQ"}]}]}], ",", 
                          " ", "\n", "  ", RowBox[{"Optional", "[", RowBox[
                          {RowBox[{"-", "1"}], ",", " ", RowBox[{"-", 
                          "1"}]}], "]"}]}], "\n", "  ", "]"}], ":=", "\n", 
                      "  ", RowBox[{"newNode", "[", RowBox[{"d", ",", " ", 
                          RowBox[{"Append", "[", RowBox[{"t", ",", " ", 
                          RowBox[{"prepNode", "@", "n"}]}], "]"}]}], 
                        "]"}]}]}], "CodeInput"]}, Open]], Cell[CellGroupData[
                {Cell["\[LeftCeiling]General\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell["\[LeftCeiling]\n\tMore flexible but likely slower \
insert\n\[RightFloor]", "Text", Evaluatable -> True], Cell[BoxData[
                   {RowBox[{RowBox[{RowBox[{"TreeInsert", "[", "\n", "  ", 
                          RowBox[{RowBox[{"n", ":", RowBox[{"Tree", "[", 
                          "t_", "]"}]}], ",", " ", "\n", "  ", RowBox[
                          {"node", ":", RowBox[{RowBox[{"{", RowBox[
                          {"data_List", ",", " ", "children_List"}], "}"}], 
                          "|", RowBox[{"_Tree", "?", "TreeQ"}], "|", RowBox[
                          {"_TreeNode", "?", "TreeNodeQ"}]}]}], ",", " ", 
                          "\n", "  ", RowBox[{"pos", ":", RowBox[{RowBox[
                          {"{", "__Integer", "}"}], "|", "_Integer"}]}]}], 
                          "\n", "  ", "]"}], ":=", "\n", "  ", RowBox[
                         {"With", "[", RowBox[{RowBox[{"{", RowBox[{"l", "=", 
                          RowBox[{"treeInsert", "[", RowBox[{"Tree", ",", 
                          " ", "n", ",", " ", "t", ",", " ", "node", ",", 
                          " ", "pos"}], "]"}]}], "}"}], ",", "\n", "    ", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "l"}], ",", " ", RowBox[{"newTree", "[", "l", 
                          "]"}], ",", " ", "l"}], "]"}]}], "\n", "    ", 
                          "]"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                         {"TreeInsert", "[", "\n", "  ", RowBox[{RowBox[
                          {"n", ":", RowBox[{"TreeNode", "[", RowBox[{"d_", 
                          ",", " ", "t_"}], "]"}]}], ",", " ", "\n", "  ", 
                          RowBox[{"node", ":", RowBox[{RowBox[{"{", RowBox[
                          {"data_List", ",", " ", "children_List"}], "}"}], 
                          "|", RowBox[{"_Tree", "?", "TreeQ"}], "|", RowBox[
                          {"_TreeNode", "?", "TreeNodeQ"}]}]}], ",", " ", 
                          "\n", "  ", RowBox[{"pos", ":", RowBox[{RowBox[
                          {"{", "__Integer", "}"}], "|", "_Integer"}]}]}], 
                          "\n", "  ", "]"}], ":=", "\n", "  ", RowBox[
                         {"With", "[", RowBox[{RowBox[{"{", RowBox[{"l", "=", 
                          RowBox[{"treeInsert", "[", RowBox[{"TreeNode", ",", 
                          " ", "n", ",", " ", RowBox[{"{", RowBox[{"d", ",", 
                          " ", "t"}], "}"}], ",", " ", "node", ",", " ", 
                          "pos"}], "]"}]}], "}"}], ",", "\n", "    ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"ListQ", "@", "l"}], 
                          ",", " ", RowBox[{"newNode", "[", RowBox[{"d", ",", 
                          " ", "l"}], "]"}], ",", " ", "l"}], "]"}]}], "\n", 
                          "    ", "]"}]}], ";"}], "\n", RowBox[
                     {RowBox[{"TreeInsert", "[", "\n", "  ", RowBox[
                         {RowBox[{"n", ":", RowBox[{"_Tree", "|", 
                          "_TreeNode"}]}], ",", " ", "\n", "  ", "data_", 
                          ",", " ", "\n", "  ", RowBox[{"pos", ":", RowBox[
                          {RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}], ":", RowBox[{"-", "1"}]}]}], "\n", 
                        "  ", "]"}], ":=", "\n", "  ", RowBox[{"TreeInsert", 
                        "[", RowBox[{"n", ",", " ", RowBox[{"{", RowBox[
                          {RowBox[{"{", "data", "}"}], ",", " ", RowBox[
                          {"{", "}"}]}], "}"}], ",", " ", "pos"}], "]"}]}]}], 
                  "CodeInput"]}, Closed]]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Replace\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Tree", "::", "norep"}], 
                  "=", "\"Tree can't replace at position `` in node ``\""}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[{"TreeNode", "::", 
                    "norep"}], "=", 
                  "\"TreeNode can't replace at position `` in node ``\""}], 
                ";"}]}], "CodeInput"], Cell[CellGroupData[
             {Cell["\[LeftCeiling]treeReplace\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treeReplace", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"treeReplace", "[", "\n", "  ", RowBox[
                        {"head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", 
                         "list_", ",", "  ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}]}], ",", "\n", "  ", RowBox[{"node", 
                          ":", RowBox[{"{", RowBox[{"data_List", ",", " ", 
                          "children_List"}], "}"}]}]}], "\n", "  ", "]"}], 
                     ":=", "\n", "  ", RowBox[{"Module", "[", "\n", "    ", 
                       RowBox[{RowBox[{"{", "\n", "      ", RowBox[{"c", ",", 
                          " ", "\n", "      ", "$failed", ",", " ", "\n", 
                          "      ", RowBox[{"ps", "=", RowBox[{"treePosSpec", 
                          "[", "pos", "]"}]}]}], "\n", "      ", "}"}], ",", 
                         "\n", "    ", RowBox[{RowBox[{"c", "=", "\n", 
                          "      ", RowBox[{"Quiet", "[", "\n", "        ", 
                          RowBox[{RowBox[{"Check", "[", "\n", "          ", 
                          RowBox[{RowBox[{"ReplacePart", "[", RowBox[{"list", 
                          ",", " ", RowBox[{"ps", "->", "node"}]}], "]"}], 
                          ",", "\n", "          ", "$failed", ",", "\n", 
                          "          ", RowBox[{"Insert", "::", "ins"}]}], 
                          "\n", "          ", "]"}], ",", "\n", "  ", 
                          "      ", RowBox[{"Insert", "::", "ins"}]}], "\n", 
                          "        ", "]"}]}], ";", "\n", "    ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"c", "===", 
                          "$failed"}], ",", "\n", "      ", RowBox[{"With", 
                          "[", RowBox[{RowBox[{"{", RowBox[{RowBox[{"p1", 
                          "=", RowBox[{"Most", "@", RowBox[{"Flatten", "@", 
                          RowBox[{"{", "pos", "}"}]}]}]}], ",", " ", RowBox[
                          {"p2", "=", RowBox[{"Last", "@", RowBox[{"Flatten", 
                          "@", RowBox[{"{", "pos", "}"}]}]}]}]}], "}"}], ",", 
                          "\n", "  ", "      ", RowBox[{RowBox[{"Message", 
                          "[", RowBox[{RowBox[{"head", "::", "norep"}], ",", 
                          " ", "p2", ",", " ", "p1"}], "]"}], ";", "\n", 
                          "  ", "      ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoReplacement\"", ",", " ", RowBox[{"<|", "\n", 
                          "  ", "        ", RowBox[{RowBox[{
                          "\"MessageTemplate\"", ":>", RowBox[{"head", "::", 
                          "norep"}]}], ",", "\n", "          ", RowBox[
                          {"\"MessageParameters\"", "\[RuleDelayed]", RowBox[
                          {"{", RowBox[{"p2", ",", " ", "p1", ",", " ", 
                          "obj"}], "}"}]}]}], "\n", "  ", "        ", 
                          "|>"}]}], "\n", "  ", "        ", "]"}]}]}], "\n", 
                          "        ", "]"}], ",", "\n", "      ", "c"}], 
                          "\n", "      ", "]"}]}]}], "\n", "    ", "]"}]}], 
                   ";"}], "\n", RowBox[{RowBox[{RowBox[{"treeReplace", "[", 
                       "\n", "  ", RowBox[{"head_", ",", "\n", "  ", "obj_", 
                         ",", "\n", "  ", "list_", ",", " ", "\n", "  ", 
                         RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "__Integer", "}"}], "|", "_Integer"}]}], ",", "\n", 
                         "  ", RowBox[{"TreeNode", "[", RowBox[{"data_List", 
                          ",", " ", "children_List"}], "]"}]}], "\n", "  ", 
                       "]"}], ":=", "\n", "  ", RowBox[{"treeReplace", "[", 
                       RowBox[{"head", ",", " ", "obj", ",", " ", "list", 
                         ",", " ", RowBox[{"{", RowBox[{"data", ",", " ", 
                          "children"}], "}"}], ",", " ", "pos"}], "]"}]}], 
                   ";"}]}], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TreeReplace\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreeReplace", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"TreeReplace", "[", "\n", "  ", RowBox[
                        {RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", "  ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}]}], ",", "\n", "  ", RowBox[{"node", 
                          ":", RowBox[{RowBox[{"{", RowBox[{"data_List", ",", 
                          " ", "children_List"}], "}"}], "|", RowBox[
                          {"_TreeNode", "?", "TreeNodeQ"}]}]}]}], "\n", "  ", 
                       "]"}], ":=", "\n", "  ", RowBox[{"With", "[", 
                       RowBox[{RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeReplace", "[", RowBox[{"Tree", ",", " ", "n", 
                          ",", " ", "t", ",", " ", "pos", ",", " ", "node"}], 
                          "]"}]}], "}"}], ",", "\n", "    ", RowBox[{"If", 
                          "[", RowBox[{RowBox[{"ListQ", "@", "l"}], ",", " ", 
                          RowBox[{"newTree", "[", "l", "]"}], ",", " ", 
                          "l"}], "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TreeReplace", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"TreeNode", "[", 
                          RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", 
                         "\n", "  ", RowBox[{"pos", ":", RowBox[{RowBox[
                          {"{", "__Integer", "}"}], "|", "_Integer"}]}], ",", 
                         "\n", "  ", RowBox[{"node", ":", RowBox[{RowBox[
                          {"{", RowBox[{"data_List", ",", " ", 
                          "children_List"}], "}"}], "|", RowBox[{"_TreeNode", 
                          "?", "TreeNodeQ"}]}]}]}], "\n", "  ", "]"}], ":=", 
                     "\n", "  ", RowBox[{"With", "[", RowBox[{RowBox[{"{", 
                          RowBox[{"l", "=", RowBox[{"treeReplace", "[", 
                          RowBox[{"TreeNode", ",", " ", "n", ",", " ", RowBox[
                          {"{", RowBox[{"d", ",", " ", "t"}], "}"}], ",", 
                          " ", "pos", ",", " ", "node"}], "]"}]}], "}"}], 
                         ",", "\n", "    ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"ListQ", "@", "l"}], ",", " ", RowBox[
                          {"newNode", "[", RowBox[{"d", ",", " ", "l"}], 
                          "]"}], ",", " ", "l"}], "]"}]}], "\n", "    ", 
                       "]"}]}], ";"}], "\n", RowBox[{RowBox[{"TreeReplace", 
                     "[", "\n", "  ", RowBox[{RowBox[{"n", ":", RowBox[
                          {"_Tree", "|", "_TreeNode"}]}], ",", " ", "\n", 
                       "  ", RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "__Integer", "}"}], "|", "_Integer"}]}], ",", "\n", 
                       "  ", "data_"}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                   RowBox[{"TreeReplace", "[", RowBox[{"n", ",", " ", 
                       RowBox[{"{", RowBox[{RowBox[{"{", "data", "}"}], ",", 
                          " ", RowBox[{"{", "}"}]}], "}"}], ",", " ", 
                       "pos"}], "]"}]}]}], "CodeInput"]}, Closed]]}, 
          Closed]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]Pop\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True], Cell[BoxData[
             {RowBox[{RowBox[{RowBox[{"Tree", "::", "nopop"}], "=", 
                  "\"Tree can't pop node ``\""}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"TreeNode", "::", "nopop"}], "=", 
                  "\"TreeNode can't pop node ``\""}], ";"}]}], "CodeInput"], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]treePop\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"treePop", "[", "\n", "  ", 
                      RowBox[{"head_", ",", "\n", "  ", "obj_", ",", "\n", 
                        "  ", "list_", ",", " ", "\n", "  ", RowBox[{"pos", 
                          ":", RowBox[{RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}]}]}], "\n", "  ", "]"}], ":=", "\n", 
                    "  ", RowBox[{"Module", "[", "\n", "    ", RowBox[
                       {RowBox[{"{", "\n", "      ", RowBox[{RowBox[{"ps", 
                          "=", RowBox[{"treePosSpec", "[", "pos", "]"}]}], 
                          ",", "\n", "      ", "$failed", ",", "\n", 
                          "      ", "c"}], "\n", "      ", "}"}], ",", "\n", 
                        "    ", RowBox[{RowBox[{"c", "=", "\n", "      ", 
                          RowBox[{"Quiet", "[", "\n", "        ", RowBox[
                          {RowBox[{"Check", "[", RowBox[{RowBox[{"list", "[", 
                          RowBox[{"[", RowBox[{"Sequence", "@@", "ps"}], 
                          "]"}], "]"}], ",", " ", "\n", "  ", "        ", 
                          "$failed", ",", "\n", "  ", "        ", RowBox[
                          {"Part", "::", "partw"}]}], "]"}], ",", " ", "\n", 
                          "  ", "      ", RowBox[{"Part", "::", "partw"}]}], 
                          "\n", "        ", "]"}]}], ";", "\n", "    ", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"c", "=!=", 
                          "$failed"}], ",", "\n", "      ", RowBox[{"{", 
                          RowBox[{"c", ",", " ", RowBox[{"Delete", "[", 
                          RowBox[{"list", ",", " ", "ps"}], "]"}]}], "}"}], 
                          ",", "\n", "      ", RowBox[{RowBox[{"Message", 
                          "[", RowBox[{RowBox[{"head", "::", "nopop"}], ",", 
                          " ", "pos"}], "]"}], ";", "\n", "      ", RowBox[
                          {"Failure", "[", RowBox[{"\"NoPop\"", ",", " ", 
                          RowBox[{"<|", "\n", "        ", RowBox[{RowBox[
                          {"\"MessageTemplate\"", "\[RuleDelayed]", RowBox[
                          {"head", "::", "nopop"}]}], ",", "\n", "        ", 
                          RowBox[{"\"MessageParameters\"", "\[RuleDelayed]", 
                          RowBox[{"{", RowBox[{"pos", ",", " ", "obj"}], 
                          "}"}]}]}], "\n", "        ", "|>"}]}], "\n", 
                          "        ", "]"}]}]}], "\n", "      ", "]"}]}]}], 
                      "\n", "    ", "]"}]}], ";"}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TreePop\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{"TreePop", "//", "Clear"}]], "CodeInput"], 
              Cell[CellGroupData[{Cell["\[LeftCeiling]Opt\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[{RowBox[{RowBox[{"TreePop", "[", "\n", "  ", 
                        RowBox[{RowBox[{"Tree", "[", RowBox[{"{", RowBox[
                          {"d_", ",", " ", RowBox[{"c", ":", RowBox[{"{", 
                          RowBox[{"_", ",", " ", "___"}], "}"}]}]}], "}"}], 
                          "]"}], ",", " ", "\n", "  ", RowBox[{"Optional", 
                          "[", RowBox[{RowBox[{"-", "1"}], ",", " ", RowBox[
                          {"-", "1"}]}], "]"}]}], "\n", "  ", "]"}], ":=", 
                      "\n", "  ", RowBox[{"{", RowBox[{RowBox[{"newNode", 
                          "@@", RowBox[{"Last", "[", "c", "]"}]}], ",", " ", 
                          RowBox[{"newTree", "[", RowBox[{"{", RowBox[{"d", 
                          ",", " ", RowBox[{"Most", "@", "c"}]}], "}"}], 
                          "]"}]}], "}"}]}], "\n", RowBox[{RowBox[{"TreePop", 
                        "[", "\n", "  ", RowBox[{RowBox[{"TreeNode", "[", 
                          RowBox[{"d_", ",", " ", RowBox[{"c", ":", RowBox[
                          {"{", RowBox[{"_", ",", " ", "___"}], "}"}]}]}], 
                          "]"}], ",", " ", "\n", "  ", RowBox[{"Optional", 
                          "[", RowBox[{RowBox[{"-", "1"}], ",", " ", RowBox[
                          {"-", "1"}]}], "]"}]}], "\n", "  ", "]"}], ":=", 
                      "\n", "  ", RowBox[{"{", RowBox[{RowBox[{"newNode", 
                          "@@", RowBox[{"Last", "[", "c", "]"}]}], ",", " ", 
                          RowBox[{"newNode", "[", RowBox[{"d", ",", " ", 
                          RowBox[{"Most", "@", "c"}]}], "]"}]}], "}"}]}]}], 
                  "CodeInput"]}, Open]], Cell[CellGroupData[
                {Cell["\[LeftCeiling]General\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[{RowBox[{RowBox[{RowBox[{"TreePop", "[", "\n", 
                          "  ", RowBox[{RowBox[{"n", ":", RowBox[{"Tree", 
                          "[", "t_", "]"}]}], ",", " ", "\n", "  ", RowBox[
                          {"pos", ":", RowBox[{RowBox[{"{", "__Integer", 
                          "}"}], "|", "_Integer"}], ":", RowBox[{"-", 
                          "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                        RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[
                          {"l", "=", RowBox[{"treePop", "[", RowBox[{"Tree", 
                          ",", " ", "n", ",", " ", "t", ",", " ", "pos"}], 
                          "]"}]}], "}"}], ",", "\n", "    ", RowBox[{"If", 
                          "[", RowBox[{RowBox[{"ListQ", "@", "l"}], ",", " ", 
                          RowBox[{"{", RowBox[{RowBox[{"newNode", "@@", 
                          RowBox[{"l", "[", RowBox[{"[", "1", "]"}], "]"}]}], 
                          ",", " ", RowBox[{"newTree", "[", RowBox[{"l", "[", 
                          RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}], 
                          ",", " ", "l"}], "]"}]}], "\n", "    ", "]"}]}], 
                      ";"}], "\n", RowBox[{RowBox[{"TreePop", "[", "\n", 
                        "  ", RowBox[{RowBox[{"n", ":", RowBox[{"TreeNode", 
                          "[", RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", 
                          " ", "\n", "  ", RowBox[{"pos", ":", RowBox[
                          {RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}], ":", RowBox[{"-", "1"}]}]}], "\n", 
                        "  ", "]"}], ":=", "\n", "  ", RowBox[{"With", "[", 
                        RowBox[{RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treePop", "[", RowBox[{"TreeNode", ",", " ", "n", 
                          ",", " ", RowBox[{"{", RowBox[{"d", ",", " ", 
                          "t"}], "}"}], ",", " ", "pos"}], "]"}]}], "}"}], 
                          ",", "\n", "    ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"ListQ", "@", "l"}], ",", " ", RowBox[
                          {"{", RowBox[{RowBox[{"newNode", "@@", RowBox[{"l", 
                          "[", RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                          RowBox[{"newNode", "@@", RowBox[{"l", "[", RowBox[
                          {"[", "2", "]"}], "]"}]}]}], "}"}], ",", " ", 
                          "l"}], "]"}]}], "\n", "    ", "]"}]}]}], 
                  "CodeInput"]}, Open]]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]InsertData\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]treeInsertData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treeInsertData", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"treeInsertData", "[", "\n", "  ", 
                       RowBox[{"head_", ",", "\n", "  ", "obj_", ",", "\n", 
                         "  ", "list_", ",", " ", "\n", "  ", "data_", ",", 
                         "\n", "  ", RowBox[{"pos", ":", RowBox[{RowBox[
                          {"{", "__Integer", "}"}], "|", "_Integer"}]}]}], 
                       "\n", "  ", "]"}], ":=", "\n", "  ", RowBox[{"With", 
                       "[", RowBox[{RowBox[{"{", RowBox[{"p", "=", RowBox[
                          {"Flatten", "[", RowBox[{RowBox[{"{", "pos", "}"}], 
                          ",", " ", "1"}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"Module", "[", "\n", "      ", RowBox[
                          {RowBox[{"{", "\n", "        ", RowBox[{"c", ",", 
                          " ", "\n", "  ", "      ", "$failed", ",", " ", 
                          "\n", "        ", RowBox[{"ps", "=", RowBox[
                          {"Join", "[", RowBox[{RowBox[{"treePosSpec", "[", 
                          RowBox[{"Most", "@", "p"}], "]"}], ",", " ", RowBox[
                          {"{", RowBox[{"1", ",", " ", RowBox[{"Last", "@", 
                          "p"}]}], "}"}]}], "]"}]}]}], "\n", "        ", 
                          "}"}], ",", "\n", "      ", RowBox[{RowBox[{"c", 
                          "=", "\n", "  ", "      ", RowBox[{"Quiet", "[", 
                          "\n", "  ", "        ", RowBox[{RowBox[{"Check", 
                          "[", "\n", "  ", "  ", "        ", RowBox[{RowBox[
                          {"Insert", "[", RowBox[{"list", ",", " ", "data", 
                          ",", " ", "ps"}], "]"}], ",", "\n", "  ", "  ", 
                          "        ", "$failed", ",", "\n", "  ", "  ", 
                          "        ", RowBox[{"Insert", "::", "ins"}]}], 
                          "\n", "  ", "  ", "        ", "]"}], ",", "\n", 
                          "  ", "  ", "      ", RowBox[{"Insert", "::", 
                          "ins"}]}], "\n", "  ", "        ", "]"}]}], ";", 
                          "\n", "  ", "    ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"c", "===", "$failed"}], ",", "\n", "  ", 
                          "      ", RowBox[{"With", "[", RowBox[{RowBox[{"{", 
                          RowBox[{RowBox[{"p1", "=", RowBox[{"Most", "@", 
                          RowBox[{"Flatten", "@", RowBox[{"{", "pos", 
                          "}"}]}]}]}], ",", " ", RowBox[{"p2", "=", RowBox[
                          {"Last", "@", RowBox[{"Flatten", "@", RowBox[{"{", 
                          "pos", "}"}]}]}]}]}], "}"}], ",", "\n", "  ", "  ", 
                          "      ", RowBox[{RowBox[{"Message", "[", RowBox[
                          {RowBox[{"head", "::", "noins"}], ",", " ", "p2", 
                          ",", " ", "p1"}], "]"}], ";", "\n", "  ", "  ", 
                          "      ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoInsert\"", ",", " ", RowBox[{"<|", "\n", 
                          "  ", "  ", "        ", RowBox[{RowBox[{
                          "\"MessageTemplate\"", ":>", RowBox[{"head", "::", 
                          "noins"}]}], ",", "\n", "  ", "          ", RowBox[
                          {"\"MessageParameters\"", "\[RuleDelayed]", RowBox[
                          {"{", RowBox[{"p2", ",", " ", "p1", ",", " ", 
                          "obj"}], "}"}]}]}], "\n", "  ", "  ", "        ", 
                          "|>"}]}], "\n", "  ", "  ", "        ", "]"}]}]}], 
                          "\n", "  ", "        ", "]"}], ",", "\n", "  ", 
                          "      ", "c"}], "\n", "        ", "]"}]}]}], "\n", 
                          "      ", "]"}]}], "\n", "    ", "]"}]}], ";"}]}], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreeInsertData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{"TreeInsertData", "//", "Clear"}], ";"}], 
                 "\n", RowBox[{RowBox[{RowBox[{"TreeInsertData", "[", "\n", 
                       "  ", RowBox[{RowBox[{"n", ":", RowBox[{"Tree", "[", 
                          "t_", "]"}]}], ",", " ", "\n", "  ", "data_", ",", 
                         " ", "\n", "  ", RowBox[{"pos", ":", RowBox[
                          {RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}], ":", "1"}]}], "\n", "  ", "]"}], 
                     ":=", "\n", "  ", RowBox[{"With", "[", RowBox[
                        {RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeInsertData", "[", RowBox[{"Tree", ",", " ", 
                          "n", ",", " ", "t", ",", " ", "data", ",", " ", 
                          "pos"}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "l"}], ",", " ", RowBox[{"newTree", "[", "l", 
                          "]"}], ",", " ", "l"}], "]"}]}], "\n", "    ", 
                       "]"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                      {"TreeInsertData", "[", "\n", "  ", RowBox[
                        {RowBox[{"n", ":", RowBox[{"TreeNode", "[", RowBox[
                          {"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", 
                         "  ", "data_", ",", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}], ":", "1"}]}], "\n", "  ", "]"}], 
                     ":=", "\n", "  ", RowBox[{"With", "[", RowBox[
                        {RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeInsertData", "[", RowBox[{"TreeNode", ",", 
                          " ", "n", ",", " ", RowBox[{"{", RowBox[{"d", ",", 
                          " ", "t"}], "}"}], ",", " ", "data", ",", " ", 
                          "pos"}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "l"}], ",", " ", RowBox[{"newNode", "[", RowBox[
                          {"d", ",", " ", "l"}], "]"}], ",", " ", "l"}], 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}]}], 
               "CodeInput"]}, Closed]]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]ReplaceData\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]treeReplaceData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treeReplaceData", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"treeReplaceData", "[", "\n", "  ", 
                       RowBox[{"head_", ",", "\n", "  ", "obj_", ",", "\n", 
                         "  ", "list_", ",", "  ", "\n", "  ", RowBox[
                          {"pos", ":", RowBox[{RowBox[{"{", "__Integer", 
                          "}"}], "|", "_Integer"}]}], ",", "\n", "  ", 
                         "data_"}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                     RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"p", 
                          "=", RowBox[{"Flatten", "[", RowBox[{RowBox[{"{", 
                          "pos", "}"}], ",", " ", "1"}], "]"}]}], "}"}], ",", 
                         "\n", "    ", RowBox[{"Module", "[", "\n", "      ", 
                          RowBox[{RowBox[{"{", "\n", "        ", RowBox[
                          {"c", ",", " ", "\n", "  ", "      ", "$failed", 
                          ",", " ", "\n", "  ", "      ", RowBox[{"ps", "=", 
                          RowBox[{"Join", "[", RowBox[{RowBox[{"treePosSpec", 
                          "[", RowBox[{"Most", "@", "p"}], "]"}], ",", " ", 
                          RowBox[{"{", RowBox[{"1", ",", " ", RowBox[{"Last", 
                          "@", "p"}]}], "}"}]}], "]"}]}]}], "\n", "  ", 
                          "      ", "}"}], ",", "\n", "  ", "    ", RowBox[
                          {RowBox[{"c", "=", "\n", "  ", "      ", RowBox[
                          {"Quiet", "[", "\n", "  ", "        ", RowBox[
                          {RowBox[{"Check", "[", "\n", "  ", "          ", 
                          RowBox[{RowBox[{"ReplacePart", "[", RowBox[{"list", 
                          ",", " ", RowBox[{"ps", "->", "data"}]}], "]"}], 
                          ",", "\n", "            ", "$failed", ",", "\n", 
                          "  ", "          ", RowBox[{"Insert", "::", 
                          "ins"}]}], "\n", "  ", "          ", "]"}], ",", 
                          "\n", "  ", "  ", "      ", RowBox[{"Insert", "::", 
                          "ins"}]}], "\n", "  ", "        ", "]"}]}], ";", 
                          "\n", "  ", "    ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"c", "===", "$failed"}], ",", "\n", "  ", 
                          "      ", RowBox[{"With", "[", RowBox[{RowBox[{"{", 
                          RowBox[{RowBox[{"p1", "=", RowBox[{"Most", "@", 
                          RowBox[{"Flatten", "@", RowBox[{"{", "pos", 
                          "}"}]}]}]}], ",", " ", RowBox[{"p2", "=", RowBox[
                          {"Last", "@", RowBox[{"Flatten", "@", RowBox[{"{", 
                          "pos", "}"}]}]}]}]}], "}"}], ",", "\n", "  ", "  ", 
                          "      ", RowBox[{RowBox[{"Message", "[", RowBox[
                          {RowBox[{"head", "::", "norep"}], ",", " ", "p2", 
                          ",", " ", "p1"}], "]"}], ";", "\n", "  ", "  ", 
                          "      ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoReplacement\"", ",", " ", RowBox[{"<|", "\n", 
                          "  ", "  ", "        ", RowBox[{RowBox[{
                          "\"MessageTemplate\"", ":>", RowBox[{"head", "::", 
                          "norep"}]}], ",", "\n", "  ", "          ", RowBox[
                          {"\"MessageParameters\"", "\[RuleDelayed]", RowBox[
                          {"{", RowBox[{"p2", ",", " ", "p1", ",", " ", 
                          "obj"}], "}"}]}]}], "\n", "  ", "  ", "        ", 
                          "|>"}]}], "\n", "  ", "  ", "        ", "]"}]}]}], 
                          "\n", "  ", "        ", "]"}], ",", "\n", "  ", 
                          "      ", "c"}], "\n", "        ", "]"}]}]}], "\n", 
                          "      ", "]"}]}], "\n", "    ", "]"}]}], ";"}]}], 
               "CodeInput"]}, Closed]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreeReplaceData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{"TreeReplaceData", "//", "Clear"}], ";"}], 
                 "\n", RowBox[{RowBox[{RowBox[{"TreeReplaceData", "[", "\n", 
                       "  ", RowBox[{RowBox[{"n", ":", RowBox[{"Tree", "[", 
                          "t_", "]"}]}], ",", " ", "\n", "  ", RowBox[
                          {"pos", ":", RowBox[{RowBox[{"{", "__Integer", 
                          "}"}], "|", "_Integer"}], ":", "1"}], ",", "\n", 
                         "  ", "data_"}], "\n", "  ", "]"}], ":=", "\n", 
                     "  ", RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[
                          {"l", "=", RowBox[{"treeReplaceData", "[", RowBox[
                          {"Tree", ",", " ", "n", ",", " ", "t", ",", " ", 
                          "pos", ",", " ", "data"}], "]"}]}], "}"}], ",", 
                         "\n", "    ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"ListQ", "@", "l"}], ",", " ", RowBox[{"newTree", 
                          "[", "l", "]"}], ",", " ", "l"}], "]"}]}], "\n", 
                       "    ", "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"TreeReplaceData", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"TreeNode", "[", 
                          RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", "\n", 
                         "  ", RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "__Integer", "}"}], "|", "_Integer"}], ":", "1"}], 
                         ",", "\n", "  ", "data_"}], "\n", "  ", "]"}], ":=", 
                     "\n", "  ", RowBox[{"With", "[", RowBox[{RowBox[{"{", 
                          RowBox[{"l", "=", RowBox[{"treeReplaceData", "[", 
                          RowBox[{"TreeNode", ",", " ", "n", ",", " ", RowBox[
                          {"{", RowBox[{"d", ",", " ", "t"}], "}"}], ",", 
                          " ", "pos", ",", " ", "data"}], "]"}]}], "}"}], 
                         ",", "\n", "    ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"ListQ", "@", "l"}], ",", " ", RowBox[
                          {"newNode", "[", RowBox[{"d", ",", " ", "l"}], 
                          "]"}], ",", " ", "l"}], "]"}]}], "\n", "    ", 
                       "]"}]}], ";"}]}], "CodeInput"]}, Closed]]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]PopData\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]treePopData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treePopData", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"treePopData", "[", "\n", "  ", RowBox[
                        {"head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", 
                         "list_", ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}]}]}], "\n", "  ", "]"}], ":=", "\n", 
                     "  ", RowBox[{"Module", "[", "\n", "    ", RowBox[
                        {RowBox[{"{", "\n", "      ", RowBox[{RowBox[{"ps", 
                          "=", RowBox[{"With", "[", RowBox[{RowBox[{"{", 
                          RowBox[{"p", "=", RowBox[{"Flatten", "[", RowBox[
                          {RowBox[{"{", "pos", "}"}], ",", " ", "1"}], 
                          "]"}]}], "}"}], ",", " ", RowBox[{"Join", "[", 
                          RowBox[{RowBox[{"treePosSpec", "[", RowBox[{"Most", 
                          "[", "p", "]"}], "]"}], ",", " ", RowBox[{"{", 
                          RowBox[{"1", ",", " ", RowBox[{"Last", "[", "p", 
                          "]"}]}], "}"}]}], "]"}]}], "]"}]}], ",", "\n", 
                          "      ", "$failed", ",", "\n", "      ", "c"}], 
                          "\n", "      ", "}"}], ",", "\n", "    ", RowBox[
                          {RowBox[{"c", "=", "\n", "      ", RowBox[{"Quiet", 
                          "[", "\n", "        ", RowBox[{RowBox[{"Check", 
                          "[", RowBox[{RowBox[{"list", "[", RowBox[{"[", 
                          RowBox[{"Sequence", "@@", "ps"}], "]"}], "]"}], 
                          ",", " ", "\n", "  ", "        ", "$failed", ",", 
                          "\n", "  ", "        ", RowBox[{"Part", "::", 
                          "partw"}]}], "]"}], ",", " ", "\n", "  ", "      ", 
                          RowBox[{"Part", "::", "partw"}]}], "\n", 
                          "        ", "]"}]}], ";", "\n", "    ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"c", "=!=", 
                          "$failed"}], ",", "\n", "      ", RowBox[{"{", 
                          RowBox[{"c", ",", " ", RowBox[{"Delete", "[", 
                          RowBox[{"list", ",", " ", "ps"}], "]"}]}], "}"}], 
                          ",", "\n", "      ", RowBox[{RowBox[{"Message", 
                          "[", RowBox[{RowBox[{"head", "::", "nopop"}], ",", 
                          " ", "pos"}], "]"}], ";", "\n", "      ", RowBox[
                          {"Failure", "[", RowBox[{"\"NoPop\"", ",", " ", 
                          RowBox[{"<|", "\n", "        ", RowBox[{RowBox[
                          {"\"MessageTemplate\"", ":>", RowBox[{"head", "::", 
                          "nopop"}]}], ",", "\n", "        ", RowBox[
                          {"\"MessageParameters\"", "\[RuleDelayed]", RowBox[
                          {"{", RowBox[{"pos", ",", " ", "obj"}], "}"}]}]}], 
                          "\n", "        ", "|>"}]}], "\n", "        ", 
                          "]"}]}]}], "\n", "      ", "]"}]}]}], "\n", "    ", 
                       "]"}]}], ";"}]}], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TreePopData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreePopData", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"TreePopData", "[", "\n", "  ", RowBox[
                        {RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}], ":", "1"}]}], "\n", "  ", "]"}], 
                     ":=", "\n", "  ", RowBox[{"With", "[", RowBox[
                        {RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treePopData", "[", RowBox[{"Tree", ",", " ", "n", 
                          ",", " ", "t", ",", " ", "pos"}], "]"}]}], "}"}], 
                         ",", "\n", "    ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"ListQ", "@", "l"}], ",", " ", RowBox[
                          {"{", RowBox[{RowBox[{"l", "[", RowBox[{"[", "1", 
                          "]"}], "]"}], ",", " ", RowBox[{"newTree", "[", 
                          RowBox[{"l", "[", RowBox[{"[", "2", "]"}], "]"}], 
                          "]"}]}], "}"}], ",", " ", "l"}], "]"}]}], "\n", 
                       "    ", "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{"TreePopData", "[", "\n", "  ", RowBox[
                      {RowBox[{"n", ":", RowBox[{"TreeNode", "[", RowBox[
                          {"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", 
                       "  ", RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "__Integer", "}"}], "|", "_Integer"}], ":", 
                         RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", 
                   "\n", "  ", RowBox[{"With", "[", RowBox[{RowBox[{"{", 
                         RowBox[{"l", "=", RowBox[{"treePopData", "[", 
                          RowBox[{"TreeNode", ",", " ", "n", ",", " ", RowBox[
                          {"{", RowBox[{"d", ",", " ", "t"}], "}"}], ",", 
                          " ", "pos"}], "]"}]}], "}"}], ",", "\n", "    ", 
                       RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "l"}], ",", " ", RowBox[{"{", RowBox[{RowBox[{"l", 
                          "[", RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                          RowBox[{"newNode", "@@", RowBox[{"l", "[", RowBox[
                          {"[", "2", "]"}], "]"}]}]}], "}"}], ",", " ", 
                          "l"}], "]"}]}], "\n", "    ", "]"}]}]}], 
               "CodeInput"]}, Closed]]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]InsertSequence\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]treeInsertSequence\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treeInsertSequence", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"treeInsertSequence", "[", "\n", 
                       "  ", RowBox[{"head_", ",", "\n", "  ", "obj_", ",", 
                         "\n", "  ", "list_", ",", " ", "\n", "  ", RowBox[
                          {"nodes", ":", "_List"}], ",", "\n", "  ", RowBox[
                          {"pos", ":", RowBox[{RowBox[{"{", "__Integer", 
                          "}"}], "|", "_Integer"}]}]}], "\n", "  ", "]"}], 
                     ":=", "\n", "  ", RowBox[{"Module", "[", "\n", "    ", 
                       RowBox[{RowBox[{"{", "\n", "      ", RowBox[{"c", ",", 
                          " ", "\n", "      ", "$failed", ",", " ", "\n", 
                          "      ", RowBox[{"ps", "=", RowBox[{"treePosSpec", 
                          "[", "pos", "]"}]}]}], "\n", "      ", "}"}], ",", 
                         "\n", "    ", RowBox[{RowBox[{"c", "=", "\n", 
                          "      ", RowBox[{"Quiet", "[", "\n", "        ", 
                          RowBox[{RowBox[{"Check", "[", "\n", "          ", 
                          RowBox[{RowBox[{"Internal`InheritedBlock", "[", 
                          RowBox[{RowBox[{"{", "Insert", "}"}], ",", "\n", 
                          "            ", RowBox[{RowBox[{"SetAttributes", 
                          "[", RowBox[{"Insert", ",", " ", "SequenceHold"}], 
                          "]"}], ";", "\n", "            ", RowBox[{"Insert", 
                          "[", RowBox[{"list", ",", " ", RowBox[{"Sequence", 
                          "@@", "nodes"}], ",", " ", "ps"}], "]"}]}]}], "\n", 
                          "            ", "]"}], ",", "\n", "          ", 
                          "$failed", ",", "\n", "          ", RowBox[
                          {"Insert", "::", "ins"}]}], "\n", "  ", "        ", 
                          "]"}], ",", "\n", "  ", "      ", RowBox[{"Insert", 
                          "::", "ins"}]}], "\n", "        ", "]"}]}], ";", 
                          "\n", "    ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"c", "===", "$failed"}], ",", "\n", "      ", 
                          RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[
                          {RowBox[{"p1", "=", RowBox[{"Most", "@", RowBox[
                          {"Flatten", "@", RowBox[{"{", "pos", "}"}]}]}]}], 
                          ",", " ", RowBox[{"p2", "=", RowBox[{"Last", "@", 
                          RowBox[{"Flatten", "@", RowBox[{"{", "pos", 
                          "}"}]}]}]}]}], "}"}], ",", "\n", "  ", "      ", 
                          RowBox[{RowBox[{"Message", "[", RowBox[{RowBox[
                          {"head", "::", "noins"}], ",", " ", "p2", ",", " ", 
                          "p1"}], "]"}], ";", "\n", "  ", "      ", RowBox[
                          {"Failure", "[", RowBox[{"\"NoInsert\"", ",", " ", 
                          RowBox[{"<|", "\n", "  ", "        ", RowBox[
                          {RowBox[{"\"MessageTemplate\"", ":>", RowBox[
                          {"head", "::", "noins"}]}], ",", "\n", 
                          "          ", RowBox[{"\"MessageParameters\"", 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{"p2", ",", 
                          " ", "p1", ",", " ", "obj"}], "}"}]}]}], "\n", 
                          "  ", "        ", "|>"}]}], "\n", "  ", "        ", 
                          "]"}]}]}], "\n", "        ", "]"}], ",", "\n", 
                          "      ", "c"}], "\n", "      ", "]"}]}]}], "\n", 
                       "    ", "]"}]}], ";"}]}], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreeInsertSequence\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell[CellGroupData[{Cell["\[LeftCeiling]Opt\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[{RowBox[{"TreeInsertSequence", "//", "Clear"}], 
                    "\n", RowBox[{RowBox[{RowBox[{"TreeInsertSequence", "[", 
                          "\n", "  ", RowBox[{RowBox[{"n", ":", RowBox[
                          {"Tree", "[", RowBox[{"{", RowBox[{"d_", ",", " ", 
                          "c_"}], "}"}], "]"}]}], ",", " ", "\n", "  ", 
                          RowBox[{"nodes", ":", RowBox[{"{", RowBox[{RowBox[
                          {"{", RowBox[{"_List", ",", " ", "_List"}], "}"}], 
                          ".."}], "}"}]}], ",", " ", "\n", "  ", RowBox[
                          {"Optional", "[", RowBox[{RowBox[{"-", "1"}], ",", 
                          " ", RowBox[{"-", "1"}]}], "]"}]}], "\n", "  ", 
                          "]"}], ":=", "\n", "  ", RowBox[{"newTree", "[", 
                          RowBox[{"{", RowBox[{"d", ",", " ", RowBox[{"Join", 
                          "[", RowBox[{"c", ",", " ", "nodes"}], "]"}]}], 
                          "}"}], "]"}]}], ";"}], "\n", RowBox[
                     {RowBox[{"TreeInsertSequence", "[", "\n", "  ", 
                        RowBox[{RowBox[{"n", ":", RowBox[{"TreeNode", "[", 
                          RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", 
                          "\n", "  ", RowBox[{"nodes", ":", RowBox[{"{", 
                          RowBox[{RowBox[{"{", RowBox[{"_List", ",", " ", 
                          "_List"}], "}"}], ".."}], "}"}]}], ",", " ", "\n", 
                          "  ", RowBox[{"Optional", "[", RowBox[{RowBox[
                          {"-", "1"}], ",", " ", RowBox[{"-", "1"}]}], 
                          "]"}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                      RowBox[{"newTree", "[", RowBox[{"{", RowBox[{"d", ",", 
                          " ", RowBox[{"Join", "[", RowBox[{"t", ",", " ", 
                          "nodes"}], "]"}]}], "}"}], "]"}]}]}], 
                  "CodeInput"]}, Open]], Cell[CellGroupData[
                {Cell["\[LeftCeiling]General\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[{RowBox[{"TreeInsertSequence", "//", "Clear"}], 
                    "\n", RowBox[{RowBox[{RowBox[{"TreeInsertSequence", "[", 
                          "\n", "  ", RowBox[{RowBox[{"n", ":", RowBox[
                          {"Tree", "[", "t_", "]"}]}], ",", " ", "\n", "  ", 
                          RowBox[{"nodes", ":", RowBox[{"{", RowBox[{RowBox[
                          {"{", RowBox[{"_List", ",", " ", "_List"}], "}"}], 
                          ".."}], "}"}]}], ",", " ", "\n", "  ", RowBox[
                          {"pos", ":", RowBox[{RowBox[{"{", "__Integer", 
                          "}"}], "|", "_Integer"}]}]}], "\n", "  ", "]"}], 
                        ":=", "\n", "  ", RowBox[{"With", "[", RowBox[
                          {RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeInsertSequence", "[", RowBox[{"Tree", ",", 
                          " ", "n", ",", " ", "t", ",", " ", "nodes", ",", 
                          " ", "pos"}], "]"}]}], "}"}], ",", "\n", "    ", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "l"}], ",", " ", RowBox[{"newTree", "[", "l", 
                          "]"}], ",", " ", "l"}], "]"}]}], "\n", "    ", 
                          "]"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                         {"TreeInsertSequence", "[", "\n", "  ", RowBox[
                          {RowBox[{"n", ":", RowBox[{"TreeNode", "[", RowBox[
                          {"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", 
                          "  ", RowBox[{"nodes", ":", RowBox[{"{", RowBox[
                          {RowBox[{"{", RowBox[{"_List", ",", " ", "_List"}], 
                          "}"}], ".."}], "}"}]}], ",", " ", "\n", "  ", 
                          RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "__Integer", "}"}], "|", "_Integer"}]}]}], "\n", 
                          "  ", "]"}], ":=", "\n", "  ", RowBox[{"With", "[", 
                          RowBox[{RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeInsertSequence", "[", RowBox[{"TreeNode", 
                          ",", " ", "n", ",", " ", RowBox[{"{", RowBox[{"d", 
                          ",", " ", "t"}], "}"}], ",", " ", "nodes", ",", 
                          " ", "pos"}], "]"}]}], "}"}], ",", "\n", "    ", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "l"}], ",", " ", RowBox[{"newNode", "[", RowBox[
                          {"d", ",", " ", "l"}], "]"}], ",", " ", "l"}], 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                    RowBox[{RowBox[{"TreeInsertSequence", "[", "\n", "  ", 
                        RowBox[{RowBox[{"n", ":", RowBox[{"_Tree", "|", 
                          "_TreeNode"}]}], ",", " ", "\n", "  ", "data_List", 
                          ",", " ", "\n", "  ", RowBox[{"pos", ":", RowBox[
                          {RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}]}]}], "\n", "  ", "]"}], ":=", "\n", 
                      "  ", RowBox[{"TreeInsertSequence", "[", RowBox[
                         {"n", ",", " ", "\n", "    ", RowBox[{"Replace", 
                          "[", RowBox[{"data", ",", " ", "\n", "      ", 
                          RowBox[{"{", "\n", "        ", RowBox[{RowBox[
                          {RowBox[{RowBox[{"Tree", "[", "t_", "]"}], "?", 
                          "TreeQ"}], "\[RuleDelayed]", "t"}], ",", "\n", 
                          "        ", RowBox[{RowBox[{RowBox[{"TreeNode", 
                          "[", RowBox[{"d_", ",", " ", "t_"}], "]"}], "?", 
                          "TreeNodeQ"}], "\[RuleDelayed]", RowBox[{"{", 
                          RowBox[{"d", ",", " ", "t"}], "}"}]}], ",", "\n", 
                          "        ", RowBox[{RowBox[{"e", ":", RowBox[
                          {"Except", "[", RowBox[{"{", RowBox[{"_List", ",", 
                          " ", "_List"}], "}"}], "]"}]}], ":>", RowBox[{"{", 
                          RowBox[{RowBox[{"{", "e", "}"}], ",", " ", RowBox[
                          {"{", "}"}]}], "}"}]}]}], "\n", "        ", "}"}], 
                          ",", "\n", "      ", "1"}], "\n", "      ", "]"}], 
                          ",", " ", "\n", "    ", "pos"}], "\n", "    ", 
                        "]"}]}]}], "CodeInput"]}, Open]]}, Open]]}, Closed]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]ReplaceSequence\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]treeReplaceSequence\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treeReplaceSequence", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"treeReplaceSequence", "[", "\n", 
                       "  ", RowBox[{"head_", ",", "\n", "  ", "obj_", ",", 
                         "\n", "  ", "list_", ",", "  ", "\n", "  ", RowBox[
                          {"pos", ":", RowBox[{RowBox[{"{", "__Integer", 
                          "}"}], "|", "_Integer"}]}], ",", "\n", "  ", 
                         "nodes_"}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                     RowBox[{"Module", "[", "\n", "    ", RowBox[
                        {RowBox[{"{", "\n", "      ", RowBox[{"c", ",", " ", 
                          "\n", "      ", "$failed", ",", " ", "\n", 
                          "      ", RowBox[{"ps", "=", RowBox[{"treePosSpec", 
                          "[", "pos", "]"}]}], ",", "\n", "      ", RowBox[
                          {"n", "=", RowBox[{"Replace", "[", RowBox[{"nodes", 
                          ",", " ", RowBox[{RowBox[{"TreeNode", "[", RowBox[
                          {"d_", ",", " ", "l_"}], "]"}], "\[RuleDelayed]", 
                          RowBox[{"{", RowBox[{"d", ",", " ", "l"}], "}"}]}], 
                          ",", " ", "1"}], "]"}]}]}], "\n", "      ", "}"}], 
                         ",", "\n", "    ", RowBox[{RowBox[{"c", "=", "\n", 
                          "      ", RowBox[{"Quiet", "[", "\n", "        ", 
                          RowBox[{RowBox[{"Check", "[", "\n", "          ", 
                          RowBox[{RowBox[{"ReplacePart", "[", RowBox[{"list", 
                          ",", " ", "\n", "            ", RowBox[{"With", 
                          "[", RowBox[{RowBox[{"{", RowBox[{"pl", "=", RowBox[
                          {"ConstantArray", "[", RowBox[{"0", ",", " ", 
                          RowBox[{RowBox[{"Length", "@", "ps"}], "-", 
                          "1"}]}], "]"}]}], "}"}], ",", "\n", 
                          "              ", RowBox[{"MapIndexed", "[", RowBox[
                          {RowBox[{RowBox[{RowBox[{"ps", "+", RowBox[{
                          "Append", "[", RowBox[{"pl", ",", " ", RowBox[
                          {"#2", "[", RowBox[{"[", "1", "]"}], "]"}]}], 
                          "]"}]}], "\[Rule]", "#"}], "&"}], ",", " ", "n"}], 
                          "]"}]}], "\n", "              ", "]"}]}], "\n", 
                          "            ", "]"}], ",", "\n", "          ", 
                          "$failed", ",", "\n", "          ", RowBox[
                          {"Insert", "::", "ins"}]}], "\n", "          ", 
                          "]"}], ",", "\n", "  ", "      ", RowBox[{"Insert", 
                          "::", "ins"}]}], "\n", "        ", "]"}]}], ";", 
                          "\n", "    ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"c", "===", "$failed"}], ",", "\n", "      ", 
                          RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[
                          {RowBox[{"p1", "=", RowBox[{"Most", "@", RowBox[
                          {"Flatten", "@", RowBox[{"{", "pos", "}"}]}]}]}], 
                          ",", " ", RowBox[{"p2", "=", RowBox[{"Last", "@", 
                          RowBox[{"Flatten", "@", RowBox[{"{", "pos", 
                          "}"}]}]}]}]}], "}"}], ",", "\n", "  ", "      ", 
                          RowBox[{RowBox[{"Message", "[", RowBox[{RowBox[
                          {"head", "::", "norep"}], ",", " ", "p2", ",", " ", 
                          "p1"}], "]"}], ";", "\n", "  ", "      ", RowBox[
                          {"Failure", "[", RowBox[{"\"NoReplacement\"", ",", 
                          " ", RowBox[{"<|", "\n", "  ", "        ", RowBox[
                          {RowBox[{"\"MessageTemplate\"", ":>", RowBox[
                          {"head", "::", "norep"}]}], ",", "\n", 
                          "          ", RowBox[{"\"MessageParameters\"", 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{"p2", ",", 
                          " ", "p1", ",", " ", "obj"}], "}"}]}]}], "\n", 
                          "  ", "        ", "|>"}]}], "\n", "  ", "        ", 
                          "]"}]}]}], "\n", "        ", "]"}], ",", "\n", 
                          "      ", "c"}], "\n", "      ", "]"}]}]}], "\n", 
                       "    ", "]"}]}], ";"}]}], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TreeReplace\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreeReplaceSequence", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TreeReplace", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", "  ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "__Integer", "}"}], "|", 
                          "_Integer"}]}], ",", "\n", "  ", RowBox[{"nodes", 
                          ":", RowBox[{"{", RowBox[{RowBox[{"(", RowBox[
                          {RowBox[{"{", RowBox[{"_List", ",", " ", "_List"}], 
                          "}"}], "|", RowBox[{"_TreeNode", "?", 
                          "TreeNodeQ"}]}], ")"}], ".."}], "}"}]}]}], "\n", 
                       "  ", "]"}], ":=", "\n", "  ", RowBox[{"With", "[", 
                       RowBox[{RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeReplaceSequence", "[", RowBox[{"Tree", ",", 
                          " ", "n", ",", " ", "t", ",", " ", "pos", ",", " ", 
                          "nodes"}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "l"}], ",", " ", RowBox[{"newTree", "[", "l", 
                          "]"}], ",", " ", "l"}], "]"}]}], "\n", "    ", 
                       "]"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                      {"TreeReplace", "[", "\n", "  ", RowBox[{RowBox[
                          {"n", ":", RowBox[{"TreeNode", "[", RowBox[{"d_", 
                          ",", " ", "t_"}], "]"}]}], ",", " ", "\n", "  ", 
                         RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "__Integer", "}"}], "|", "_Integer"}]}], ",", "\n", 
                         "  ", RowBox[{"nodes", ":", RowBox[{"{", RowBox[
                          {RowBox[{"(", RowBox[{RowBox[{"{", RowBox[{"_List", 
                          ",", " ", "_List"}], "}"}], "|", RowBox[
                          {"_TreeNode", "?", "TreeNodeQ"}]}], ")"}], ".."}], 
                          "}"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                     RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"l", 
                          "=", RowBox[{"treeReplaceSequence", "[", RowBox[
                          {"TreeNode", ",", " ", "n", ",", " ", RowBox[{"{", 
                          RowBox[{"d", ",", " ", "t"}], "}"}], ",", " ", 
                          "pos", ",", " ", "nodes"}], "]"}]}], "}"}], ",", 
                         "\n", "    ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"ListQ", "@", "l"}], ",", " ", RowBox[{"newNode", 
                          "[", RowBox[{"d", ",", " ", "l"}], "]"}], ",", " ", 
                          "l"}], "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{"TreeReplaceSequence", "[", "\n", "  ", 
                     RowBox[{RowBox[{"n", ":", RowBox[{"_Tree", "|", 
                          "_TreeNode"}]}], ",", " ", "\n", "  ", RowBox[
                        {"pos", ":", RowBox[{RowBox[{"{", "__Integer", "}"}], 
                          "|", "_Integer"}]}], ",", "\n", "  ", "data_"}], 
                     "\n", "  ", "]"}], ":=", "\n", "  ", RowBox[
                    {"TreeReplaceSequence", "[", RowBox[{"n", ",", " ", "\n", 
                       "    ", RowBox[{"Replace", "[", RowBox[{"data", ",", 
                          " ", "\n", "      ", RowBox[{RowBox[{"e", ":", 
                          RowBox[{"Except", "[", RowBox[{RowBox[{"{", RowBox[
                          {"_List", ",", " ", "_List"}], "}"}], "|", RowBox[
                          {"_TreeNode", "?", "TreeNodeQ"}]}], "]"}]}], ":>", 
                          RowBox[{"{", RowBox[{RowBox[{"{", "e", "}"}], ",", 
                          " ", RowBox[{"{", "}"}]}], "}"}]}], ",", "\n", 
                          "      ", "1"}], "\n", "      ", "]"}], ",", " ", 
                       "\n", "    ", "pos"}], "\n", "    ", "]"}]}]}], 
               "CodeInput"]}, Closed]]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]PopSequence\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]treePopSequence\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"treePopSequence", "[", "\n", "  ", 
                      RowBox[{"head_", ",", "\n", "  ", "obj_", ",", "\n", 
                        "  ", "list_", ",", " ", "\n", "  ", RowBox[{"pos", 
                          ":", RowBox[{"{", RowBox[{"p___Integer", ",", " ", 
                          "which_"}], "}"}]}]}], "\n", "  ", "]"}], ":=", 
                    "\n", "  ", RowBox[{"Module", "[", "\n", "    ", 
                      RowBox[{RowBox[{"{", "\n", "      ", RowBox[{RowBox[
                          {"ps", "=", RowBox[{"With", "[", RowBox[{RowBox[
                          {"{", RowBox[{"ps1", "=", RowBox[{"treePosSpec", 
                          "[", RowBox[{"{", "p", "}"}], "]"}]}], "}"}], ",", 
                          " ", RowBox[{RowBox[{RowBox[{"Append", "[", RowBox[
                          {"ps1", ",", " ", "#"}], "]"}], "&"}], "/@", 
                          "which"}]}], "]"}]}], ",", "\n", "      ", 
                          "$failed", ",", "\n", "      ", "c"}], "\n", 
                          "      ", "}"}], ",", "\n", "    ", RowBox[
                         {RowBox[{"c", "=", "\n", "      ", RowBox[{"Quiet", 
                          "[", "\n", "        ", RowBox[{RowBox[{"Check", 
                          "[", RowBox[{RowBox[{"Extract", "[", RowBox[
                          {"list", ",", " ", "ps"}], "]"}], ",", " ", "\n", 
                          "          ", "$failed", ",", "\n", "  ", 
                          "        ", RowBox[{"Part", "::", "partw"}]}], 
                          "]"}], ",", " ", "\n", "  ", "      ", RowBox[
                          {"Part", "::", "partw"}]}], "\n", "        ", 
                          "]"}]}], ";", "\n", "    ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"c", "=!=", "$failed"}], ",", "\n", 
                          "      ", RowBox[{"{", RowBox[{"c", ",", " ", 
                          RowBox[{"Delete", "[", RowBox[{"list", ",", " ", 
                          "ps"}], "]"}]}], "}"}], ",", "\n", "      ", 
                          RowBox[{RowBox[{"Message", "[", RowBox[{RowBox[
                          {"head", "::", "nopop"}], ",", " ", "pos"}], "]"}], 
                          ";", "\n", "      ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoPop\"", ",", " ", RowBox[{"<|", "\n", 
                          "        ", RowBox[{RowBox[{"\"MessageTemplate\"", 
                          "\[RuleDelayed]", RowBox[{"head", "::", 
                          "nopop"}]}], ",", "\n", "        ", RowBox[
                          {"\"MessageParameters\"", "\[RuleDelayed]", RowBox[
                          {"{", RowBox[{"pos", ",", " ", "obj"}], "}"}]}]}], 
                          "\n", "        ", "|>"}]}], "\n", "        ", 
                          "]"}]}]}], "\n", "      ", "]"}]}]}], "\n", "    ", 
                      "]"}]}], ";"}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreePopSequence\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreePopSequence", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TreePopSequence", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", RowBox[{"___Integer", ",", 
                          " ", RowBox[{"{", "__Integer", "}"}]}], "}"}], "|", 
                          RowBox[{"{", "__Integer", "}"}]}]}]}], "\n", "  ", 
                       "]"}], ":=", "\n", "  ", RowBox[{"With", "[", 
                       RowBox[{RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treePopSequence", "[", RowBox[{"Tree", ",", " ", 
                          "n", ",", " ", "t", ",", " ", "pos"}], "]"}]}], 
                          "}"}], ",", "\n", "    ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"ListQ", "@", "l"}], ",", " ", 
                          RowBox[{"{", RowBox[{RowBox[{"newNode", "@@@", 
                          RowBox[{"l", "[", RowBox[{"[", "1", "]"}], "]"}]}], 
                          ",", " ", RowBox[{"newTree", "[", RowBox[{"l", "[", 
                          RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}], 
                          ",", " ", "l"}], "]"}]}], "\n", "    ", "]"}]}], 
                   ";"}], "\n", RowBox[{RowBox[{"TreePopSequence", "[", "\n", 
                     "  ", RowBox[{RowBox[{"n", ":", RowBox[{"TreeNode", "[", 
                          RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", 
                       "\n", "  ", RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          RowBox[{"___Integer", ",", " ", RowBox[{"{", 
                          "__Integer", "}"}]}], "}"}], "|", RowBox[{"{", 
                          "__Integer", "}"}]}]}]}], "\n", "  ", "]"}], ":=", 
                   "\n", "  ", RowBox[{"With", "[", RowBox[{RowBox[{"{", 
                         RowBox[{"l", "=", RowBox[{"treePopSequence", "[", 
                          RowBox[{"TreeNode", ",", " ", "n", ",", " ", RowBox[
                          {"{", RowBox[{"d", ",", " ", "t"}], "}"}], ",", 
                          " ", "pos"}], "]"}]}], "}"}], ",", "\n", "    ", 
                       RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "l"}], ",", " ", RowBox[{"{", RowBox[{RowBox[
                          {"newNode", "@@@", RowBox[{"l", "[", RowBox[{"[", 
                          "1", "]"}], "]"}]}], ",", " ", RowBox[{"newNode", 
                          "@@", RowBox[{"l", "[", RowBox[{"[", "2", "]"}], 
                          "]"}]}]}], "}"}], ",", " ", "l"}], "]"}]}], "\n", 
                     "    ", "]"}]}]}], "CodeInput"]}, Open]]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]TreeWalk\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\nWe\[CloseCurlyQuote]ll provide like three events?\n\t- \
\[OpenCurlyDoubleQuote]EnterNode\[CloseCurlyDoubleQuote]\n\t- \
\[OpenCurlyDoubleQuote]ProcessNode\[CloseCurlyDoubleQuote]\n\t- \
\[OpenCurlyDoubleQuote]ExitNode\[CloseCurlyDoubleQuote]\n\nThese\
\[CloseCurlyQuote]ll take the node data and a node children as a \
list\nEnterNode will return a modified node\nProcessNode will take the result \
from EnterNode\nExitNode will take the result from ProcessNode and the \
original node?\n\t\n\[RightFloor]", "Text", Evaluatable -> True], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]walkTreeDF\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tSimple depth-first traversal of a \
node\n\[RightFloor]", "Text", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"walkTreeDF", "[", RowBox[{"root_", 
                        ",", " ", RowBox[{"handlers", ":", RowBox[{"{", 
                          RowBox[{"body_", ",", " ", "enter_", ",", " ", 
                          "exit_"}], "}"}]}]}], "]"}], ":=", "  ", "\n", 
                    "  ", RowBox[{"Module", "[", RowBox[{RowBox[{"{", 
                          RowBox[{"node", ",", " ", "children", ",", " ", 
                          "res"}], "}"}], ",", "\n", "    ", RowBox[
                         {RowBox[{"node", " ", "=", " ", RowBox[{"enter", 
                          "[", "root", "]"}]}], ";", "\n", "    ", RowBox[
                          {"res", "=", "\n", "      ", RowBox[{"body", "[", 
                          "\n", "        ", RowBox[{"{", "\n", "          ", 
                          RowBox[{RowBox[{"node", "[", RowBox[{"[", "1", 
                          "]"}], "]"}], ",", "\n", "          ", RowBox[
                          {RowBox[{RowBox[{"walkTreeDF", "[", RowBox[{"#", 
                          ",", " ", "handlers"}], "]"}], "&"}], "/@", RowBox[
                          {"node", "[", RowBox[{"[", "2", "]"}], "]"}]}]}], 
                          "\n", "          ", "}"}], "\n", "        ", 
                          "]"}]}], ";", "\n", "    ", RowBox[{"exit", "[", 
                          RowBox[{"res", ",", " ", "node"}], "]"}]}]}], "\n", 
                      "    ", "]"}]}], ";"}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]walkTreeBF\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"walkTreeBF", "[", RowBox[{"root_", 
                        ",", " ", RowBox[{"handlers", ":", RowBox[{"{", 
                          RowBox[{"body_", ",", " ", "enter_", ",", " ", 
                          "exit_"}], "}"}]}]}], "]"}], ":=", "  ", "\n", 
                    "    ", RowBox[{"Module", "[", "\n", "      ", RowBox[
                       {RowBox[{"{", "\n", "        ", RowBox[{RowBox[
                          {"node", " ", "=", " ", "root"}], ",", " ", "mod", 
                          ",", "\n", "        ", "children", ",", " ", "\n", 
                          "        ", "res", ",", "\n", "        ", RowBox[
                          {"q", " ", "=", " ", RowBox[{"Queue", "[", 
                          "]"}]}]}], "\n", "        ", "}"}], ",", "\n", 
                        "      ", RowBox[{RowBox[{"Reap", "[", "\n", 
                          "        ", RowBox[{RowBox[{RowBox[{"q", " ", "=", 
                          " ", RowBox[{"QueuePush", "[", RowBox[{"q", ",", 
                          " ", "node"}], "]"}]}], ";", "\n", "        ", 
                          RowBox[{RowBox[{"Reap", "[", "\n", "          ", 
                          RowBox[{RowBox[{"While", "[", RowBox[{RowBox[{"!", 
                          RowBox[{"QueueEmptyQ", "[", "q", "]"}]}], ",", 
                          "\n", "            ", RowBox[{RowBox[{RowBox[{"{", 
                          RowBox[{"node", ",", " ", "q"}], "}"}], " ", "=", 
                          " ", RowBox[{"QueuePop", "[", "q", "]"}]}], ";", 
                          "\n", "            ", RowBox[{"mod", " ", "=", " ", 
                          RowBox[{"enter", "@", "node"}]}], ";", "\n", 
                          "            ", RowBox[{"children", " ", "=", " ", 
                          RowBox[{"mod", "[", RowBox[{"[", "2", "]"}], 
                          "]"}]}], ";", "\n", "            ", RowBox[{"If", 
                          "[", RowBox[{RowBox[{"!", RowBox[{"ListQ", "@", 
                          "children"}]}], ",", "\n", "              ", RowBox[
                          {"PackageRaiseException", "[", "\n", 
                          "                ", RowBox[{"Automatic", ",", "\n", 
                          "                ", "\"\\\"EnterNode\\\" must \
return a List of Length 2 with \\\na List as its second argument\""}], "\n", 
                          "                ", "]"}]}], "\n", 
                          "              ", "]"}], ";", "\n", "            ", 
                          RowBox[{"q", " ", "=", " ", RowBox[{"QueueExtend", 
                          "[", RowBox[{"q", ",", " ", "children"}], "]"}]}], 
                          ";", "\n", "            ", RowBox[{"res", " ", "=", 
                          " ", RowBox[{"body", "[", "mod", "]"}]}], ";", 
                          "\n", "            ", RowBox[{"Sow", "[", RowBox[
                          {RowBox[{"exit", "[", RowBox[{"res", ",", " ", 
                          "node"}], "]"}], ",", " ", "\"tmpResults\""}], 
                          "]"}]}]}], "\n", "            ", "]"}], ",", "\n", 
                          "          ", "\"tmpResults\""}], "\n", 
                          "          ", "]"}], "[", RowBox[{"[", RowBox[{"2", 
                          ",", " ", "1"}], "]"}], "]"}]}], ",", "\n", 
                          "        ", "\"WalkTree\""}], "\n", "        ", 
                          "]"}], "[", RowBox[{"[", "2", "]"}], "]"}]}], "\n", 
                      "    ", "]"}]}], ";"}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TreeWalk\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell[CellGroupData[{Cell[
                  "\[LeftCeiling]$TreeTraversalFunctions\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[RowBox[{RowBox[{"$TreeTraversalFunctions", "=", 
                       "\n", "  ", RowBox[{"<|", "\n", "    ", RowBox[
                          {RowBox[{"\"DepthFirst\"", "\[Rule]", RowBox[
                          {"<|", "\n", "      ", RowBox[{RowBox[
                          {"\"EnterNode\"", "->", RowBox[{"(", RowBox[{"#", 
                          "&"}], ")"}]}], ",", "\n", "      ", RowBox[
                          {"\"ExitNode\"", "->", RowBox[{"(", RowBox[{"#", 
                          "&"}], ")"}]}], ",", "\n", "      ", RowBox[
                          {"\"ProcessNode\"", "->", RowBox[{"(", RowBox[{"#", 
                          "&"}], ")"}]}]}], "\n", "      ", "|>"}]}], ",", 
                          "\n", "    ", RowBox[{"\"BreadthFirst\"", 
                          "\[Rule]", RowBox[{"<|", "\n", "      ", RowBox[
                          {RowBox[{"\"EnterNode\"", "->", RowBox[{"(", RowBox[
                          {"#", "&"}], ")"}]}], ",", "\n", "      ", RowBox[
                          {"\"ExitNode\"", "\[Rule]", RowBox[{"(", RowBox[
                          {RowBox[{"Sow", "[", RowBox[{"#", ",", " ", 
                          "\"WalkTree\""}], "]"}], "&"}], ")"}]}], ",", "\n", 
                          "      ", RowBox[{"\"ProcessNode\"", "\[Rule]", 
                          RowBox[{"(", RowBox[{"#", "&"}], ")"}]}]}], "\n", 
                          "      ", "|>"}]}]}], "\n", "    ", "|>"}]}], 
                     ";"}]], "CodeInput"]}, Open]], Cell[CellGroupData[
                {Cell["\[LeftCeiling]iTreeWalk\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", "[", 
                          "iTreeWalk", "]"}], "=", "\n", "  ", RowBox[
                         {"{", "\n", "    ", RowBox[{"\"TraversalFunction\"", 
                          "\[Rule]", "\"DepthFirst\""}], "\n", "    ", 
                          "}"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                         {"iTreeWalk", "[", RowBox[{"node_", ",", " ", 
                          "visitFunctions_", ",", "\n", "  ", RowBox[{"ops", 
                          ":", RowBox[{"OptionsPattern", "[", "]"}]}]}], 
                          "\n", "  ", "]"}], ":=", "\n", "  ", RowBox[
                         {"Module", "[", "\n", "    ", RowBox[{RowBox[{"{", 
                          "\n", "      ", RowBox[{"mode", ",", " ", "enter", 
                          ",", " ", "exit", ",", " ", "body", ",", "\n", 
                          "      ", "funcs", ",", " ", "res", ",", " ", 
                          "tno", ",", " ", "filt"}], "\n", "      ", "}"}], 
                          ",", "\n", "    ", RowBox[{RowBox[{"filt", " ", 
                          "=", " ", RowBox[{"FilterRules", "[", RowBox[
                          {RowBox[{"{", "ops", "}"}], ",", " ", RowBox[
                          {"Options", "[", "iTreeWalk", "]"}]}], "]"}]}], 
                          ";", "\n", "    ", RowBox[{"mode", "=", "\n", 
                          "      ", RowBox[{"Replace", "[", "\n", "        ", 
                          RowBox[{RowBox[{"OptionValue", "[", RowBox[
                          {"iTreeWalk", ",", " ", "\n", "          ", "filt", 
                          ",", " ", "\n", "          ", 
                          "\"TraversalFunction\""}], "\n", "  ", "        ", 
                          "]"}], ",", "\n", "  ", "      ", RowBox[{"{", 
                          "\n", "  ", "        ", RowBox[{RowBox[
                          {"\"BreadthFirst\"", "->", "walkTreeBF"}], ",", 
                          "\n", "          ", RowBox[{"\"DepthFirst\"", "->", 
                          "walkTreeDF"}]}], "\n", "          ", "}"}]}], 
                          "\n", "        ", "]"}]}], ";", "\n", "    ", 
                          RowBox[{"funcs", " ", "=", " ", "\n", "      ", 
                          RowBox[{"Lookup", "[", RowBox[{
                          "$TreeTraversalFunctions", ",", " ", "mode", ",", 
                          " ", RowBox[{"$TreeTraversalFunctions", "[", 
                          "\"DepthFirst\"", "]"}]}], "]"}]}], ";", "\n", 
                          "    ", RowBox[{"enter", "=", RowBox[{"Lookup", 
                          "[", RowBox[{"visitFunctions", ",", " ", 
                          "\"EnterNode\"", ",", "   ", RowBox[{"funcs", "[", 
                          "\"EnterNode\"", "]"}]}], "]"}]}], ";", "\n", 
                          "    ", RowBox[{"exit", " ", "=", RowBox[{"Lookup", 
                          "[", RowBox[{"visitFunctions", ",", " ", 
                          "\"ExitNode\"", ",", "    ", RowBox[{"funcs", "[", 
                          "\"ExitNode\"", "]"}]}], "]"}]}], ";", "\n", 
                          "    ", RowBox[{"body", " ", "=", RowBox[{"Lookup", 
                          "[", RowBox[{"visitFunctions", ",", " ", 
                          "\"ProcessNode\"", ",", " ", RowBox[{"funcs", "[", 
                          "\"ProcessNode\"", "]"}]}], "]"}]}], ";", "\n", 
                          "    ", RowBox[{"res", " ", "=", " ", RowBox[
                          {"mode", "[", RowBox[{"node", ",", " ", RowBox[
                          {"{", RowBox[{"body", ",", " ", "enter", ",", " ", 
                          "exit"}], "}"}]}], "]"}]}], ";", "\n", "    ", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "res"}], ",", "\n", "      ", RowBox[{RowBox[
                          {"res", " ", "=", " ", RowBox[{"Tree", "[", "res", 
                          "]"}]}], ";", "\n", "      ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"TreeQ", "[", "res", "]"}], ",", 
                          " ", "res", ",", " ", RowBox[{"res", "[", RowBox[
                          {"[", "1", "]"}], "]"}]}], "]"}]}], ",", "\n", 
                          "      ", "res"}], "\n", "      ", "]"}]}]}], "\n", 
                          "    ", "]"}]}], ";"}]}], "CodeInput"]}, Open]], 
              Cell[CellGroupData[{Cell["\[LeftCeiling]TreeWalk\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", "[", 
                          "TreeWalk", "]"}], "=", "\n", "  ", RowBox[
                         {"Options", "[", "iTreeWalk", "]"}]}], ";"}], "\n", 
                    RowBox[{RowBox[{RowBox[{"TreeWalk", "[", RowBox[
                          {RowBox[{"Tree", "[", "t_", "]"}], ",", " ", 
                          "visitFunctions_", ",", " ", RowBox[{"ops", ":", 
                          RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], 
                        ":=", "\n", "  ", RowBox[{"iTreeWalk", "[", RowBox[
                          {"t", ",", " ", "visitFunctions", ",", " ", 
                          "ops"}], "]"}]}], ";"}], "\n", RowBox[
                     {RowBox[{RowBox[{"TreeWalk", "[", RowBox[{RowBox[
                          {"TreeNode", "[", RowBox[{"d_", ",", " ", "t_"}], 
                          "]"}], ",", " ", "visitFunctions_", ",", " ", 
                          RowBox[{"ops", ":", RowBox[{"OptionsPattern", "[", 
                          "]"}]}]}], "]"}], ":=", "\n", "  ", RowBox[
                         {"iTreeWalk", "[", RowBox[{RowBox[{"{", RowBox[
                          {"d", ",", " ", "t"}], "}"}], ",", " ", 
                          "visitFunctions", ",", " ", "ops"}], "]"}]}], 
                      ";"}]}], "CodeInput"]}, Open]]}, Closed]]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Formatting\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]Tree\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"Format", "[", RowBox[{RowBox[
                          {"q_Tree", "?", "TreeQ"}], ",", " ", 
                         "StandardForm"}], "]"}], ":=", "\n", "  ", 
                     RowBox[{"RawBoxes", "@", "\n", "    ", RowBox[
                        {"BoxForm`ArrangeSummaryBox", "[", "\n", "      ", 
                         RowBox[{"Tree", ",", "\n", "      ", "q", ",", "\n", 
                          "      ", "None", ",", "\n", "      ", RowBox[
                          {"{", "\n", "        ", RowBox[{RowBox[
                          {"BoxForm`MakeSummaryItem", "[", "\n", 
                          "          ", RowBox[{RowBox[{"{", "\n", 
                          "            ", RowBox[{"\"Root:\"", ",", " ", 
                          "\n", "              ", RowBox[{"Quiet", "@", 
                          RowBox[{"Check", "[", RowBox[{RowBox[{"TreeData", 
                          "[", "q", "]"}], ",", " ", "None", ",", " ", RowBox[
                          {"Tree", "::", "nodata"}]}], "]"}]}]}], "\n", 
                          "            ", "}"}], ",", " ", "\n", 
                          "          ", "StandardForm"}], "\n", "          ", 
                          "]"}], ",", "\n", "        ", RowBox[
                          {"BoxForm`MakeSummaryItem", "[", "\n", 
                          "          ", RowBox[{RowBox[{"{", "\n", 
                          "            ", RowBox[{"\"Children:\"", ",", " ", 
                          "\n", "              ", RowBox[{"Quiet", "@", 
                          RowBox[{"Check", "[", RowBox[{RowBox[{
                          "TreeChildCount", "[", "q", "]"}], ",", " ", "0", 
                          ",", " ", RowBox[{"Tree", "::", "nochild"}]}], 
                          "]"}]}]}], "\n", "            ", "}"}], ",", " ", 
                          "\n", "          ", "StandardForm"}], "\n", 
                          "          ", "]"}]}], "\n", "        ", "}"}], 
                          ",", "\n", "      ", RowBox[{"{", "}"}], ",", "\n", 
                          "      ", "StandardForm"}], "\n", "      ", 
                         "]"}]}]}], ";"}], "\n", RowBox[{RowBox[{"Format", 
                     "[", RowBox[{RowBox[{"q_Tree", "?", "Tree"}], ",", " ", 
                       "TextForm"}], "]"}], ":=", "\n", "  ", 
                   "\"Tree[<>]\""}]}], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]Node\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"Format", "[", RowBox[{RowBox[
                          {"q_TreeNode", "?", "TreeNodeQ"}], ",", " ", 
                         "StandardForm"}], "]"}], ":=", "\n", "  ", 
                     RowBox[{"RawBoxes", "@", "\n", "    ", RowBox[
                        {"BoxForm`ArrangeSummaryBox", "[", "\n", "      ", 
                         RowBox[{"TreeNode", ",", "\n", "      ", "q", ",", 
                          "\n", "      ", "None", ",", "\n", "      ", 
                          RowBox[{"{", "\n", "        ", RowBox[{RowBox[
                          {"BoxForm`MakeSummaryItem", "[", "\n", 
                          "          ", RowBox[{RowBox[{"{", "\n", 
                          "            ", RowBox[{"\"Root:\"", ",", " ", 
                          "\n", "              ", RowBox[{"Quiet", "@", "\n", 
                          "                ", RowBox[{"Check", "[", RowBox[
                          {RowBox[{"TreeData", "[", "q", "]"}], ",", " ", 
                          "None", ",", " ", RowBox[{"TreeNode", "::", 
                          "nodata"}]}], "]"}]}]}], "\n", "            ", 
                          "}"}], ",", " ", "\n", "          ", 
                          "StandardForm"}], "\n", "          ", "]"}], ",", 
                          "\n", "        ", RowBox[{
                          "BoxForm`MakeSummaryItem", "[", "\n", "          ", 
                          RowBox[{RowBox[{"{", "\n", "            ", RowBox[
                          {"\"Children:\"", ",", " ", "\n", "              ", 
                          RowBox[{"Quiet", "@", RowBox[{"Check", "[", RowBox[
                          {RowBox[{"TreeChildCount", "[", "q", "]"}], ",", 
                          " ", "0", ",", " ", RowBox[{"TreeNode", "::", 
                          "nochild"}]}], "]"}]}]}], "\n", "            ", 
                          "}"}], ",", " ", "\n", "          ", 
                          "StandardForm"}], "\n", "          ", "]"}]}], 
                          "\n", "        ", "}"}], ",", "\n", "      ", 
                          RowBox[{"{", "}"}], ",", "\n", "      ", 
                          "StandardForm"}], "\n", "      ", "]"}]}]}], ";"}], 
                 "\n", RowBox[{RowBox[{"Format", "[", RowBox[{RowBox[
                        {"q_TreeNode", "?", "TreeNodeQ"}], ",", " ", 
                       "TextForm"}], "]"}], ":=", "\n", "  ", 
                   "\"TreeNode[<>]\""}]}], "CodeInput"]}, Closed]]}, Open]]}, 
       Open]], Cell[BoxData[RowBox[{RowBox[{"End", "[", "]"}], ";"}]], 
      "InputSection"]}, Open]], Cell["", "SectionSeparator"]}, 
 WindowSize -> {808, 755}, WindowMargins -> {{316, Automatic}, 
   {Automatic, 50}}, TaggingRules -> 
  {"UUIDButtons" -> 
    {"Active" -> {"Button-89ffd2c3-ec41-4179-a9b1-8e28670bca2c" -> False, 
       "Button-ca46e5e0-4fd1-47e8-8cf6-72998922b757" -> False, 
       "Button-a6d68254-3684-4d32-83fc-e5ef6f443930" -> False}}}, 
 FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
 StyleDefinitions -> FrontEnd`FileName[{"BTools"}, "CodePackage.nb", 
   CharacterEncoding -> "UTF-8"]]
