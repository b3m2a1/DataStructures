Notebook[{Cell[CellGroupData[{Cell["Tree", "CodeSection"], 
     Cell[BoxData[RowBox[{RowBox[{RowBox[{"Tree", "::", "usage"}], "=", 
           "\"A Tree data structure\""}], ";"}]], "CodeInput"], 
     Cell[BoxData[RowBox[{RowBox[{RowBox[{"TreeNode", "::", "usage"}], "=", 
           "\"A TreeNode object which exists as a symbolic wrapper on node \
data\""}], ";"}]], "CodeInput"], 
     Cell[BoxData[{RowBox[{RowBox[{RowBox[{"TreeData", "::", "usage"}], "=", 
            "\"Extracts data from a node\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreeChildren", "::", "usage"}], "=", 
            "\"Pulls children out of a node\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreeChildCount", "::", "usage"}], "=", 
            "\"Counts the number of leaves in the tree\""}], ";"}]}], 
      "CodeInput"], Cell[BoxData[
       {RowBox[{RowBox[{RowBox[{"TreeInsert", "::", "usage"}], "=", 
            "\"Inserts a node into a tree\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreePop", "::", "usage"}], "=", 
            "\"Pops a node (and children) from a tree\""}], ";"}]}], 
      "CodeInput"], Cell[BoxData[
       {RowBox[{RowBox[{RowBox[{"TreeInsertData", "::", "usage"}], "=", 
            "\"Inserts into the data field of each node\""}], ";"}], "\n", 
        RowBox[{RowBox[{RowBox[{"TreePopData", "::", "usage"}], "=", 
            "\"Deletes from the data field of each node\""}], ";"}]}], 
      "CodeInput"], Cell[BoxData[RowBox[
        {RowBox[{RowBox[{"TreeWalk", "::", "usage"}], "=", 
           "\"Walks a tree\""}], ";"}]], "CodeInput"], 
     Cell[CellGroupData[
       {Cell[BoxData[RowBox[{RowBox[{"Begin", "[", "\"`Private`\"", "]"}], 
            ";"}]], "InputSection"], Cell["\[LeftCeiling]\n\tWe\
\[CloseCurlyQuote]ll use a linked-list implementation to get efficient \
sub-tree-ing\n\tThis will feel rather like our Stack implementation, \
honestly... but rather than introducing pushes and pops \
we\[CloseCurlyQuote]ll introduce tree insertion, deletion, rearrangement, and \
walking\n\[RightFloor]", "Text", Evaluatable -> True]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Tree\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Constructor\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]Tree\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{"Tree", "//", "ClearAll"}], ";"}], 
                 "\[IndentingNewLine]", RowBox[{RowBox[{RowBox[{"Tree", "[", 
                       "]"}], ":=", RowBox[{"Tree", "[", RowBox[{"{", 
                         RowBox[{RowBox[{"{", "}"}], ",", " ", RowBox[{"{", 
                          "}"}]}], "}"}], "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{"unconstructedQ", "=", "\n", "  ", 
                     RowBox[{"Function", "[", RowBox[{"Null", ",", " ", 
                         RowBox[{"System`Private`EntryQ", "[", RowBox[
                          {"Unevaluated", "[", "#", "]"}], "]"}], ",", " ", 
                         "HoldFirst"}], "]"}]}], ";"}], 
                 "\[IndentingNewLine]", RowBox[{RowBox[{"q", ":", RowBox[
                      {RowBox[{"Tree", "[", "l_List", "]"}], "?", 
                       "unconstructedQ"}]}], ":=", "\[IndentingNewLine]", 
                   RowBox[{"System`Private`SetNoEntry", "[", RowBox[
                      {"Unevaluated", "@", "q"}], "]"}]}]}], "CodeInput"], 
              Cell[BoxData[RowBox[{RowBox[{"newTree", "[", "list_", "]"}], 
                  ":=", "\n", "  ", RowBox[{"System`Private`SetNoEntry", "@", 
                    "\n", "    ", RowBox[{"Unevaluated", "[", RowBox[
                       {"Tree", "[", "list", "]"}], "]"}]}]}]], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreeNode\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreeNode", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"TreeNode", "[", "]"}], ":=", RowBox[
                      {"TreeNode", "[", RowBox[{RowBox[{"{", "}"}], RowBox[
                          {"(*", " ", RowBox[{"data", " ", "field"}], " ", 
                          "*)"}], ",", " ", RowBox[{"{", "}"}]}], RowBox[
                        {"(*", RowBox[{"children", " ", "field"}], " ", 
                         "*)"}], "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{"n", ":", RowBox[{RowBox[{"TreeNode", "[", 
                         RowBox[{"data_List", ",", " ", "children_List"}], 
                         "]"}], "?", "unconstructedQ"}]}], ":=", 
                   "\[IndentingNewLine]", RowBox[
                    {"System`Private`SetNoEntry", "[", RowBox[{"Unevaluated", 
                       "@", "n"}], "]"}]}], "\n", RowBox[{RowBox[{"newNode", 
                     "[", RowBox[{"data_", ",", " ", "children_"}], "]"}], 
                   ":=", "\n", "  ", RowBox[{"System`Private`SetNoEntry", 
                     "@", "\n", "    ", RowBox[{"Unevaluated", "[", RowBox[
                        {"TreeNode", "[", RowBox[{"data", ",", " ", 
                          "children"}], "]"}], "]"}]}]}]}], "CodeInput"]}, 
             Open]]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]Destructor Operations\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"(*", " ", RowBox[{"basic", " ", 
                   "destructors"}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{RowBox[{"TreeQ", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"TreeQ", "[", "q_Tree", "]"}], ":=", 
                     RowBox[{"System`Private`NoEntryQ", "[", "q", "]"}]}], 
                   ";"}], "\n", RowBox[{RowBox[{RowBox[{"TreeQ", "[", "_", 
                       "]"}], ":=", "False"}], ";"}]}]}]], "CodeInput"], 
           Cell[BoxData[{RowBox[{"TreeNodeQ", "//", "Clear"}], "\n", 
              RowBox[{RowBox[{RowBox[{"TreeNodeQ", "[", "q_TreeNode", "]"}], 
                  ":=", RowBox[{"System`Private`NoEntryQ", "[", "q", "]"}]}], 
                ";"}], "\n", RowBox[{RowBox[{"TreeNodeQ", "[", "_", "]"}], 
                ":=", "False"}]}], "CodeInput"]}, Closed]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]treePosSpec\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{"treePosSpec", "//", "Clear"}], "\n", 
              RowBox[{RowBox[{RowBox[{"treePosSpec", "[", RowBox[
                     {RowBox[{"{", "}"}], "|", "None"}], "]"}], ":=", "\n", 
                  "  ", RowBox[{"{", "}"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"treePosSpec", "[", RowBox[{"pos", ":", 
                      RowBox[{"{", "__Integer", "}"}]}], "]"}], ":=", "\n", 
                  "  ", RowBox[{"Prepend", "[", RowBox[{RowBox[{"Riffle", 
                        "[", RowBox[{"pos", ",", " ", "2"}], "]"}], ",", " ", 
                      "2"}], "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"treePosSpec", "[", "i_Integer", "]"}], ":=", "\n", 
                  "  ", RowBox[{"treePosSpec", "[", RowBox[{"{", "i", "}"}], 
                    "]"}]}], ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]treeHasDepth\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"treeHasDepth", "[", 
                   RowBox[{"t_", ",", " ", "posSpec_"}], "]"}], ":=", "\n", 
                 "  ", RowBox[{"Quiet", "[", RowBox[{RowBox[{"Check", "[", 
                       RowBox[{RowBox[{RowBox[{"t", "[", RowBox[{"[", RowBox[
                          {"Sequence", "@@", "posSpec"}], "]"}], "]"}], ";", 
                          "True"}], ",", " ", "False", ",", " ", RowBox[
                          {"Part", "::", "partw"}]}], "]"}], ",", " ", 
                     RowBox[{"Part", "::", "partw"}]}], "]"}]}], ";"}]], 
            "CodeInput"]}, Closed]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]Children\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True], Cell[BoxData[
             {RowBox[{RowBox[{RowBox[{"Tree", "::", "nochild"}], "=", 
                  "\"Tree doesn't have children at node `` and position ``\""}\
], ";"}], "\n", RowBox[{RowBox[{RowBox[{"TreeNode", "::", "nohild"}], "=", 
                  "\"TreeNode doesn't have children at node `` and position \
``\""}], ";"}]}], "CodeInput"], Cell[CellGroupData[
             {Cell["\[LeftCeiling]treeChildren\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treeChildren", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"treeChildren", "[", "\n", "  ", 
                       RowBox[{"head_", ",", "\n", "  ", "obj_", ",", "\n", 
                         "  ", "list_", ",", " ", "\n", "  ", RowBox[{"pos", 
                          ":", RowBox[{RowBox[{"{", "___Integer", "}"}], "|", 
                          "_Integer", "|", "None"}]}], ",", "\n", "  ", 
                         "children_"}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                     RowBox[{"Module", "[", "\n", "    ", RowBox[
                        {RowBox[{"{", "\n", "      ", RowBox[{RowBox[{"ps", 
                          "=", RowBox[{"Join", "[", RowBox[{RowBox[
                          {"treePosSpec", "[", "pos", "]"}], ",", " ", RowBox[
                          {"{", RowBox[{"2", ",", " ", "children"}], "}"}]}], 
                          "]"}]}], ",", "\n", "      ", "$failed", ",", "\n", 
                          "      ", "c"}], "\n", "      ", "}"}], ",", "\n", 
                         "    ", RowBox[{RowBox[{"c", "=", "\n", "      ", 
                          RowBox[{"Quiet", "[", "\n", "        ", RowBox[
                          {RowBox[{"Check", "[", "\n", "          ", RowBox[
                          {RowBox[{"list", "[", RowBox[{"[", RowBox[
                          {"Sequence", "@@", "ps"}], "]"}], "]"}], ",", "\n", 
                          "          ", "$failed", ",", "\n", "          ", 
                          RowBox[{"Part", "::", "partw"}]}], "]"}], ",", " ", 
                          "\n", "  ", "      ", RowBox[{"Part", "::", 
                          "partw"}]}], "\n", "        ", "]"}]}], ";", "\n", 
                          "    ", RowBox[{"If", "[", RowBox[{RowBox[{"c", 
                          "=!=", "$failed"}], ",", "\n", "      ", "c", ",", 
                          "\n", "      ", RowBox[{RowBox[{"Message", "[", 
                          RowBox[{RowBox[{"head", "::", "nochild"}], ",", 
                          " ", "pos", ",", " ", "children"}], "]"}], ";", 
                          "\n", "      ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoChild\"", ",", " ", RowBox[{"<|", "\n", 
                          "        ", RowBox[{RowBox[{"\"MessageTemplate\"", 
                          ":>", RowBox[{"head", "::", "nochild"}]}], ",", 
                          "\n", "        ", RowBox[{"\"MessageParameters\"", 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{"pos", ",", 
                          " ", "children", ",", " ", "obj"}], "}"}]}]}], 
                          "\n", "        ", "|>"}]}], "\n", "        ", 
                          "]"}]}]}], "\n", "      ", "]"}]}]}], "\n", "    ", 
                       "]"}]}], ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreeChildren\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreeChildren", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TreeChildren", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "___Integer", "}"}], "|", 
                          "_Integer"}], ":", "1"}], ",", "\n", "  ", RowBox[
                          {"children", ":", RowBox[{RowBox[{"{", 
                          "___Integer", "}"}], "|", "_Integer", "|", "_Span", 
                          "|", "All"}], ":", "All"}]}], "\n", "  ", "]"}], 
                     ":=", "\n", "  ", RowBox[{"With", "[", RowBox[
                        {RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeChildren", "[", RowBox[{"Tree", ",", " ", 
                          "n", ",", " ", "t", ",", " ", "pos", ",", " ", 
                          "children"}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"Which", "[", "\n", "      ", RowBox[
                          {RowBox[{"Not", "@", RowBox[{"ListQ", "@", "l"}]}], 
                          ",", " ", "\n", "        ", "l", ",", "\n", 
                          "      ", RowBox[{"IntegerQ", "@", "children"}], 
                          ",", "\n", "        ", RowBox[{"newNode", "@@", 
                          "l"}], ",", "\n", "      ", "True", ",", "\n", 
                          "        ", RowBox[{"newNode", "@@@", "l"}]}], 
                          "\n", "      ", "]"}]}], "\n", "    ", "]"}]}], 
                   ";"}], "\n", RowBox[{RowBox[{RowBox[{"TreeChildren", "[", 
                       "\n", "  ", RowBox[{RowBox[{"n", ":", RowBox[
                          {"TreeNode", "[", RowBox[{"d_", ",", " ", "t_"}], 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "___Integer", "}"}], "|", 
                          "_Integer"}], ":", "1"}], ",", "\n", "  ", RowBox[
                          {"children", ":", RowBox[{RowBox[{"{", 
                          "___Integer", "}"}], "|", "_Integer", "|", "_Span", 
                          "|", "All"}], ":", "All"}]}], "\n", "  ", "]"}], 
                     ":=", "\n", "  ", RowBox[{"With", "[", RowBox[
                        {RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeChildren", "[", RowBox[{"TreeNode", ",", " ", 
                          "n", ",", " ", "t", ",", " ", "pos", ",", " ", 
                          "children"}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"Which", "[", "\n", "      ", RowBox[
                          {RowBox[{"Not", "@", RowBox[{"ListQ", "@", "l"}]}], 
                          ",", " ", "\n", "        ", "l", ",", "\n", 
                          "      ", RowBox[{"IntegerQ", "@", "children"}], 
                          ",", "\n", "        ", RowBox[{"newNode", "@@", 
                          "l"}], ",", "\n", "      ", "True", ",", "\n", 
                          "        ", RowBox[{"newNode", "@@@", "l"}]}], 
                          "\n", "      ", "]"}]}], "\n", "    ", "]"}]}], 
                   ";"}]}], "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]ChildCount\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreeChildCount\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreeChildCount", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TreeChildCount", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "___Integer", "}"}], "|", 
                          "_Integer", "|", "None"}], ":", "None"}]}], "\n", 
                       "  ", "]"}], ":=", "\n", "  ", RowBox[{"With", "[", 
                       RowBox[{RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeChildren", "[", RowBox[{"Tree", ",", " ", 
                          "n", ",", " ", "t", ",", " ", "pos", ",", " ", 
                          "All"}], "]"}]}], "}"}], ",", "\n", "    ", 
                         RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "l"}], ",", " ", RowBox[{"Length", "@", "l"}], ",", 
                          " ", "l"}], "]"}]}], "\n", "    ", "]"}]}], ";"}], 
                 "\n", RowBox[{RowBox[{RowBox[{"TreeChildCount", "[", "\n", 
                       "  ", RowBox[{RowBox[{"n", ":", RowBox[{"TreeNode", 
                          "[", RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", 
                         " ", "\n", "  ", RowBox[{"pos", ":", RowBox[
                          {RowBox[{"{", "___Integer", "}"}], "|", "_Integer", 
                          "|", "None"}], ":", "None"}], ",", "\n", "  ", 
                         RowBox[{"children", ":", RowBox[{RowBox[{"{", 
                          "___Integer", "}"}], "|", "_Integer", "|", "_Span", 
                          "|", "All"}], ":", "All"}]}], "\n", "  ", "]"}], 
                     ":=", "\n", "  ", RowBox[{"With", "[", RowBox[
                        {RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeChildren", "[", RowBox[{"TreeNode", ",", " ", 
                          "n", ",", " ", RowBox[{"{", RowBox[{"d", ",", " ", 
                          "t"}], "}"}], ",", " ", "pos", ",", " ", "All"}], 
                          "]"}]}], "}"}], ",", "\n", "    ", RowBox[{"If", 
                          "[", RowBox[{RowBox[{"ListQ", "@", "l"}], ",", " ", 
                          RowBox[{"Length", "@", "l"}], ",", " ", "l"}], 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}]}], 
               "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Insert\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]treeInsert\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treeInsert", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"treeInsert", "[", "\n", "  ", RowBox[
                        {"head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", 
                         "list_", ",", " ", "\n", "  ", RowBox[{"node", ":", 
                          RowBox[{"{", RowBox[{"data_List", ",", " ", 
                          "children_List"}], "}"}]}], ",", " ", "\n", "  ", 
                         RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "___Integer", "}"}], "|", "_Integer", "|", 
                          "None"}]}], ",", "\n", "  ", RowBox[{"where", ":", 
                          "_Integer"}]}], "\n", "  ", "]"}], ":=", "\n", 
                     "  ", RowBox[{"Module", "[", "\n", "    ", RowBox[
                        {RowBox[{"{", "\n", "      ", RowBox[{"c", ",", " ", 
                          "\n", "      ", "$failed", ",", " ", "\n", 
                          "      ", RowBox[{"ps", "=", RowBox[{"Join", "[", 
                          RowBox[{RowBox[{"treePosSpec", "[", "pos", "]"}], 
                          ",", " ", RowBox[{"{", RowBox[{"2", ",", " ", 
                          "where"}], "}"}]}], "]"}]}]}], "\n", "      ", 
                          "}"}], ",", "\n", "    ", RowBox[{RowBox[{"c", "=", 
                          "\n", "      ", RowBox[{"Quiet", "[", "\n", 
                          "        ", RowBox[{RowBox[{"Check", "[", "\n", 
                          "  ", "        ", RowBox[{RowBox[{"Insert", "[", 
                          RowBox[{"list", ",", " ", "node", ",", " ", "ps"}], 
                          "]"}], ",", "\n", "  ", "        ", "$failed", ",", 
                          "\n", "  ", "        ", RowBox[{"Insert", "::", 
                          "ins"}]}], "\n", "  ", "        ", "]"}], ",", 
                          "\n", "  ", "      ", RowBox[{"Insert", "::", 
                          "ins"}]}], "\n", "        ", "]"}]}], ";", "\n", 
                          "    ", RowBox[{"If", "[", RowBox[{RowBox[{"c", 
                          "===", "$failed"}], ",", "\n", "      ", RowBox[
                          {RowBox[{"Message", "[", RowBox[{RowBox[{"head", 
                          "::", "nonode"}], ",", " ", "pos"}], "]"}], ";", 
                          "\n", "      ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoNode\"", ",", " ", RowBox[{"<|", "\n", 
                          "        ", RowBox[{RowBox[{"\"MessageTemplate\"", 
                          ":>", RowBox[{"head", "::", "nonode"}]}], ",", 
                          "\n", "        ", RowBox[{"\"MessageParameters\"", 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{"pos", ",", 
                          " ", "obj"}], "}"}]}]}], "\n", "        ", 
                          "|>"}]}], "\n", "        ", "]"}]}], ",", "\n", 
                          "      ", "c"}], "\n", "      ", "]"}]}]}], "\n", 
                       "    ", "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"treeInsert", "[", "\n", "  ", RowBox[
                        {"head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", 
                         "list_", ",", " ", "\n", "  ", RowBox[{"TreeNode", 
                          "[", RowBox[{"data_List", ",", " ", 
                          "children_List"}], "]"}], ",", " ", "\n", "  ", 
                         RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "___Integer", "}"}], "|", "_Integer", "|", 
                          "None"}]}], ",", "\n", "  ", RowBox[{"where", ":", 
                          "_Integer"}]}], "\n", "  ", "]"}], ":=", "\n", 
                     "  ", RowBox[{"treeInsert", "[", RowBox[{"head", ",", 
                         " ", "obj", ",", " ", "list", ",", " ", RowBox[
                          {"{", RowBox[{"data", ",", " ", "children"}], 
                          "}"}], ",", " ", "pos", ",", " ", "where"}], 
                       "]"}]}], ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TreeInsert\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreeInsert", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"TreeInsert", "[", "\n", "  ", RowBox[
                        {RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"node", ":", 
                          RowBox[{RowBox[{"{", RowBox[{"data_List", ",", " ", 
                          "children_List"}], "}"}], "|", RowBox[{"_TreeNode", 
                          "?", "TreeNodeQ"}]}]}], ",", " ", "\n", "  ", 
                         RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "___Integer", "}"}], "|", "_Integer", "|", 
                          "None"}], ":", "None"}], ",", "\n", "  ", RowBox[
                          {"where", ":", "_Integer", ":", RowBox[{"-", 
                          "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                     RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"l", 
                          "=", RowBox[{"treeInsert", "[", RowBox[{"Tree", 
                          ",", " ", "n", ",", " ", "t", ",", " ", "node", 
                          ",", " ", "pos", ",", " ", "where"}], "]"}]}], 
                          "}"}], ",", "\n", "    ", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"ListQ", "@", "l"}], ",", " ", 
                          RowBox[{"newTree", "[", "l", "]"}], ",", " ", 
                          "l"}], "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TreeInsert", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"TreeNode", "[", 
                          RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", 
                         "\n", "  ", RowBox[{"node", ":", RowBox[{RowBox[
                          {"{", RowBox[{"data_List", ",", " ", 
                          "children_List"}], "}"}], "|", RowBox[{"_TreeNode", 
                          "?", "TreeNodeQ"}]}]}], ",", " ", "\n", "  ", 
                         RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "___Integer", "}"}], "|", "_Integer", "|", 
                          "None"}], ":", "None"}], ",", "\n", "  ", RowBox[
                          {"where", ":", "_Integer", ":", RowBox[{"-", 
                          "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                     RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"l", 
                          "=", RowBox[{"treeInsert", "[", RowBox[{"TreeNode", 
                          ",", " ", "n", ",", " ", RowBox[{"{", RowBox[{"d", 
                          ",", " ", "t"}], "}"}], ",", " ", "node", ",", " ", 
                          "pos", ",", " ", "where"}], "]"}]}], "}"}], ",", 
                         "\n", "    ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"ListQ", "@", "l"}], ",", " ", RowBox[{"newNode", 
                          "[", RowBox[{"d", ",", " ", "l"}], "]"}], ",", " ", 
                          "l"}], "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{"TreeInsert", "[", "\n", "  ", RowBox[
                      {RowBox[{"n", ":", RowBox[{"_Tree", "|", 
                          "_TreeNode"}]}], ",", " ", "\n", "  ", "data_", 
                       ",", " ", "\n", "  ", RowBox[{"pos", ":", RowBox[
                          {RowBox[{"{", "___Integer", "}"}], "|", "_Integer", 
                          "|", "None"}], ":", "None"}], ",", "\n", "  ", 
                       RowBox[{"where", ":", "_Integer", ":", RowBox[{"-", 
                          "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                   RowBox[{"TreeInsert", "[", RowBox[{"n", ",", " ", 
                       RowBox[{"{", RowBox[{RowBox[{"{", "data", "}"}], ",", 
                          " ", RowBox[{"{", "}"}]}], "}"}], ",", " ", "pos", 
                       ",", " ", "where"}], "]"}]}]}], "CodeInput"]}, 
             Open]]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]InsertData\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True], Cell[BoxData[
             {RowBox[{RowBox[{RowBox[{"Tree", "::", "nonode"}], "=", 
                  "\"Tree doesn't have a node at ``\""}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"TreeNode", "::", "nohild"}], "=", 
                  "\"TreeNode doesn't have a node at ``\""}], ";"}]}], 
            "CodeInput"], Cell[CellGroupData[
             {Cell["\[LeftCeiling]treeInsertData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treeInsertData", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"treeInsertData", "[", "\n", "  ", 
                       RowBox[{"head_", ",", "\n", "  ", "obj_", ",", "\n", 
                         "  ", "list_", ",", " ", "\n", "  ", "data_", ",", 
                         " ", "\n", "  ", RowBox[{"pos", ":", RowBox[
                          {RowBox[{"{", "___Integer", "}"}], "|", "_Integer", 
                          "|", "None"}]}], ",", "\n", "  ", RowBox[{"where", 
                          ":", "_Integer"}]}], "\n", "  ", "]"}], ":=", "\n", 
                     "  ", RowBox[{"Module", "[", RowBox[{RowBox[{"{", 
                          RowBox[{"c", ",", " ", "$failed", ",", " ", "\n", 
                          "    ", RowBox[{"ps", "=", RowBox[{"Join", "[", 
                          RowBox[{RowBox[{"treePosSpec", "[", "pos", "]"}], 
                          ",", " ", RowBox[{"{", RowBox[{"1", ",", " ", 
                          "where"}], "}"}]}], "]"}]}]}], "\n", "    ", "}"}], 
                         ",", "\n", "    ", RowBox[{RowBox[{"c", "=", "\n", 
                          "      ", RowBox[{"Quiet", "[", "\n", "        ", 
                          RowBox[{RowBox[{"Check", "[", "\n", "  ", 
                          "        ", RowBox[{RowBox[{"Insert", "[", RowBox[
                          {"list", ",", " ", "data", ",", " ", "ps"}], "]"}], 
                          ",", "\n", "  ", "        ", "$failed", ",", "\n", 
                          "  ", "        ", RowBox[{"Insert", "::", 
                          "ins"}]}], "\n", "  ", "        ", "]"}], ",", 
                          "\n", "  ", "      ", RowBox[{"Insert", "::", 
                          "ins"}]}], "\n", "        ", "]"}]}], ";", "\n", 
                          "    ", RowBox[{"If", "[", RowBox[{RowBox[{"c", 
                          "===", "$failed"}], ",", "\n", "      ", RowBox[
                          {RowBox[{"Message", "[", RowBox[{RowBox[{"head", 
                          "::", "nonode"}], ",", " ", "pos"}], "]"}], ";", 
                          "\n", "      ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoNode\"", ",", " ", RowBox[{"<|", "\n", 
                          "        ", RowBox[{RowBox[{"\"MessageTemplate\"", 
                          ":>", RowBox[{"head", "::", "nonode"}]}], ",", 
                          "\n", "        ", RowBox[{"\"MessageParameters\"", 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{"pos", ",", 
                          " ", "obj"}], "}"}]}]}], "\n", "        ", 
                          "|>"}]}], "\n", "        ", "]"}]}], ",", "\n", 
                          "      ", "c"}], "\n", "      ", "]"}]}]}], "\n", 
                       "    ", "]"}]}], ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]TreeInsertData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{"TreeInsertData", "//", "Clear"}], ";"}], 
                 "\n", RowBox[{RowBox[{RowBox[{"TreeInsertData", "[", "\n", 
                       "  ", RowBox[{RowBox[{"n", ":", RowBox[{"Tree", "[", 
                          "t_", "]"}]}], ",", " ", "\n", "  ", "data_", ",", 
                         " ", "\n", "  ", RowBox[{"pos", ":", RowBox[
                          {RowBox[{"{", "___Integer", "}"}], "|", "_Integer", 
                          "|", "None"}], ":", "None"}], ",", "\n", "  ", 
                         RowBox[{"where", ":", "_Integer", ":", RowBox[
                          {"-", "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", 
                     "  ", RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[
                          {"l", "=", RowBox[{"treeInsertData", "[", RowBox[
                          {"Tree", ",", " ", "n", ",", " ", "t", ",", " ", 
                          "data", ",", " ", "pos", ",", " ", "where"}], 
                          "]"}]}], "}"}], ",", "\n", "    ", RowBox[{"If", 
                          "[", RowBox[{RowBox[{"ListQ", "@", "l"}], ",", " ", 
                          RowBox[{"newTree", "[", "l", "]"}], ",", " ", 
                          "l"}], "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"TreeInsertData", "[", "\n", "  ", 
                       RowBox[{RowBox[{"n", ":", RowBox[{"TreeNode", "[", 
                          RowBox[{"d_", ",", " ", "t_"}], "]"}]}], ",", " ", 
                         "\n", "  ", "data_", ",", "\n", "  ", RowBox[
                          {"pos", ":", RowBox[{RowBox[{"{", "___Integer", 
                          "}"}], "|", "_Integer", "|", "None"}], ":", 
                          "None"}], ",", "\n", "  ", RowBox[{"where", ":", 
                          "_Integer", ":", RowBox[{"-", "1"}]}]}], "\n", 
                       "  ", "]"}], ":=", "\n", "  ", RowBox[{"With", "[", 
                       RowBox[{RowBox[{"{", RowBox[{"l", "=", RowBox[
                          {"treeInsert", "[", RowBox[{"TreeNode", ",", " ", 
                          "n", ",", " ", RowBox[{"{", RowBox[{"d", ",", " ", 
                          "t"}], "}"}], ",", " ", "data", ",", " ", "pos", 
                          ",", " ", "where"}], "]"}]}], "}"}], ",", "\n", 
                         "    ", RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", 
                          "@", "l"}], ",", " ", RowBox[{"newNode", "[", 
                          RowBox[{"d", ",", " ", "l"}], "]"}], ",", " ", 
                          "l"}], "]"}]}], "\n", "    ", "]"}]}], ";"}]}], 
               "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Pop\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]treePop\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"treePop", "[", "\n", "  ", 
                      RowBox[{"head_", ",", "\n", "  ", "obj_", ",", "\n", 
                        "  ", "list_", ",", " ", "\n", "  ", RowBox[{"pos", 
                          ":", RowBox[{RowBox[{"{", "___Integer", "}"}], "|", 
                          "_Integer", "|", "None"}]}], ",", "\n", "  ", 
                        RowBox[{"where", ":", "_Integer"}]}], "\n", "  ", 
                      "]"}], ":=", "\n", "  ", RowBox[{"Module", "[", "\n", 
                      "    ", RowBox[{RowBox[{"{", "\n", "      ", RowBox[
                          {RowBox[{"ps", "=", "\n", "        ", RowBox[
                          {"Join", "[", RowBox[{RowBox[{"treePosSpec", "[", 
                          "pos", "]"}], ",", " ", RowBox[{"{", RowBox[{"2", 
                          ",", " ", "where"}], "}"}]}], "]"}]}], ",", "\n", 
                          "      ", "$failed", ",", "\n", "      ", "c"}], 
                          "\n", "      ", "}"}], ",", "\n", "    ", RowBox[
                         {RowBox[{"c", "=", "\n", "      ", RowBox[{"Quiet", 
                          "[", "\n", "        ", RowBox[{RowBox[{"Check", 
                          "[", RowBox[{RowBox[{"list", "[", RowBox[{"[", 
                          RowBox[{"Sequence", "@@", "ps"}], "]"}], "]"}], 
                          ",", " ", "\n", "  ", "        ", "$failed", ",", 
                          "\n", "  ", "        ", RowBox[{"Part", "::", 
                          "partw"}]}], "]"}], ",", " ", "\n", "  ", "      ", 
                          RowBox[{"Part", "::", "partw"}]}], "\n", 
                          "        ", "]"}]}], ";", "\n", "    ", RowBox[
                          {"If", "[", RowBox[{RowBox[{"c", "=!=", 
                          "$failed"}], ",", "\n", "      ", RowBox[{"{", 
                          RowBox[{"c", ",", " ", RowBox[{"Delete", "[", 
                          RowBox[{"list", ",", " ", "ps"}], "]"}]}], "}"}], 
                          ",", "\n", "      ", RowBox[{RowBox[{"Message", 
                          "[", RowBox[{RowBox[{"head", "::", "nochild"}], 
                          ",", " ", "pos", ",", " ", "where"}], "]"}], ";", 
                          "\n", "      ", RowBox[{"Failure", "[", RowBox[
                          {"\"BadPart\"", ",", " ", RowBox[{"<|", "\n", 
                          "        ", RowBox[{RowBox[{"\"MessageTemplate\"", 
                          ":>", RowBox[{"head", "::", "partw"}]}], ",", "\n", 
                          "        ", RowBox[{"\"MessageParameters\"", 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{"pos", ",", 
                          " ", "where", ",", " ", "obj"}], "}"}]}]}], "\n", 
                          "        ", "|>"}]}], "\n", "        ", "]"}]}]}], 
                          "\n", "      ", "]"}]}]}], "\n", "    ", "]"}]}], 
                  ";"}]], "CodeInput"]}, Closed]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TreePop\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreePop", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"TreePop", "[", "\n", "  ", RowBox[
                        {RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "___Integer", "}"}], "|", 
                          "_Integer", "|", "None"}], ":", "None"}], ",", 
                         "\n", "  ", RowBox[{"where", ":", "_Integer", ":", 
                          RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", 
                     "\n", "  ", RowBox[{"With", "[", RowBox[{RowBox[{"{", 
                          RowBox[{"l", "=", RowBox[{"treePop", "[", RowBox[
                          {"Tree", ",", " ", "n", ",", " ", "t", ",", " ", 
                          "pos", ",", " ", "where"}], "]"}]}], "}"}], ",", 
                         "\n", "    ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"ListQ", "@", "l"}], ",", " ", RowBox[{"{", RowBox[
                          {RowBox[{"newNode", "@@", RowBox[{"l", "[", RowBox[
                          {"[", "1", "]"}], "]"}]}], ",", " ", RowBox[
                          {"newTree", "[", RowBox[{"l", "[", RowBox[{"[", 
                          "2", "]"}], "]"}], "]"}]}], "}"}], ",", " ", "l"}], 
                          "]"}]}], "\n", "    ", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{"TreePop", "[", "\n", "  ", RowBox[
                      {RowBox[{"n", ":", RowBox[{"TreeNode", "[", RowBox[
                          {"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", 
                       "  ", RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "___Integer", "}"}], "|", "_Integer", "|", 
                          "None"}], ":", "None"}], ",", "\n", "  ", RowBox[
                        {"where", ":", "_Integer", ":", RowBox[{"-", 
                          "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                   RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"l", 
                          "=", RowBox[{"treePop", "[", RowBox[{"TreeNode", 
                          ",", " ", "n", ",", " ", RowBox[{"{", RowBox[{"d", 
                          ",", " ", "t"}], "}"}], ",", " ", "pos", ",", " ", 
                          "where"}], "]"}]}], "}"}], ",", "\n", "    ", 
                       RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "l"}], ",", " ", RowBox[{"{", RowBox[{RowBox[
                          {"newNode", "@@", RowBox[{"l", "[", RowBox[{"[", 
                          "1", "]"}], "]"}]}], ",", " ", RowBox[{"newNode", 
                          "@@", RowBox[{"l", "[", RowBox[{"[", "2", "]"}], 
                          "]"}]}]}], "}"}], ",", " ", "l"}], "]"}]}], "\n", 
                     "    ", "]"}]}]}], "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]PopData\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Tree", "::", "nodata"}], 
                  "=", 
                  "\"Tree doesn't have data at node `` and position ``\""}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[{"TreeNode", "::", 
                    "nodata"}], "=", "\"TreeNode doesn't have data at node `` \
and position ``\""}], ";"}]}], "CodeInput"], Cell[CellGroupData[
             {Cell["\[LeftCeiling]treePopData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"treePopData", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"treePopData", "[", "\n", "  ", RowBox[
                        {"head_", ",", "\n", "  ", "obj_", ",", "\n", "  ", 
                         "list_", ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "___Integer", "}"}], "|", 
                          "_Integer", "|", "None"}]}], ",", "\n", "  ", 
                         RowBox[{"where", ":", "_Integer"}]}], "\n", "  ", 
                       "]"}], ":=", "\n", "  ", RowBox[{"Module", "[", "\n", 
                       "    ", RowBox[{RowBox[{"{", "\n", "      ", RowBox[
                          {RowBox[{"ps", "=", RowBox[{"Join", "[", RowBox[
                          {RowBox[{"treePosSpec", "[", "pos", "]"}], ",", 
                          " ", RowBox[{"{", RowBox[{"1", ",", " ", "where"}], 
                          "}"}]}], "]"}]}], ",", "\n", "      ", "$failed", 
                          ",", "\n", "      ", "c"}], "\n", "      ", "}"}], 
                         ",", "\n", "    ", RowBox[{RowBox[{"c", "=", "\n", 
                          "      ", RowBox[{"Quiet", "[", "\n", "        ", 
                          RowBox[{RowBox[{"Check", "[", RowBox[{RowBox[
                          {"list", "[", RowBox[{"[", RowBox[{"Sequence", 
                          "@@", "ps"}], "]"}], "]"}], ",", " ", "\n", "  ", 
                          "        ", "$failed", ",", "\n", "  ", "        ", 
                          RowBox[{"Part", "::", "partw"}]}], "]"}], ",", " ", 
                          "\n", "  ", "      ", RowBox[{"Part", "::", 
                          "partw"}]}], "\n", "        ", "]"}]}], ";", "\n", 
                          "    ", RowBox[{"If", "[", RowBox[{RowBox[{"c", 
                          "=!=", "$failed"}], ",", "\n", "      ", RowBox[
                          {"{", RowBox[{"c", ",", " ", RowBox[{"Delete", "[", 
                          RowBox[{"list", ",", " ", "ps"}], "]"}]}], "}"}], 
                          ",", "\n", "      ", RowBox[{RowBox[{"Message", 
                          "[", RowBox[{RowBox[{"head", "::", "nodata"}], ",", 
                          " ", "pos", ",", " ", "where"}], "]"}], ";", "\n", 
                          "      ", RowBox[{"Failure", "[", RowBox[
                          {"\"NoData\"", ",", " ", RowBox[{"<|", "\n", 
                          "        ", RowBox[{RowBox[{"\"MessageTemplate\"", 
                          ":>", RowBox[{"head", "::", "nodata"}]}], ",", 
                          "\n", "        ", RowBox[{"\"MessageParameters\"", 
                          "\[RuleDelayed]", RowBox[{"{", RowBox[{"pos", ",", 
                          " ", "where", ",", " ", "obj"}], "}"}]}]}], "\n", 
                          "        ", "|>"}]}], "\n", "        ", "]"}]}]}], 
                          "\n", "      ", "]"}]}]}], "\n", "    ", "]"}]}], 
                   ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TreePopData\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"TreePopData", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"TreePopData", "[", "\n", "  ", RowBox[
                        {RowBox[{"n", ":", RowBox[{"Tree", "[", "t_", 
                          "]"}]}], ",", " ", "\n", "  ", RowBox[{"pos", ":", 
                          RowBox[{RowBox[{"{", "___Integer", "}"}], "|", 
                          "_Integer", "|", "None"}], ":", "None"}], ",", 
                         "\n", "  ", RowBox[{"where", ":", "_Integer", ":", 
                          RowBox[{"-", "1"}]}]}], "\n", "  ", "]"}], ":=", 
                     "\n", "  ", RowBox[{"With", "[", RowBox[{RowBox[{"{", 
                          RowBox[{"l", "=", RowBox[{"treePopData", "[", 
                          RowBox[{"Tree", ",", " ", "n", ",", " ", "t", ",", 
                          " ", "pos", ",", " ", "where"}], "]"}]}], "}"}], 
                         ",", "\n", "    ", RowBox[{"If", "[", RowBox[
                          {RowBox[{"ListQ", "@", "l"}], ",", " ", RowBox[
                          {"{", RowBox[{RowBox[{"l", "[", RowBox[{"[", "1", 
                          "]"}], "]"}], ",", " ", RowBox[{"newTree", "[", 
                          RowBox[{"l", "[", RowBox[{"[", "2", "]"}], "]"}], 
                          "]"}]}], "}"}], ",", " ", "l"}], "]"}]}], "\n", 
                       "    ", "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{"TreePopData", "[", "\n", "  ", RowBox[
                      {RowBox[{"n", ":", RowBox[{"TreeNode", "[", RowBox[
                          {"d_", ",", " ", "t_"}], "]"}]}], ",", " ", "\n", 
                       "  ", RowBox[{"pos", ":", RowBox[{RowBox[{"{", 
                          "___Integer", "}"}], "|", "_Integer", "|", 
                          "None"}], ":", "None"}], ",", "\n", "  ", RowBox[
                        {"where", ":", "_Integer", ":", RowBox[{"-", 
                          "1"}]}]}], "\n", "  ", "]"}], ":=", "\n", "  ", 
                   RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"l", 
                          "=", RowBox[{"treePopData", "[", RowBox[
                          {"TreeNode", ",", " ", "n", ",", " ", RowBox[{"{", 
                          RowBox[{"d", ",", " ", "t"}], "}"}], ",", " ", 
                          "pos", ",", " ", "where"}], "]"}]}], "}"}], ",", 
                       "\n", "    ", RowBox[{"If", "[", RowBox[{RowBox[
                          {"ListQ", "@", "l"}], ",", " ", RowBox[{"{", 
                          RowBox[{RowBox[{"l", "[", RowBox[{"[", "1", "]"}], 
                          "]"}], ",", " ", RowBox[{"newNode", "@@", RowBox[
                          {"l", "[", RowBox[{"[", "2", "]"}], "]"}]}]}], 
                          "}"}], ",", " ", "l"}], "]"}]}], "\n", "    ", 
                     "]"}]}]}], "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]TreeWalk\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\nWe\[CloseCurlyQuote]ll provide like three events?\n\t- \
\[OpenCurlyDoubleQuote]EnterNode\[CloseCurlyDoubleQuote]\n\t- \
\[OpenCurlyDoubleQuote]ProcessNode\[CloseCurlyDoubleQuote]\n\t- \
\[OpenCurlyDoubleQuote]ExitNode\[CloseCurlyDoubleQuote]\n\t\n\[RightFloor]", 
            "Text", Evaluatable -> True], Cell[CellGroupData[
             {Cell["\[LeftCeiling]walkTreeDF\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tSimple depth-first traversal of a \
node\n\[RightFloor]", "Text", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"walkTreeDF", "[", RowBox[{"node_", 
                        ",", " ", RowBox[{"handlers", ":", RowBox[{"{", 
                          RowBox[{"body_", ",", " ", "enter_", ",", " ", 
                          "exit_"}], "}"}]}]}], "]"}], ":=", "  ", "\n", 
                    "  ", RowBox[{"Module", "[", RowBox[{RowBox[{"{", 
                          RowBox[{RowBox[{"children", " ", "=", " ", RowBox[
                          {"node", "[", RowBox[{"[", "2", "]"}], "]"}]}], 
                          ",", " ", "res"}], "}"}], ",", "\n", "    ", 
                        RowBox[{RowBox[{"node", " ", "=", " ", RowBox[
                          {"enter", "[", "node", "]"}]}], ";", "\n", "    ", 
                          RowBox[{"res", "=", "\n", "      ", RowBox[{"body", 
                          "[", "\n", "        ", RowBox[{RowBox[{"{", "\n", 
                          "          ", RowBox[{RowBox[{"node", "[", RowBox[
                          {"[", "1", "]"}], "]"}], ",", "\n", "  ", 
                          "        ", RowBox[{RowBox[{RowBox[{
                          "walkASTNodeDF", "[", RowBox[{"#", ",", " ", 
                          "handlers"}], "]"}], "&"}], "/@", "children"}]}], 
                          "\n", "          ", "}"}], ",", "\n", "        ", 
                          "node"}], "\n", "        ", "]"}]}], ";", "\n", 
                          "    ", RowBox[{"exit", "[", RowBox[{"res", ",", 
                          " ", "node"}], "]"}]}]}], "\n", "    ", "]"}]}], 
                  ";"}]], "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]walkTreeBF\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"walkTreeBF", "[", RowBox[{"root_", 
                        ",", " ", RowBox[{"handlers", ":", RowBox[{"{", 
                          RowBox[{"body_", ",", " ", "enter_", ",", " ", 
                          "exit_"}], "}"}]}]}], "]"}], ":=", "  ", "\n", 
                    "    ", RowBox[{"Module", "[", "\n", "      ", RowBox[
                       {RowBox[{"{", "\n", "        ", RowBox[{RowBox[
                          {"node", " ", "=", " ", "root"}], ",", "\n", 
                          "        ", "children", ",", " ", "\n", "        ", 
                          "res", ",", "\n", "        ", RowBox[{"q", " ", 
                          "=", " ", RowBox[{"Queue", "[", "]"}]}]}], "\n", 
                          "        ", "}"}], ",", "\n", "      ", RowBox[
                         {RowBox[{"Reap", "[", "\n", "        ", RowBox[
                          {RowBox[{"q", " ", "=", " ", RowBox[{"QueuePush", 
                          "[", RowBox[{"q", ",", " ", "node"}], "]"}]}], ";", 
                          "\n", "        ", RowBox[{"While", "[", RowBox[
                          {RowBox[{"!", RowBox[{"QueueEmptyQ", "[", "q", 
                          "]"}]}], ",", "\n", "          ", RowBox[{RowBox[
                          {"node", " ", "=", " ", RowBox[{"QueuePop", "[", 
                          "q", "]"}]}], ";", "\n", "          ", RowBox[
                          {"node", " ", "=", " ", RowBox[{"enter", "[", 
                          "node", "]"}]}], ";", "\n", "  ", "  ", "      ", 
                          RowBox[{"children", " ", "=", " ", RowBox[{"root", 
                          "[", "\"Children\"", "]"}]}], ";", "\n", 
                          "          ", RowBox[{"q", " ", "=", " ", RowBox[
                          {"QueueExtend", "[", RowBox[{"q", ",", " ", 
                          "children"}], "]"}]}], ";", "\n", "          ", 
                          RowBox[{"res", " ", "=", " ", RowBox[{"body", "[", 
                          RowBox[{"node", ",", " ", "node"}], "]"}]}], ";", 
                          "\n", "          ", RowBox[{"exit", "[", RowBox[
                          {"res", ",", " ", "node"}], "]"}], ";"}]}], "\n", 
                          "          ", "]"}], ";", "\n", "        ", 
                          "\"WalkTree\""}], "\n", "        ", "]"}], "[", 
                          RowBox[{"[", "2", "]"}], "]"}]}], "\n", "    ", 
                      "]"}]}], ";"}]], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]TreeWalk\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell[CellGroupData[{Cell[
                  "\[LeftCeiling]$TreeTraversalFunctions\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[RowBox[{RowBox[{"$TreeTraversalFunctions", "=", 
                       "\n", "  ", RowBox[{"<|", "\n", "    ", RowBox[
                          {RowBox[{"\"DepthFirst\"", "\[Rule]", RowBox[
                          {"<|", "\n", "      ", RowBox[{RowBox[{RowBox[
                          {"\"EnterNode\"", "->", "#"}], "&"}], ",", "\n", 
                          "      ", RowBox[{RowBox[{"\"ExitNode\"", "->", 
                          "#"}], "&"}], ",", "\n", "      ", RowBox[{RowBox[
                          {"\"ProcessNode\"", "->", "#"}], "&"}]}], "\n", 
                          "      ", "|>"}]}], ",", "\n", "    ", RowBox[
                          {"\"BreadthFirst\"", "\[Rule]", RowBox[{"<|", "\n", 
                          "      ", RowBox[{RowBox[{RowBox[{"\"EnterNode\"", 
                          "->", "#"}], "&"}], ",", "\n", "      ", RowBox[
                          {"\"ExitNode\"", "\[Rule]", RowBox[{"(", RowBox[
                          {RowBox[{"Sow", "[", RowBox[{"#", ",", " ", 
                          "\"WalkTree\""}], "]"}], "&"}], ")"}]}], ",", "\n", 
                          "      ", RowBox[{RowBox[{"\"ProcessNode\"", "->", 
                          "#"}], "&"}]}], "\n", "      ", "|>"}]}]}], "\n", 
                         "    ", "|>"}]}], ";"}]], "CodeInput"]}, Closed]], 
              Cell[CellGroupData[{Cell[
                  "\[LeftCeiling]iTreeWalk\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", "[", 
                          "iTreeWalk", "]"}], "=", "\n", "  ", RowBox[
                         {"{", "\n", "    ", RowBox[{"\"TraversalFunction\"", 
                          "\[Rule]", "\"DepthFirst\""}], "\n", "    ", 
                          "}"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                         {"iTreeWalk", "[", RowBox[{"node_", ",", " ", 
                          "visitFunctions_", ",", "\n", "  ", RowBox[{"ops", 
                          ":", RowBox[{"OptionsPattern", "[", "]"}]}]}], 
                          "\n", "  ", "]"}], ":=", "\n", "  ", RowBox[
                         {"Module", "[", "\n", "    ", RowBox[{RowBox[{"{", 
                          "\n", "      ", RowBox[{"mode", ",", " ", "enter", 
                          ",", " ", "exit", ",", " ", "body", ",", "\n", 
                          "      ", "funcs"}], "\n", "      ", "}"}], ",", 
                          "\n", "    ", RowBox[{RowBox[{"mode", "=", "\n", 
                          "      ", RowBox[{"Replace", "[", "\n", "        ", 
                          RowBox[{RowBox[{"OptionValue", "[", RowBox[
                          {"iTreeWalk", ",", " ", "\n", "          ", RowBox[
                          {"FilterRules", "[", RowBox[{RowBox[{"{", "ops", 
                          "}"}], ",", " ", "\"TraversalFunction\""}], "]"}], 
                          ",", " ", "\n", "  ", "        ", 
                          "\"TraversalFunction\""}], "\n", "  ", "        ", 
                          "]"}], ",", "\n", "  ", "      ", RowBox[{"{", 
                          "\n", "  ", "        ", RowBox[{RowBox[
                          {"\"BreadthFirst\"", "->", "walkTreeBF"}], ",", 
                          "\n", "          ", RowBox[{"\"DepthFirst\"", "->", 
                          "walkTreeDF"}]}], "\n", "          ", "}"}]}], 
                          "\n", "        ", "]"}]}], ";", "\n", "    ", 
                          RowBox[{"funcs", " ", "=", " ", "\n", "      ", 
                          RowBox[{"Lookup", "[", RowBox[{
                          "$TreeTraversalFunctions", ",", " ", "mode", ",", 
                          " ", RowBox[{"$TreeTraversalFunctions", "[", 
                          "\"DepthFirst\"", "]"}]}], "]"}]}], ";", "\n", 
                          "    ", RowBox[{"enter", "=", RowBox[{"Lookup", 
                          "[", RowBox[{"visitFunctions", ",", " ", 
                          "\"EnterNode\"", ",", "   ", RowBox[{"funcs", "[", 
                          "\"EnterNode\"", "]"}]}], "]"}]}], ";", "\n", 
                          "    ", RowBox[{"exit", " ", "=", RowBox[{"Lookup", 
                          "[", RowBox[{"visitFunctions", ",", " ", 
                          "\"ExitNode\"", ",", "    ", RowBox[{"funcs", "[", 
                          "\"ExitNode\"", "]"}]}], "]"}]}], ";", "\n", 
                          "    ", RowBox[{"body", " ", "=", RowBox[{"Lookup", 
                          "[", RowBox[{"visitFunctions", ",", " ", 
                          "\"ProcessNode\"", ",", " ", RowBox[{"funcs", "[", 
                          "\"ProcessNode\"", "]"}]}], "]"}]}], ";", "\n", 
                          "    ", RowBox[{"mode", "[", RowBox[{"node", ",", 
                          " ", RowBox[{"{", RowBox[{"body", ",", " ", 
                          "enter", ",", " ", "exit"}], "}"}]}], "]"}]}]}], 
                          "\n", "    ", "]"}]}], ";"}]}], "CodeInput"]}, 
                Closed]], Cell[CellGroupData[{Cell[
                  "\[LeftCeiling]TreeWalk\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", "[", 
                          "TreeWalk", "]"}], "=", "\n", "  ", RowBox[
                         {"Options", "[", "iTreeWalk", "]"}]}], ";"}], "\n", 
                    RowBox[{RowBox[{RowBox[{"TreeWalk", "[", RowBox[
                          {RowBox[{"Tree", "[", "t_", "]"}], ",", " ", 
                          "visitFunctions_", ",", " ", RowBox[{"ops", ":", 
                          RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], 
                        ":=", "\n", "  ", RowBox[{"iTreeWalk", "[", RowBox[
                          {"t", ",", " ", "visitFunctions", ",", " ", 
                          "ops"}], "]"}]}], ";"}], "\n", RowBox[
                     {RowBox[{RowBox[{"TreeWalk", "[", RowBox[{RowBox[
                          {"TreeNode", "[", RowBox[{"d_", ",", " ", "t_"}], 
                          "]"}], ",", " ", "visitFunctions_", ",", " ", 
                          RowBox[{"ops", ":", RowBox[{"OptionsPattern", "[", 
                          "]"}]}]}], "]"}], ":=", "\n", "  ", RowBox[
                         {"iTreeWalk", "[", RowBox[{RowBox[{"{", RowBox[
                          {"d", ",", " ", "t"}], "}"}], ",", " ", 
                          "visitFunctions", ",", " ", "ops"}], "]"}]}], 
                      ";"}]}], "CodeInput"]}, Open]]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]Formatting\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]Tree\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"Format", "[", RowBox[{RowBox[
                          {"q_Tree", "?", "TreeQ"}], ",", " ", 
                         "StandardForm"}], "]"}], ":=", "\n", "  ", 
                     RowBox[{"RawBoxes", "@", "\n", "    ", RowBox[
                        {"BoxForm`ArrangeSummaryBox", "[", "\n", "      ", 
                         RowBox[{"Tree", ",", "\n", "      ", "q", ",", "\n", 
                          "      ", "None", ",", "\n", "      ", RowBox[
                          {"{", "\n", "        ", RowBox[{RowBox[
                          {"BoxForm`MakeSummaryItem", "[", "\n", 
                          "          ", RowBox[{RowBox[{"{", "\n", 
                          "            ", RowBox[{"\"Root:\"", ",", " ", 
                          "\n", "              ", RowBox[{"Quiet", "@", 
                          RowBox[{"Check", "[", RowBox[{RowBox[{"Replace", 
                          "[", RowBox[{RowBox[{"TreePopData", "[", "q", 
                          "]"}], ",", " ", RowBox[{RowBox[{"{", RowBox[{"a_", 
                          ",", " ", "_"}], "}"}], "\[RuleDelayed]", "a"}]}], 
                          "]"}], ",", " ", "None", ",", " ", RowBox[{"Tree", 
                          "::", "nodata"}]}], "]"}]}]}], "\n", 
                          "            ", "}"}], ",", " ", "\n", 
                          "          ", "StandardForm"}], "\n", "          ", 
                          "]"}], ",", "\n", "        ", RowBox[
                          {"BoxForm`MakeSummaryItem", "[", "\n", 
                          "          ", RowBox[{RowBox[{"{", "\n", 
                          "            ", RowBox[{"\"Children:\"", ",", " ", 
                          "\n", "              ", RowBox[{"Quiet", "@", 
                          RowBox[{"Check", "[", RowBox[{RowBox[{
                          "TreeChildCount", "[", "q", "]"}], ",", " ", "0", 
                          ",", " ", RowBox[{"Tree", "::", "nochild"}]}], 
                          "]"}]}]}], "\n", "            ", "}"}], ",", " ", 
                          "\n", "          ", "StandardForm"}], "\n", 
                          "          ", "]"}]}], "\n", "        ", "}"}], 
                          ",", "\n", "      ", RowBox[{"{", "}"}], ",", "\n", 
                          "      ", "StandardForm"}], "\n", "      ", 
                         "]"}]}]}], ";"}], "\n", RowBox[{RowBox[{"Format", 
                     "[", RowBox[{RowBox[{"q_Tree", "?", "Tree"}], ",", " ", 
                       "TextForm"}], "]"}], ":=", "\n", "  ", 
                   "\"Tree[<>]\""}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]Node\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"Format", "[", RowBox[{RowBox[
                          {"q_TreeNode", "?", "TreeNodeQ"}], ",", " ", 
                         "StandardForm"}], "]"}], ":=", "\n", "  ", 
                     RowBox[{"RawBoxes", "@", "\n", "    ", RowBox[
                        {"BoxForm`ArrangeSummaryBox", "[", "\n", "      ", 
                         RowBox[{"TreeNode", ",", "\n", "      ", "q", ",", 
                          "\n", "      ", "None", ",", "\n", "      ", 
                          RowBox[{"{", "\n", "        ", RowBox[{RowBox[
                          {"BoxForm`MakeSummaryItem", "[", "\n", 
                          "          ", RowBox[{RowBox[{"{", "\n", 
                          "            ", RowBox[{"\"Root:\"", ",", " ", 
                          "\n", "              ", RowBox[{"Quiet", "@", 
                          RowBox[{"Check", "[", RowBox[{RowBox[{"Replace", 
                          "[", RowBox[{RowBox[{"TreePopData", "[", "q", 
                          "]"}], ",", " ", RowBox[{RowBox[{"{", RowBox[{"a_", 
                          ",", " ", "_"}], "}"}], "\[RuleDelayed]", "a"}]}], 
                          "]"}], ",", " ", "None", ",", " ", RowBox[
                          {"TreeNode", "::", "nodata"}]}], "]"}]}]}], "\n", 
                          "            ", "}"}], ",", " ", "\n", 
                          "          ", "StandardForm"}], "\n", "          ", 
                          "]"}], ",", "\n", "        ", RowBox[
                          {"BoxForm`MakeSummaryItem", "[", "\n", 
                          "          ", RowBox[{RowBox[{"{", "\n", 
                          "            ", RowBox[{"\"Children:\"", ",", " ", 
                          "\n", "              ", RowBox[{"Quiet", "@", 
                          RowBox[{"Check", "[", RowBox[{RowBox[{
                          "TreeChildCount", "[", "q", "]"}], ",", " ", "0", 
                          ",", " ", RowBox[{"TreeNode", "::", "nochild"}]}], 
                          "]"}]}]}], "\n", "            ", "}"}], ",", " ", 
                          "\n", "          ", "StandardForm"}], "\n", 
                          "          ", "]"}]}], "\n", "        ", "}"}], 
                          ",", "\n", "      ", RowBox[{"{", "}"}], ",", "\n", 
                          "      ", "StandardForm"}], "\n", "      ", 
                         "]"}]}]}], ";"}], "\n", RowBox[{RowBox[{"Format", 
                     "[", RowBox[{RowBox[{"q_TreeNode", "?", "TreeNodeQ"}], 
                       ",", " ", "TextForm"}], "]"}], ":=", "\n", "  ", 
                   "\"TreeNode[<>]\""}]}], "CodeInput"]}, Open]]}, Open]]}, 
       Open]], Cell[BoxData[RowBox[{RowBox[{"End", "[", "]"}], ";"}]], 
      "InputSection"]}, Open]], Cell["", "SectionSeparator"]}, 
 WindowSize -> {808, 755}, WindowMargins -> {{316, Automatic}, 
   {Automatic, 50}}, TaggingRules -> 
  {"UUIDButtons" -> 
    {"Active" -> {"Button-89ffd2c3-ec41-4179-a9b1-8e28670bca2c" -> False, 
       "Button-ca46e5e0-4fd1-47e8-8cf6-72998922b757" -> False, 
       "Button-a6d68254-3684-4d32-83fc-e5ef6f443930" -> False}}}, 
 FrontEndVersion -> "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", 
 StyleDefinitions -> FrontEnd`FileName[{"BTools"}, "CodePackage.nb", 
   CharacterEncoding -> "UTF-8"]]
