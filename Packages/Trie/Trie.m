(* ::Package:: *)

(* Autogenerated Package *)

Trie::usage="A Trie";
TrieData::usage="Returns the core data used by the Trie";
TrieAdd::usage="Adds words to the Trie";
TreeRemove::usage="Drops words from the Trie";


TrieMatches::usage="Returns the possible matches for a given prefix list";
TrieClosest::usage="Returns the closest possible matches for a given word list";


TrieWordCount::usage="Gives the number of words in the Trie";


Begin["`Private`"];


(* ::Subsection:: *)
(*Trie*)



(* ::Text:: *)
(*
	None of this *needs* UTF8 so I should allow the Trie to use a different encoding for memory possibly...
*)



(* ::Subsubsection::Closed:: *)
(*Constructor*)



Trie//ClearAll;
Trie[s:{___String}]:=Trie[buildTrie[s]];
unconstructedQ=Function[Null, System`Private`EntryQ[Unevaluated[#]], HoldFirst];
q:Trie[a_Association?AssociationQ]?unconstructedQ:=
System`Private`SetNoEntry[Unevaluated@q]


newTrie[a_]:=
  System`Private`SetNoEntry@
    Unevaluated[Trie[a]]


(* ::Subsubsubsection::Closed:: *)
(*buildTrie*)



attachDefaultWords[assoc_, cur_:""]:=
  AssociationMap[
    With[{cur1=cur<>FromCharacterCode[#[[1]], "UTF8"]},
      #[[1]]->
        Map[
          If[AssociationQ[#], attachDefaultWords[#, cur1], #]&,
          If[AssociationQ@#[[2]], Append[#[[2]], -1->cur1], #[[2]]]
          ]
      ]&,
    assoc
    ];
getPrefixes[strings_, pos_]:=
  With[{longer=Select[strings, StringLength@#>=pos&]},
    Which[
      Length@strings==1,
        strings[[1]],
      Length@longer>0,
        GroupBy[longer, 
          ToCharacterCode[StringTake[#, {pos}], "UTF8"][[1]]&, 
          getPrefixes[#, pos+1]&
          ],
      True,
        strings[[1]]
      ]
    ];
buildTrie[strings_, startAt_:1]:=
  attachDefaultWords@getPrefixes[strings, startAt]


(* ::Subsubsection::Closed:: *)
(*Destructor Operations*)



(* basic destructors *)
TrieQ[q_Trie]:=System`Private`NoEntryQ[q];
TrieData[Trie[a_]]:=a;


(* ::Subsubsection::Closed:: *)
(*TrieAdd*)



(* ::Subsubsubsection::Closed:: *)
(*iTrieAdd*)



groupPaths[{p_String}]:=p;
groupPaths[p_]:=
  GroupBy[p, (First[#]&)->(Rest[#]&), groupPaths]


mergeDown[s:{_String}, depth_]:=
  s;
mergeDown[s:{__String}, depth_]:=
  buildTrie[s, depth];
mergeDown[s:{__Association}, depth_]:=
  mergeDown[s, depth+1];
mergeDown[s:{___Association, e_String, ___}, depth_]:=
  Prepend[mergeDown[DeleteCases[s, e], depth], -1->e];
mergeDown[a_, paths_, depth_:1]:=
  Merge[
    {a, paths},
    mergeDown[#, depth]&
    ]


iTrieAdd[a_, words:{__String}]:=
  Module[{paths, new},
    paths = 
      MapThread[
        Flatten[{#, #2}]&,
        {
          Map[trieFindPrefixes, ToCharacterCode[words, "UTF8"]],
          words
          }
        ];
    new = 
      groupPaths[paths];
    mergeDown[{a, new}]
    ];
 iTrieAdd[a_, words_String]:=
   iTrieAdd[a, {words}]


(* ::Subsubsubsection::Closed:: *)
(*TrieAdd*)



TrieAdd[Trie[a_], words_]:=
  newTrie@iTrieAdd[a, words];


(* ::Subsubsection::Closed:: *)
(*TrieRemove*)



(* ::Subsubsubsection::Closed:: *)
(*iTrieRemove*)



iTrieRemove[a_, words:{__String}]:=
  Module[{paths, new},
    paths = 
      Flatten/@
        Map[trieFindPrefixes, ToCharacterCode[words, "UTF8"]];
    paths = Reverse@SortBy[paths, Length];
    Fold[
      With[{v=#[[Sequence@@#2]]},
        Which[
          StringQ@v,
            Delete[#, Key/@#2],
          AssociationQ@v,
            Delete[#, Key/@Append[#2, -1]] (* does it only makes sense to terminals though? *),
          True,
            #
          ]
        ]&,
      a,
      paths
      ]
    ]


(* ::Subsubsubsection::Closed:: *)
(*TrieRemove*)



TrieRemove[Trie[a_], words_]:=
  newTrie@iTrieRemove[a, words];


(* ::Subsubsection::Closed:: *)
(*TrieMatches*)



TrieMatches[Trie[a_], word_]:=
  With[{t=trieApply[a, word]},
    If[AssociationQ[t], newTrie[t], t]
    ];


(* ::Subsubsubsection::Closed:: *)
(*trieApply*)



trieApply//Clear;
trieApply[a_, word:{_Integer, ___}]:=
  Fold[
    Function[
      With[{r=#[#2[[1]]]},
        Which[
          MissingQ[r],
            Return[Missing["KeyAbsent", FromCharacterCode[word, "UTF8"]], Fold],
          StringQ[r],
            If[Length@word==#2[[2]],
              Return[r, Fold],
              If[!StringStartsQ[r, #],
                Return[Missing["KeyAbsent", #], Fold],
                Return[r, Fold]
                ]&@FromCharacterCode[word, "UTF8"]
              ],
          True,
            r
          ]
        ]
      ], 
    a,
    Thread[{word, Range[Length@word]}]
    ];
trieApply[a_, word:{_String, ___}]:=
  With[
    {
      p1=
        Developer`ToPackedArray[ToCharacterCode[word, "UTF8"]]
      },
    If[Developer`PackedArrayQ[p1],
      trieApply[a, p1],
      trieApply[a, #]&/@p1
      ]
    ];
trieApply[a_, word_String]:=
  trieApply[a, ToCharacterCode[word, "UTF8"]];


(* ::Subsubsection::Closed:: *)
(*TrieClosest*)



TrieClosest[Trie[a_], word_]:=
  Module[
    {
      t=trieFindPrefixes[a, word]
      },
    If[Length@t==2&&Length@t[[2]]==0, 
      triePullPrefix[t], 
      triePullPrefix/@t
      ]
    ]


(* ::Subsubsubsection::Closed:: *)
(*triePullPrefix*)



triePullPrefix[a_, p_]:=
  With[{t=Fold[Lookup, a, p]},
    If[AssociationQ@t, newTrie[t], t]
    ]


(* ::Subsubsubsection::Closed:: *)
(*trieFindPrefixes*)



trieFindPrefixes//Clear;
trieFindPrefixes[a_, word:{_Integer, ___}]:=
  Module[{r},
    Fold[
      Function[
        r = #[[1]][#2];, 
        If[!AssociationQ[r],
          Return[{#[[2]], #2}, Fold], 
          {
            {#[[2]], #2},
            r
            }
          ]
        ], 
      word
      ]
    ];
trieFindPrefixes[a_, word:{_String, ___}]:=
  With[
    {
      p1=
        Developer`ToPackedArray[ToCharacterCode[word, "UTF8"]]
      },
    If[Developer`PackedArrayQ[p1],
      trieFindPrefixes[a, p1],
      trieFindPrefixes[a, #]&/@p1
      ]
    ];
trieFindPrefixes[a_, word_String]:=
  trieFindPrefixes[a, ToCharacterCode[word, "UTF8"]];


(* ::Subsubsection::Closed:: *)
(*TrieWordCount*)



trieCountRec[Hold[ct_], words_]:=
  With[{l=Length@words, v=Select[Values[words], AssociationQ]},
    If[l>0,
      ct+=l-Length@v;
      trieCountRec[Hold[ct], #]&/@v;
      ]
    ]


TrieWordCount[Trie[a_]]:=
  Module[{ct=0},
    trieCountRec[Hold[ct], a];
    ct
    ]


(* ::Subsubsection::Closed:: *)
(*Formatting*)



Format[t_Trie?TrieQ, StandardForm]:=
RawBoxes@
BoxForm`ArrangeSummaryBox[
Trie,
t,
None,
{
BoxForm`MakeSummaryItem[{"Words:", TrieWordCount[t]}, StandardForm]
},
{},
StandardForm
];
Format[t_Trie?TrieQ, TextForm]:=
"Trie[<>]"


End[];



