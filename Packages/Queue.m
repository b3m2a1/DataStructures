(* ::Package:: *)

(* Autogenerated Package *)

Queue::usage="A simple FIFO queue";
QueueExtend::usage="Extends a Queue object";
QueuePush::usage="Pushes onto a Queue object";
QueueEmptyQ::usage="EmptyQ";
QueueSize::usage="Size of the Queue";
QueueData::usage="Queue Association";


Begin["`Private`"];


(* ::Subsection:: *)
(*Queue*)



(* ::Subsubsection::Closed:: *)
(*Constructor*)



Queue//ClearAll;
Queue[]:=Queue[<||>];
unconstructedQ=Function[Null, System`Private`EntryQ[Unevaluated[#]], HoldFirst];
q:Queue[a_Association?AssociationQ]?unconstructedQ:=
System`Private`SetNoEntry[Unevaluated@q]


(* ::Subsubsection::Closed:: *)
(*Destructor Operations*)



(* basic destructors *)
QueueQ[q_Queue]:=System`Private`NoEntryQ[q];
QueueSize[Queue[data_]]:=Length@data;
QueueData[Queue[data_]]:=data;
QueueEmptyQ[q_]:=QueueSize[q]===0;
(* construct all additions first then add in batch *)


(* ::Subsubsection::Closed:: *)
(*Push*)



QueueExtend[q:Queue[data_], dataList_]:=
Module[{d=data,new=Range[Length@dataList]+$ModuleNumber},
With[{j=Join[d, AssociationThread[new, dataList]]},System`Private`SetNoEntry[Unevaluated@Queue[j]]
]
];
QueuePush[q_Queue?QueueQ, data_]:=
QueueExtend[q, {data}];


(* ::Subsubsection::Closed:: *)
(*Pop*)



QueueDrop[q:Queue[data_], n_Integer?Positive]:=
  With[{k=Take[data, UpTo@n]},
    {Values[k], Queue@KeyDrop[data, Keys[k]]}
    ];
QueuePop[q_Queue?QueueQ]:=
  {#[[1, 1]], #[[2]]}&@QueueDrop[q, 1];


(* ::Subsubsection::Closed:: *)
(*Formatting*)



Format[q_Queue?QueueQ, StandardForm]:=
RawBoxes@
BoxForm`ArrangeSummaryBox[
Queue,
q,
None,
{
BoxForm`MakeSummaryItem[{"Size:", QueueSize[q]}, StandardForm]
},
{},
StandardForm
];
Format[q_Queue?QueueQ, TextForm]:=
"Queue[<>]"


End[];



